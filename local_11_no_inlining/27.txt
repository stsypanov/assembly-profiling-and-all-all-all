# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1026.069 ns/op
# Warmup Iteration   2: 659.818 ns/op
# Warmup Iteration   3: 625.640 ns/op
# Warmup Iteration   4: 627.279 ns/op
# Warmup Iteration   5: 626.050 ns/op
Iteration   1: 639.706 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  639.706 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 116179 total address lines.
Perf output processed (skipped 11.192 seconds):
 Column 1: cycles (1925 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (282 bytes) 

            0x00007f4a1c36ad94: mov     %r11,%rbx         ;*putfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@112 (line 182)
            0x00007f4a1c36ad97: mov     0xc(%rbx),%r11d
            0x00007f4a1c36ad9b: test    %r11d,%r11d
            0x00007f4a1c36ad9e: jbe     0x7f4a1c36b0ad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f4a1c36ada4: mov     %rbx,%r11
            0x00007f4a1c36ada7: mov     (%rsp),%r10
            0x00007f4a1c36adab: mov     %r10,%rcx
            0x00007f4a1c36adae: mov     $0x8012575,%r8d   ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%     0x00007f4a1c36adb4: shl     $0x3,%r8
            0x00007f4a1c36adb8: movabs  $0x800000000,%r12
            0x00007f4a1c36adc2: add     %r12,%r8
            0x00007f4a1c36adc5: xor     %r12,%r12
  0.05%  ╭  0x00007f4a1c36adc8: jmp     0x7f4a1c36ae19
         │  0x00007f4a1c36adca: mov     %r15,%rsi
         │  0x00007f4a1c36adcd: movabs  $0x7f4a311dc290,%r10
         │  0x00007f4a1c36add7: callq   %r10
         │  0x00007f4a1c36adda: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f4a1c36ade0: mov     0x108(%r15),%r10
  0.52%  │  0x00007f4a1c36ade7: mov     (%rsp),%r11
         │  0x00007f4a1c36adeb: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f4a1c36adef: mov     0x10(%rsp),%r9d
         │  0x00007f4a1c36adf4: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.99%  │  0x00007f4a1c36adf7: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f4a1c36adfc: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f4a1c36adff: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f4a1c36b3b8
         │  0x00007f4a1c36ae03: cmp     %r8d,%r9d
         │  0x00007f4a1c36ae06: jnl     0x7f4a1c36b0ad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.47%  │  0x00007f4a1c36ae0c: mov     0x8(%rsp),%ebp
         │  0x00007f4a1c36ae10: mov     0x14(%rsp),%ecx
         │  0x00007f4a1c36ae14: mov     0x18(%rsp),%r8
         ↘  0x00007f4a1c36ae19: mov     0x118(%r15),%rax
  0.73%     0x00007f4a1c36ae20: mov     %rax,%r10
            0x00007f4a1c36ae23: add     $0x28,%r10
  0.16%     0x00007f4a1c36ae27: cmp     0x128(%r15),%r10
            0x00007f4a1c36ae2e: jnb     0x7f4a1c36b158    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f4a1c36ae34: mov     %r10,0x118(%r15)
  0.68%     0x00007f4a1c36ae3b: prefetchnta 0x100(%r10)
            0x00007f4a1c36ae43: mov     0xb8(%r8),%r10
            0x00007f4a1c36ae4a: mov     %r10,(%rax)
            0x00007f4a1c36ae4d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.73%     0x00007f4a1c36ae54: movl    $0x0,0xc(%rax)
            0x00007f4a1c36ae5b: movq    $0x0,0x10(%rax)
            0x00007f4a1c36ae63: movq    $0x0,0x18(%rax)
            0x00007f4a1c36ae6b: movl    $0x0,0x20(%rax)
  0.36%     0x00007f4a1c36ae72: mov     %ebp,0x8(%rsp)
            0x00007f4a1c36ae76: mov     %r11d,0xc(%rsp)
  0.05%     0x00007f4a1c36ae7b: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f4a1c36ae80: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.83%     0x00007f4a1c36ae83: mov     %ecx,0x14(%rsp)
            0x00007f4a1c36ae87: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4a1c36ae8a: mov     %rbp,%rsi
            0x00007f4a1c36ae8d: nop
  0.52%     0x00007f4a1c36ae8f: callq   0x7f4a1c36a4f0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.16%     0x00007f4a1c36ae94: movl    $0x0,0x14(%rbp)
            0x00007f4a1c36ae9b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.42%     0x00007f4a1c36aea1: mov     (%rsp),%rsi
            0x00007f4a1c36aea5: nop
            0x00007f4a1c36aea7: callq   0x7f4a1c36b41e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f4a1c36aeac: mov     %rax,%rbx
  0.52%     0x00007f4a1c36aeaf: cmpb    $0x0,0x30(%r15)
            0x00007f4a1c36aeb4: jne     0x7f4a1c36b0bd
            0x00007f4a1c36aeba: mov     %rbx,%r10
            0x00007f4a1c36aebd: mov     %r10d,0x1c(%rbp)
  0.73%     0x00007f4a1c36aec1: mov     %rbp,%r10
            0x00007f4a1c36aec4: mov     %rbx,%r11
            0x00007f4a1c36aec7: xor     %r10,%r11
            0x00007f4a1c36aeca: shr     $0x14,%r11
  0.42%     0x00007f4a1c36aece: test    %r11,%r11
            0x00007f4a1c36aed1: je      0x7f4a1c36af2b
            0x00007f4a1c36aed3: test    %rbx,%rbx
            0x00007f4a1c36aed6: je      0x7f4a1c36af2b
            0x00007f4a1c36aed8: shr     $0x9,%r10
            0x00007f4a1c36aedc: movabs  $0x7f4a0f800000,%rdi
            0x00007f4a1c36aee6: add     %r10,%rdi
            0x00007f4a1c36aee9: cmpb    $0x20,(%rdi)
            0x00007f4a1c36aeec: je      0x7f4a1c36af2b
            0x00007f4a1c36aeee: mov     0x80(%r15),%r10
            0x00007f4a1c36aef5: mov     0x70(%r15),%r11
....................................................................................................
 28.36%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4a1c36afd0: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f4a1c36afd4: mov     %r8,0x70(%r15)
            0x00007f4a1c36afd8: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.58%     0x00007f4a1c36afde: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f4a1c36afe2: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f4a1c36b39c
            0x00007f4a1c36afe6: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.42%     0x00007f4a1c36afeb: mov     (%rsp),%r11
            0x00007f4a1c36afef: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f4a1c36aff5: vcvttss2si %xmm1,%r11d
  0.42%     0x00007f4a1c36aff9: cmp     $0x80000000,%r11d
         ╭  0x00007f4a1c36b000: jne     0x7f4a1c36b012
         │  0x00007f4a1c36b002: sub     $0x8,%rsp
         │  0x00007f4a1c36b006: vmovss  %xmm1,(%rsp)
         │  0x00007f4a1c36b00b: callq   0x7f4a148b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f4a1c36b010: pop     %r11
         ↘  0x00007f4a1c36b012: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.31%     0x00007f4a1c36b016: mov     0xc(%rsp),%ebx
            0x00007f4a1c36b01a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007f4a1c36b3a8
            0x00007f4a1c36b01e: mov     0x10(%rsp),%r9d
            0x00007f4a1c36b023: cmp     %r11d,%r9d
            0x00007f4a1c36b026: jnb     0x7f4a1c36b210
  0.68%     0x00007f4a1c36b02c: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007f4a1c36b02f: lea     0x10(%rbx,%r9,4),%r14
            0x00007f4a1c36b034: cmpb    $0x0,0x30(%r15)
            0x00007f4a1c36b039: jne     0x7f4a1c36b126
  0.52%     0x00007f4a1c36b03f: mov     %r10,%r11
            0x00007f4a1c36b042: mov     %r10,%r8
            0x00007f4a1c36b045: mov     %r8d,(%r14)
            0x00007f4a1c36b048: mov     %r14,%r10
  0.83%     0x00007f4a1c36b04b: xor     %r10,%r11
            0x00007f4a1c36b04e: shr     $0x14,%r11
            0x00007f4a1c36b052: test    %r11,%r11
            0x00007f4a1c36b055: je      0x7f4a1c36ade0
            0x00007f4a1c36b05b: shr     $0x9,%r10
            0x00007f4a1c36b05f: movabs  $0x7f4a0f800000,%rdi
            0x00007f4a1c36b069: add     %r10,%rdi
            0x00007f4a1c36b06c: cmpb    $0x20,(%rdi)
            0x00007f4a1c36b06f: je      0x7f4a1c36ade0
            0x00007f4a1c36b075: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 14.81%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (282 bytes) 
 14.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (109 bytes) 
  5.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 565 (180 bytes) 
  5.51%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 (141 bytes) 
  4.83%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (160 bytes) 
  4.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 (146 bytes) 
  3.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 (104 bytes) 
  3.79%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 (27 bytes) 
  3.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (58 bytes) 
  2.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 (17 bytes) 
  2.03%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 (23 bytes) 
  1.92%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (0 bytes) 
  1.92%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 566 (32 bytes) 
  1.40%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.09%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 567 (27 bytes) 
  0.88%           libjvm.so  SpinPause (9 bytes) 
  0.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 (0 bytes) 
  0.68%           libjvm.so  ParallelTaskTerminator::offer_termination (5 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (107 bytes) 
  0.52%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (0 bytes) 
 11.69%  <...other 140 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 
  8.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 
  7.53%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 
  5.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 565 
  5.35%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 
  3.79%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 
  2.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 
  1.92%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 566 
  1.40%   [kernel.kallsyms]  native_write_msr 
  1.09%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 567 
  0.88%           libjvm.so  SpinPause 
  0.73%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 595 
  0.73%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.57%        libc-2.31.so  malloc 
  0.47%   [kernel.kallsyms]  x86_pmu_enable 
  0.42%   [kernel.kallsyms]  asm_exc_page_fault 
  0.42%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.42%        libc-2.31.so  _int_free 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 563 
  0.31%   [kernel.kallsyms]  irqentry_exit_to_user_mode 
  6.91%  <...other 108 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.58%         c2, level 4
  6.34%   [kernel.kallsyms]
  3.43%           libjvm.so
  1.87%        libc-2.31.so
  0.47%    libfcml.so.0.0.0
  0.16%         interpreter
  0.05%         c1, level 3
  0.05%      perf-54183.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       639.706          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
