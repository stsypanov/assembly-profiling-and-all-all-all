# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1136.419 ns/op
# Warmup Iteration   2: 668.779 ns/op
# Warmup Iteration   3: 615.124 ns/op
# Warmup Iteration   4: 614.402 ns/op
# Warmup Iteration   5: 617.072 ns/op
Iteration   1: 614.076 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  614.076 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 117946 total address lines.
Perf output processed (skipped 11.214 seconds):
 Column 1: cycles (1957 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (227 bytes) 

           0x00007efcd836b445: movabs  $0x7efced559290,%r10
           0x00007efcd836b44f: callq   %r10
           0x00007efcd836b452: nopw    0x0(%rax,%rax)
           0x00007efcd836b45c: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007efcd836b460: mov     0x108(%r15),%r11
           0x00007efcd836b467: mov     (%rsp),%r10
           0x00007efcd836b46b: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.56%    0x00007efcd836b46f: mov     0x10(%rsp),%r9d
           0x00007efcd836b474: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
           0x00007efcd836b477: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007efcd836b47c: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
  0.51%    0x00007efcd836b47f: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007efcd836ba44
           0x00007efcd836b483: cmp     %r11d,%r9d
           0x00007efcd836b486: jnl     0x7efcd836b72e    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
           0x00007efcd836b48c: mov     0x8(%rsp),%ebp
           0x00007efcd836b490: mov     0x14(%rsp),%r9d
  1.02%    0x00007efcd836b495: mov     0x18(%rsp),%r8
           0x00007efcd836b49a: mov     0x118(%r15),%rax
           0x00007efcd836b4a1: mov     %rax,%r11
           0x00007efcd836b4a4: add     $0x28,%r11
  0.46%    0x00007efcd836b4a8: cmp     0x128(%r15),%r11
           0x00007efcd836b4af: jnb     0x7efcd836b7d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%    0x00007efcd836b4b5: mov     %r11,0x118(%r15)
           0x00007efcd836b4bc: prefetchnta 0x100(%r11)
           0x00007efcd836b4c4: mov     0xb8(%r8),%r11
  0.82%    0x00007efcd836b4cb: mov     %r11,(%rax)
           0x00007efcd836b4ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007efcd836b4d5: movl    $0x0,0xc(%rax)
           0x00007efcd836b4dc: movq    $0x0,0x10(%rax)
  0.72%    0x00007efcd836b4e4: movq    $0x0,0x18(%rax)
           0x00007efcd836b4ec: movl    $0x0,0x20(%rax)
           0x00007efcd836b4f3: mov     %ebp,0x8(%rsp)
           0x00007efcd836b4f7: mov     %r10d,0xc(%rsp)
  0.51%    0x00007efcd836b4fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007efcd836b501: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007efcd836b505: mov     %r9d,0x14(%rsp)
           0x00007efcd836b50a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.66%    0x00007efcd836b50d: mov     %rbp,%rsi
  0.05%    0x00007efcd836b510: nop
  0.05%    0x00007efcd836b513: callq   0x7efcd089d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.66%    0x00007efcd836b518: movl    $0x0,0x14(%rbp)
  0.05%    0x00007efcd836b51f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.14%    0x00007efcd836b525: mov     (%rsp),%rsi
           0x00007efcd836b529: nop
           0x00007efcd836b52b: callq   0x7efcd089d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007efcd836b530: mov     %rax,%rbx
  1.07%    0x00007efcd836b533: cmpb    $0x0,0x30(%r15)
           0x00007efcd836b538: jne     0x7efcd836b73e
           0x00007efcd836b53e: mov     %rbx,%r11
           0x00007efcd836b541: mov     %r11d,0x1c(%rbp)
  0.56%    0x00007efcd836b545: mov     %rbp,%r10
           0x00007efcd836b548: mov     %rbx,%r11
           0x00007efcd836b54b: xor     %r10,%r11
           0x00007efcd836b54e: shr     $0x14,%r11
  0.61%    0x00007efcd836b552: test    %r11,%r11
           0x00007efcd836b555: je      0x7efcd836b5af
           0x00007efcd836b557: test    %rbx,%rbx
           0x00007efcd836b55a: je      0x7efcd836b5af
           0x00007efcd836b55c: shr     $0x9,%r10
           0x00007efcd836b560: movabs  $0x7efccb800000,%rdi
           0x00007efcd836b56a: add     %r10,%rdi
           0x00007efcd836b56d: cmpb    $0x20,(%rdi)
           0x00007efcd836b570: je      0x7efcd836b5af
           0x00007efcd836b572: mov     0x80(%r15),%r10
           0x00007efcd836b579: mov     0x70(%r15),%r11
....................................................................................................
 26.52%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efcd836b654: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efcd836b658: mov     %r8,0x70(%r15)
            0x00007efcd836b65c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.11%     0x00007efcd836b662: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007efcd836b666: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007efcd836ba28
            0x00007efcd836b66a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.56%     0x00007efcd836b66f: mov     (%rsp),%r10
            0x00007efcd836b673: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007efcd836b679: vcvttss2si %xmm0,%r8d
  0.61%     0x00007efcd836b67d: cmp     $0x80000000,%r8d
         â­  0x00007efcd836b684: jne     0x7efcd836b696
         â  0x00007efcd836b686: sub     $0x8,%rsp
         â  0x00007efcd836b68a: vmovss  %xmm0,(%rsp)
         â  0x00007efcd836b68f: callq   0x7efcd08b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007efcd836b694: pop     %r8
         â  0x00007efcd836b696: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007efcd836b69a: mov     0xc(%rsp),%ebx
  0.36%     0x00007efcd836b69e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007efcd836ba34
            0x00007efcd836b6a2: mov     0x10(%rsp),%r9d
....................................................................................................
 13.34%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (227 bytes) 
 13.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (27 bytes) 
  6.69%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (160 bytes) 
  6.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 564 (191 bytes) 
  4.85%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  4.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (146 bytes) 
  4.65%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 (141 bytes) 
  4.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (58 bytes) 
  4.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (104 bytes) 
  2.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (53 bytes) 
  1.89%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 (20 bytes) 
  1.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (5 bytes) 
  1.58%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 568 (18 bytes) 
  1.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 (17 bytes) 
  1.23%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 567 (24 bytes) 
  0.92%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (0 bytes) 
  0.61%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (0 bytes) 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 566 (38 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (54 bytes) 
 11.29%  <...other 144 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 
  9.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 
  7.31%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 
  6.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 564 
  6.54%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 
  4.85%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  1.58%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 568 
  1.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 
  1.23%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 567 
  0.92%   [kernel.kallsyms]  native_write_msr 
  0.46%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 599 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 566 
  0.36%        libc-2.31.so  malloc 
  0.31%        libc-2.31.so  _int_malloc 
  0.31%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 570 
  0.26%        libc-2.31.so  malloc_consolidate 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.20%   [kernel.kallsyms]  __perf_event_task_sched_in 
  7.36%  <...other 107 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.78%         c2, level 4
  4.65%   [kernel.kallsyms]
  2.55%           libjvm.so
  1.84%        libc-2.31.so
  0.72%    libfcml.so.0.0.0
  0.26%         interpreter
  0.05%         c1, level 3
  0.05%  libpthread-2.31.so
  0.05%              [vdso]
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       614.076          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
