# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1182.924 ns/op
# Warmup Iteration   2: 628.210 ns/op
# Warmup Iteration   3: 613.720 ns/op
# Warmup Iteration   4: 613.859 ns/op
# Warmup Iteration   5: 615.786 ns/op
Iteration   1: 613.817 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.817 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 117122 total address lines.
Perf output processed (skipped 11.133 seconds):
 Column 1: cycles (1984 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (218 bytes) 

           0x00007f852436b8c7: mov     %r15,%rsi
           0x00007f852436b8ca: movabs  $0x7f853a62c290,%r10
           0x00007f852436b8d4: callq   %r10
           0x00007f852436b8d7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f852436b8e0: mov     0x108(%r15),%r10
           0x00007f852436b8e7: mov     0x10(%rsp),%r11
           0x00007f852436b8ec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.60%    0x00007f852436b8f0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f852436b8f2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007f852436b8f5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007f852436bea8
           0x00007f852436b8f9: cmp     %r10d,%ebp
           0x00007f852436b8fc: jnl     0x7f852436bba7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.60%    0x00007f852436b902: mov     0xc(%rsp),%r10d
           0x00007f852436b907: mov     0x18(%rsp),%r8
           0x00007f852436b90c: mov     0x8(%rsp),%r13d
  0.05%    0x00007f852436b911: mov     0x118(%r15),%rax
  0.50%    0x00007f852436b918: mov     %rax,%r11
  0.05%    0x00007f852436b91b: add     $0x28,%r11
           0x00007f852436b91f: cmp     0x128(%r15),%r11
           0x00007f852436b926: jnb     0x7f852436bc53    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f852436b92c: mov     %r11,0x118(%r15)
  0.55%    0x00007f852436b933: prefetchnta 0x100(%r11)
  0.05%    0x00007f852436b93b: mov     0xb8(%r8),%r11
           0x00007f852436b942: mov     %r11,(%rax)
           0x00007f852436b945: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.71%    0x00007f852436b94c: movl    $0x0,0xc(%rax)
           0x00007f852436b953: movq    $0x0,0x10(%rax)
           0x00007f852436b95b: movq    $0x0,0x18(%rax)
           0x00007f852436b963: movl    $0x0,0x20(%rax)
  0.60%    0x00007f852436b96a: mov     %ebp,(%rsp)
           0x00007f852436b96d: mov     %r13d,0x8(%rsp)
           0x00007f852436b972: mov     %ecx,0x4(%rsp)
           0x00007f852436b976: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.35%    0x00007f852436b97b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f852436b97f: mov     %r10d,0xc(%rsp)
           0x00007f852436b984: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007f852436b987: mov     %rbp,%rsi
  0.50%    0x00007f852436b98a: nop
  0.05%    0x00007f852436b98b: callq   0x7f852436a770    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.05%    0x00007f852436b990: movl    $0x0,0x14(%rbp)
  0.66%    0x00007f852436b997: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.50%    0x00007f852436b99d: mov     0x10(%rsp),%rsi
  0.05%    0x00007f852436b9a2: nop
           0x00007f852436b9a3: callq   0x7f851ceab1a0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f852436b9a8: mov     %rax,%rbx
  0.55%    0x00007f852436b9ab: cmpb    $0x0,0x30(%r15)
           0x00007f852436b9b0: jne     0x7f852436bbb7
           0x00007f852436b9b6: mov     %rbx,%r11
           0x00007f852436b9b9: mov     %r11d,0x1c(%rbp)
  0.55%    0x00007f852436b9bd: mov     %rbp,%r10
  0.10%    0x00007f852436b9c0: mov     %rbx,%r11
           0x00007f852436b9c3: xor     %r10,%r11
           0x00007f852436b9c6: shr     $0x14,%r11
  0.91%    0x00007f852436b9ca: test    %r11,%r11
           0x00007f852436b9cd: je      0x7f852436ba27
           0x00007f852436b9cf: test    %rbx,%rbx
           0x00007f852436b9d2: je      0x7f852436ba27
           0x00007f852436b9d4: shr     $0x9,%r10
           0x00007f852436b9d8: movabs  $0x7f8538495000,%rdi
           0x00007f852436b9e2: add     %r10,%rdi
           0x00007f852436b9e5: cmpb    $0x20,(%rdi)
           0x00007f852436b9e8: je      0x7f852436ba27
           0x00007f852436b9ea: mov     0x80(%r15),%r10
           0x00007f852436b9f1: mov     0x70(%r15),%r11
....................................................................................................
 26.06%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f852436bacc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f852436bad0: mov     %r8,0x70(%r15)
            0x00007f852436bad4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.36%     0x00007f852436bada: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f852436bade: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f852436be88
            0x00007f852436bae2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.55%     0x00007f852436bae7: mov     0x10(%rsp),%r11
            0x00007f852436baec: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007f852436baf2: vcvttss2si %xmm0,%r8d
  0.50%     0x00007f852436baf6: cmp     $0x80000000,%r8d
         â­  0x00007f852436bafd: jne     0x7f852436bb0f
         â  0x00007f852436baff: sub     $0x8,%rsp
         â  0x00007f852436bb03: vmovss  %xmm0,(%rsp)
         â  0x00007f852436bb08: callq   0x7f851c8b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007f852436bb0d: pop     %r8
         â  0x00007f852436bb0f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f852436bb13: mov     0x4(%rsp),%r9d
  0.71%     0x00007f852436bb18: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007f852436be94
            0x00007f852436bb1c: mov     (%rsp),%ebp
....................................................................................................
 14.42%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (218 bytes) 
 14.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (28 bytes) 
  8.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (284 bytes) 
  6.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 566 (191 bytes) 
  4.59%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 (141 bytes) 
  4.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (58 bytes) 
  4.03%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  3.48%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (99 bytes) 
  2.92%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (52 bytes) 
  2.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 (27 bytes) 
  1.92%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (0 bytes) 
  1.86%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 (23 bytes) 
  1.51%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 (27 bytes) 
  1.41%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 (35 bytes) 
  1.21%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (23 bytes) 
  0.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (146 bytes) 
  0.55%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 592 (98 bytes) 
  0.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (7 bytes) 
  0.40%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (8 bytes) 
  9.88%  <...other 130 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 
  9.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 
  6.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 566 
  6.45%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 
  5.09%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 
  4.03%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  2.92%   [kernel.kallsyms]  native_write_msr 
  2.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 
  1.51%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 
  1.41%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 
  0.71%        libc-2.31.so  malloc 
  0.55%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 592 
  0.45%        libc-2.31.so  _int_free 
  0.40%        libc-2.31.so  malloc_consolidate 
  0.35%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 565 
  0.30%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.30%        libc-2.31.so  _int_malloc 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  5.85%  <...other 90 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.41%         c2, level 4
  5.54%   [kernel.kallsyms]
  2.62%           libjvm.so
  2.52%        libc-2.31.so
  0.50%    libfcml.so.0.0.0
  0.15%         interpreter
  0.05%        runtime stub
  0.05%         c1, level 3
  0.05%  libpthread-2.31.so
  0.05%              kvm.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.817          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
