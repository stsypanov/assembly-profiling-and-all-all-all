# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1075.760 ns/op
# Warmup Iteration   2: 672.963 ns/op
# Warmup Iteration   3: 629.509 ns/op
# Warmup Iteration   4: 620.400 ns/op
# Warmup Iteration   5: 623.277 ns/op
Iteration   1: 617.388 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  617.388 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 117266 total address lines.
Perf output processed (skipped 11.263 seconds):
 Column 1: cycles (1913 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (218 bytes) 

           0x00007fbc2436ce47: mov     %r15,%rsi
           0x00007fbc2436ce4a: movabs  $0x7fbc3a2c2290,%r10
           0x00007fbc2436ce54: callq   %r10
           0x00007fbc2436ce57: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fbc2436ce60: mov     0x108(%r15),%r10
           0x00007fbc2436ce67: mov     0x10(%rsp),%r11
           0x00007fbc2436ce6c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.47%    0x00007fbc2436ce70: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fbc2436ce72: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007fbc2436ce75: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fbc2436d434
           0x00007fbc2436ce79: cmp     %r10d,%ebp
           0x00007fbc2436ce7c: jnl     0x7fbc2436d127    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.31%    0x00007fbc2436ce82: mov     0xc(%rsp),%r10d
           0x00007fbc2436ce87: mov     0x18(%rsp),%r8
           0x00007fbc2436ce8c: mov     0x8(%rsp),%r13d
           0x00007fbc2436ce91: mov     0x118(%r15),%rax
  0.52%    0x00007fbc2436ce98: mov     %rax,%r11
           0x00007fbc2436ce9b: add     $0x28,%r11
           0x00007fbc2436ce9f: cmp     0x128(%r15),%r11
           0x00007fbc2436cea6: jnb     0x7fbc2436d1d3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fbc2436ceac: mov     %r11,0x118(%r15)
  0.68%    0x00007fbc2436ceb3: prefetchnta 0x100(%r11)
           0x00007fbc2436cebb: mov     0xb8(%r8),%r11
  0.05%    0x00007fbc2436cec2: mov     %r11,(%rax)
  0.10%    0x00007fbc2436cec5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.52%    0x00007fbc2436cecc: movl    $0x0,0xc(%rax)
           0x00007fbc2436ced3: movq    $0x0,0x10(%rax)
           0x00007fbc2436cedb: movq    $0x0,0x18(%rax)
           0x00007fbc2436cee3: movl    $0x0,0x20(%rax)
  0.52%    0x00007fbc2436ceea: mov     %ebp,(%rsp)
           0x00007fbc2436ceed: mov     %r13d,0x8(%rsp)
           0x00007fbc2436cef2: mov     %ecx,0x4(%rsp)
           0x00007fbc2436cef6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.47%    0x00007fbc2436cefb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fbc2436ceff: mov     %r10d,0xc(%rsp)
           0x00007fbc2436cf04: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007fbc2436cf07: mov     %rbp,%rsi
  0.89%    0x00007fbc2436cf0a: nop
           0x00007fbc2436cf0b: callq   0x7fbc2436aff0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.05%    0x00007fbc2436cf10: movl    $0x0,0x14(%rbp)
  0.68%    0x00007fbc2436cf17: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.55%    0x00007fbc2436cf1d: mov     0x10(%rsp),%rsi
  0.05%    0x00007fbc2436cf22: nop
           0x00007fbc2436cf23: callq   0x7fbc1ceae9a0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fbc2436cf28: mov     %rax,%rbx
  0.47%    0x00007fbc2436cf2b: cmpb    $0x0,0x30(%r15)
  0.05%    0x00007fbc2436cf30: jne     0x7fbc2436d137
           0x00007fbc2436cf36: mov     %rbx,%r11
           0x00007fbc2436cf39: mov     %r11d,0x1c(%rbp)
  0.47%    0x00007fbc2436cf3d: mov     %rbp,%r10
           0x00007fbc2436cf40: mov     %rbx,%r11
           0x00007fbc2436cf43: xor     %r10,%r11
           0x00007fbc2436cf46: shr     $0x14,%r11
  0.52%    0x00007fbc2436cf4a: test    %r11,%r11
           0x00007fbc2436cf4d: je      0x7fbc2436cfa7
           0x00007fbc2436cf4f: test    %rbx,%rbx
           0x00007fbc2436cf52: je      0x7fbc2436cfa7
           0x00007fbc2436cf54: shr     $0x9,%r10
           0x00007fbc2436cf58: movabs  $0x7fbc3812b000,%rdi
           0x00007fbc2436cf62: add     %r10,%rdi
           0x00007fbc2436cf65: cmpb    $0x20,(%rdi)
           0x00007fbc2436cf68: je      0x7fbc2436cfa7
           0x00007fbc2436cf6a: mov     0x80(%r15),%r10
           0x00007fbc2436cf71: mov     0x70(%r15),%r11
....................................................................................................
 26.45%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbc2436d04c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fbc2436d050: mov     %r8,0x70(%r15)
            0x00007fbc2436d054: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.44%     0x00007fbc2436d05a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbc2436d05e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fbc2436d414
  0.10%     0x00007fbc2436d062: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.58%     0x00007fbc2436d067: mov     0x10(%rsp),%r11
            0x00007fbc2436d06c: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007fbc2436d072: vcvttss2si %xmm0,%r8d
  0.94%     0x00007fbc2436d076: cmp     $0x80000000,%r8d
         â­  0x00007fbc2436d07d: jne     0x7fbc2436d08f
         â  0x00007fbc2436d07f: sub     $0x8,%rsp
         â  0x00007fbc2436d083: vmovss  %xmm0,(%rsp)
         â  0x00007fbc2436d088: callq   0x7fbc1c8b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fbc2436d08d: pop     %r8
         â  0x00007fbc2436d08f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fbc2436d093: mov     0x4(%rsp),%r9d
  0.78%     0x00007fbc2436d098: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fbc2436d420
            0x00007fbc2436d09c: mov     (%rsp),%ebp
....................................................................................................
 14.06%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (218 bytes) 
 14.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (28 bytes) 
  7.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 575 (181 bytes) 
  6.53%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 568 (163 bytes) 
  5.59%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 570 (141 bytes) 
  4.13%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  4.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 (146 bytes) 
  3.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (61 bytes) 
  3.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 (104 bytes) 
  2.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (52 bytes) 
  2.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (44 bytes) 
  2.04%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 570 (23 bytes) 
  1.99%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 579 (27 bytes) 
  1.88%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 574 (25 bytes) 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 558 (17 bytes) 
  0.94%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (64 bytes) 
  0.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 (9 bytes) 
  0.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (33 bytes) 
  0.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (51 bytes) 
  9.72%  <...other 134 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 
  8.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 
  7.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 570 
  7.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 575 
  6.85%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 568 
  4.13%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  1.99%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 579 
  1.88%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 574 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 558 
  0.94%   [kernel.kallsyms]  native_write_msr 
  0.52%        libc-2.31.so  _int_malloc 
  0.37%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 608 
  0.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 581 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 578 
  0.21%           libjvm.so  fileStream::write 
  0.16%        libc-2.31.so  malloc 
  0.16%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.16%        libc-2.31.so  unlink_chunk.isra.0 
  0.16%   [kernel.kallsyms]  release_pages 
  5.80%  <...other 93 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 91.53%         c2, level 4
  3.66%   [kernel.kallsyms]
  2.35%           libjvm.so
  1.62%        libc-2.31.so
  0.58%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.05%                    
  0.05%              kvm.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       617.388          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
