# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1035.135 ns/op
# Warmup Iteration   2: 649.077 ns/op
# Warmup Iteration   3: 624.308 ns/op
# Warmup Iteration   4: 628.127 ns/op
# Warmup Iteration   5: 625.835 ns/op
Iteration   1: 634.827 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  634.827 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115126 total address lines.
Perf output processed (skipped 11.120 seconds):
 Column 1: cycles (2008 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (231 bytes) 

  0.05%     0x00007fbbf036ac42: add     %r12,%r8
            0x00007fbbf036ac45: xor     %r12,%r12
         ╭  0x00007fbbf036ac48: jmp     0x7fbbf036ac99
         │  0x00007fbbf036ac4a: mov     %r15,%rsi
         │  0x00007fbbf036ac4d: movabs  $0x7fbc07bae290,%r10
         │  0x00007fbbf036ac57: callq   %r10
         │  0x00007fbbf036ac5a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fbbf036ac60: mov     0x108(%r15),%r10
  0.40%  │  0x00007fbbf036ac67: mov     (%rsp),%r11
         │  0x00007fbbf036ac6b: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007fbbf036ac6f: mov     0x10(%rsp),%r9d
         │  0x00007fbbf036ac74: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.55%  │  0x00007fbbf036ac77: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fbbf036ac7c: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
  0.05%  │  0x00007fbbf036ac7f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fbbf036b238
         │  0x00007fbbf036ac83: cmp     %r8d,%r9d
         │  0x00007fbbf036ac86: jnl     0x7fbbf036af2d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.85%  │  0x00007fbbf036ac8c: mov     0x8(%rsp),%ebp
         │  0x00007fbbf036ac90: mov     0x14(%rsp),%ecx
         │  0x00007fbbf036ac94: mov     0x18(%rsp),%r8
         ↘  0x00007fbbf036ac99: mov     0x118(%r15),%rax
  0.85%     0x00007fbbf036aca0: mov     %rax,%r10
            0x00007fbbf036aca3: add     $0x28,%r10
  0.05%     0x00007fbbf036aca7: cmp     0x128(%r15),%r10
            0x00007fbbf036acae: jnb     0x7fbbf036afd8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fbbf036acb4: mov     %r10,0x118(%r15)
  0.50%     0x00007fbbf036acbb: prefetchnta 0x100(%r10)
            0x00007fbbf036acc3: mov     0xb8(%r8),%r10
  0.05%     0x00007fbbf036acca: mov     %r10,(%rax)
            0x00007fbbf036accd: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.60%     0x00007fbbf036acd4: movl    $0x0,0xc(%rax)
            0x00007fbbf036acdb: movq    $0x0,0x10(%rax)
            0x00007fbbf036ace3: movq    $0x0,0x18(%rax)
            0x00007fbbf036aceb: movl    $0x0,0x20(%rax)
  0.55%     0x00007fbbf036acf2: mov     %ebp,0x8(%rsp)
  0.05%     0x00007fbbf036acf6: mov     %r11d,0xc(%rsp)
            0x00007fbbf036acfb: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fbbf036ad00: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.75%     0x00007fbbf036ad03: mov     %ecx,0x14(%rsp)
            0x00007fbbf036ad07: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fbbf036ad0a: mov     %rbp,%rsi
            0x00007fbbf036ad0d: nop
  0.50%     0x00007fbbf036ad0f: callq   0x7fbbf036a370    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007fbbf036ad14: movl    $0x0,0x14(%rbp)
            0x00007fbbf036ad1b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.77%     0x00007fbbf036ad21: mov     (%rsp),%rsi
            0x00007fbbf036ad25: nop
            0x00007fbbf036ad27: callq   0x7fbbf036b29e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fbbf036ad2c: mov     %rax,%rbx
  0.60%     0x00007fbbf036ad2f: cmpb    $0x0,0x30(%r15)
            0x00007fbbf036ad34: jne     0x7fbbf036af3d
            0x00007fbbf036ad3a: mov     %rbx,%r10
            0x00007fbbf036ad3d: mov     %r10d,0x1c(%rbp)
  0.55%     0x00007fbbf036ad41: mov     %rbp,%r10
  0.05%     0x00007fbbf036ad44: mov     %rbx,%r11
  0.05%     0x00007fbbf036ad47: xor     %r10,%r11
            0x00007fbbf036ad4a: shr     $0x14,%r11
  0.60%     0x00007fbbf036ad4e: test    %r11,%r11
            0x00007fbbf036ad51: je      0x7fbbf036adab
            0x00007fbbf036ad53: test    %rbx,%rbx
            0x00007fbbf036ad56: je      0x7fbbf036adab
            0x00007fbbf036ad58: shr     $0x9,%r10
            0x00007fbbf036ad5c: movabs  $0x7fbc05a17000,%rdi
            0x00007fbbf036ad66: add     %r10,%rdi
            0x00007fbbf036ad69: cmpb    $0x20,(%rdi)
            0x00007fbbf036ad6c: je      0x7fbbf036adab
            0x00007fbbf036ad6e: mov     0x80(%r15),%r10
            0x00007fbbf036ad75: mov     0x70(%r15),%r11
....................................................................................................
 26.44%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbf036ae50: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fbbf036ae54: mov     %r8,0x70(%r15)
            0x00007fbbf036ae58: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.75%     0x00007fbbf036ae5e: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007fbbf036ae62: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fbbf036b21c
            0x00007fbbf036ae66: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.80%     0x00007fbbf036ae6b: mov     (%rsp),%r11
            0x00007fbbf036ae6f: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007fbbf036ae75: vcvttss2si %xmm1,%r11d
  0.70%     0x00007fbbf036ae79: cmp     $0x80000000,%r11d
         ╭  0x00007fbbf036ae80: jne     0x7fbbf036ae92
         │  0x00007fbbf036ae82: sub     $0x8,%rsp
         │  0x00007fbbf036ae86: vmovss  %xmm1,(%rsp)
         │  0x00007fbbf036ae8b: callq   0x7fbbe88b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fbbf036ae90: pop     %r11
         ↘  0x00007fbbf036ae92: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.55%     0x00007fbbf036ae96: mov     0xc(%rsp),%ebx
            0x00007fbbf036ae9a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007fbbf036b228
            0x00007fbbf036ae9e: mov     0x10(%rsp),%r9d
            0x00007fbbf036aea3: cmp     %r11d,%r9d
            0x00007fbbf036aea6: jnb     0x7fbbf036b090
  0.55%     0x00007fbbf036aeac: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007fbbf036aeaf: lea     0x10(%rbx,%r9,4),%r14
            0x00007fbbf036aeb4: cmpb    $0x0,0x30(%r15)
            0x00007fbbf036aeb9: jne     0x7fbbf036afa6
  0.45%     0x00007fbbf036aebf: mov     %r10,%r11
            0x00007fbbf036aec2: mov     %r10,%r8
            0x00007fbbf036aec5: mov     %r8d,(%r14)
            0x00007fbbf036aec8: mov     %r14,%r10
  0.75%     0x00007fbbf036aecb: xor     %r10,%r11
            0x00007fbbf036aece: shr     $0x14,%r11
            0x00007fbbf036aed2: test    %r11,%r11
            0x00007fbbf036aed5: je      0x7fbbf036ac60
            0x00007fbbf036aedb: shr     $0x9,%r10
            0x00007fbbf036aedf: movabs  $0x7fbc05a17000,%rdi
            0x00007fbbf036aee9: add     %r10,%rdi
            0x00007fbbf036aeec: cmpb    $0x20,(%rdi)
            0x00007fbbf036aeef: je      0x7fbbf036ac60
            0x00007fbbf036aef5: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 15.69%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (231 bytes) 
 15.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (109 bytes) 
  5.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 547 (191 bytes) 
  5.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (146 bytes) 
  4.88%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 538 (167 bytes) 
  4.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (104 bytes) 
  3.93%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 529 (141 bytes) 
  3.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (58 bytes) 
  2.89%         c2, level 4  java.lang.Object::&lt;init&gt;, version 26 (27 bytes) 
  2.34%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 529 (20 bytes) 
  2.34%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 549 (32 bytes) 
  2.09%           libjvm.so  SpinPause (9 bytes) 
  1.84%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 548 (27 bytes) 
  1.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (76 bytes) 
  1.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 528 (24 bytes) 
  1.29%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.95%           libjvm.so  ParallelTaskTerminator::offer_termination (5 bytes) 
  0.65%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 (131 bytes) 
  0.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (0 bytes) 
  0.40%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
 11.50%  <...other 170 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 
  9.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 
  6.27%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 529 
  5.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 547 
  5.13%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 538 
  2.89%         c2, level 4  java.lang.Object::&lt;init&gt;, version 26 
  2.34%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 549 
  2.09%           libjvm.so  SpinPause 
  1.84%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 548 
  1.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 528 
  1.29%   [kernel.kallsyms]  native_write_msr 
  0.95%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.65%        libc-2.31.so  malloc 
  0.65%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 
  0.45%        libc-2.31.so  _int_free 
  0.40%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.30%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 545 
  0.30%        libc-2.31.so  malloc_consolidate 
  0.20%        libc-2.31.so  _int_malloc 
  7.97%  <...other 134 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 85.56%         c2, level 4
  5.48%           libjvm.so
  5.28%   [kernel.kallsyms]
  2.29%        libc-2.31.so
  0.85%    libfcml.so.0.0.0
  0.25%         interpreter
  0.10%              [vdso]
  0.10%           nvidia.ko
  0.05%   libhsdis.so.0.0.0
  0.05%  libpthread-2.31.so
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       634.827          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
