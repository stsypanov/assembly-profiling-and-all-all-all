# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1076.959 ns/op
# Warmup Iteration   2: 679.404 ns/op
# Warmup Iteration   3: 615.812 ns/op
# Warmup Iteration   4: 615.366 ns/op
# Warmup Iteration   5: 614.671 ns/op
Iteration   1: 614.067 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  614.067 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 114226 total address lines.
Perf output processed (skipped 11.122 seconds):
 Column 1: cycles (1930 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (218 bytes) 

           0x00007fbe8836b5c7: mov     %r15,%rsi
           0x00007fbe8836b5ca: movabs  $0x7fbe9dc5b290,%r10
           0x00007fbe8836b5d4: callq   %r10
           0x00007fbe8836b5d7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fbe8836b5e0: mov     0x108(%r15),%r10
           0x00007fbe8836b5e7: mov     0x10(%rsp),%r11
           0x00007fbe8836b5ec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.52%    0x00007fbe8836b5f0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fbe8836b5f2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007fbe8836b5f5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fbe8836bba8
           0x00007fbe8836b5f9: cmp     %r10d,%ebp
           0x00007fbe8836b5fc: jnl     0x7fbe8836b8a7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.67%    0x00007fbe8836b602: mov     0xc(%rsp),%r10d
           0x00007fbe8836b607: mov     0x18(%rsp),%r8
           0x00007fbe8836b60c: mov     0x8(%rsp),%r13d
  0.16%    0x00007fbe8836b611: mov     0x118(%r15),%rax
  0.78%    0x00007fbe8836b618: mov     %rax,%r11
           0x00007fbe8836b61b: add     $0x28,%r11
           0x00007fbe8836b61f: cmp     0x128(%r15),%r11
           0x00007fbe8836b626: jnb     0x7fbe8836b953    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.10%    0x00007fbe8836b62c: mov     %r11,0x118(%r15)
  0.41%    0x00007fbe8836b633: prefetchnta 0x100(%r11)
           0x00007fbe8836b63b: mov     0xb8(%r8),%r11
           0x00007fbe8836b642: mov     %r11,(%rax)
  0.21%    0x00007fbe8836b645: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.73%    0x00007fbe8836b64c: movl    $0x0,0xc(%rax)
           0x00007fbe8836b653: movq    $0x0,0x10(%rax)
           0x00007fbe8836b65b: movq    $0x0,0x18(%rax)
  0.10%    0x00007fbe8836b663: movl    $0x0,0x20(%rax)
  0.78%    0x00007fbe8836b66a: mov     %ebp,(%rsp)
           0x00007fbe8836b66d: mov     %r13d,0x8(%rsp)
           0x00007fbe8836b672: mov     %ecx,0x4(%rsp)
           0x00007fbe8836b676: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.73%    0x00007fbe8836b67b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fbe8836b67f: mov     %r10d,0xc(%rsp)
  0.05%    0x00007fbe8836b684: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fbe8836b687: mov     %rbp,%rsi
  0.67%    0x00007fbe8836b68a: nop
           0x00007fbe8836b68b: callq   0x7fbe88369ff0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fbe8836b690: movl    $0x0,0x14(%rbp)
  0.47%    0x00007fbe8836b697: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 21.09%    0x00007fbe8836b69d: mov     0x10(%rsp),%rsi
           0x00007fbe8836b6a2: nop
           0x00007fbe8836b6a3: callq   0x7fbe8836ab90    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fbe8836b6a8: mov     %rax,%rbx
  0.67%    0x00007fbe8836b6ab: cmpb    $0x0,0x30(%r15)
           0x00007fbe8836b6b0: jne     0x7fbe8836b8b7
           0x00007fbe8836b6b6: mov     %rbx,%r11
           0x00007fbe8836b6b9: mov     %r11d,0x1c(%rbp)
  0.26%    0x00007fbe8836b6bd: mov     %rbp,%r10
           0x00007fbe8836b6c0: mov     %rbx,%r11
           0x00007fbe8836b6c3: xor     %r10,%r11
           0x00007fbe8836b6c6: shr     $0x14,%r11
  0.36%    0x00007fbe8836b6ca: test    %r11,%r11
           0x00007fbe8836b6cd: je      0x7fbe8836b727
           0x00007fbe8836b6cf: test    %rbx,%rbx
           0x00007fbe8836b6d2: je      0x7fbe8836b727
           0x00007fbe8836b6d4: shr     $0x9,%r10
           0x00007fbe8836b6d8: movabs  $0x7fbe80078000,%rdi
           0x00007fbe8836b6e2: add     %r10,%rdi
           0x00007fbe8836b6e5: cmpb    $0x20,(%rdi)
           0x00007fbe8836b6e8: je      0x7fbe8836b727
           0x00007fbe8836b6ea: mov     0x80(%r15),%r10
           0x00007fbe8836b6f1: mov     0x70(%r15),%r11
....................................................................................................
 28.76%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbe8836b7cc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fbe8836b7d0: mov     %r8,0x70(%r15)
            0x00007fbe8836b7d4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.35%     0x00007fbe8836b7da: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fbe8836b7de: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fbe8836bb88
            0x00007fbe8836b7e2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.52%     0x00007fbe8836b7e7: mov     0x10(%rsp),%r11
            0x00007fbe8836b7ec: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007fbe8836b7f2: vcvttss2si %xmm0,%r8d
  0.67%     0x00007fbe8836b7f6: cmp     $0x80000000,%r8d
         â­  0x00007fbe8836b7fd: jne     0x7fbe8836b80f
         â  0x00007fbe8836b7ff: sub     $0x8,%rsp
         â  0x00007fbe8836b803: vmovss  %xmm0,(%rsp)
         â  0x00007fbe8836b808: callq   0x7fbe808b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fbe8836b80d: pop     %r8
         â  0x00007fbe8836b80f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fbe8836b813: mov     0x4(%rsp),%r9d
  0.83%     0x00007fbe8836b818: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fbe8836bb94
            0x00007fbe8836b81c: mov     (%rsp),%ebp
....................................................................................................
 12.59%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (218 bytes) 
 12.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (28 bytes) 
  7.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 563 (191 bytes) 
  5.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 (146 bytes) 
  4.97%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 (141 bytes) 
  4.77%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 552 (99 bytes) 
  4.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 (104 bytes) 
  3.94%         c2, level 4  java.lang.Object::&lt;init&gt;, version 20 (27 bytes) 
  3.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (67 bytes) 
  2.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (52 bytes) 
  2.18%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.07%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 (23 bytes) 
  1.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 547 (17 bytes) 
  1.97%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 555 (32 bytes) 
  1.61%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 (27 bytes) 
  1.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (126 bytes) 
  1.40%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 552 (23 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 (10 bytes) 
  0.52%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 552 (5 bytes) 
  0.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 (48 bytes) 
  7.98%  <...other 96 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 
  9.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 
  7.05%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 
  7.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 563 
  6.68%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 552 
  3.94%         c2, level 4  java.lang.Object::&lt;init&gt;, version 20 
  2.18%   [kernel.kallsyms]  native_write_msr 
  1.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 547 
  1.97%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 555 
  1.61%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 
  0.52%        libc-2.31.so  malloc 
  0.36%           libjvm.so  SpinPause 
  0.31%        libc-2.31.so  _int_malloc 
  0.31%        libc-2.31.so  _int_free 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 566 
  0.26%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.26%           libjvm.so  OtherRegionsTable::occupied 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 568 
  4.15%  <...other 64 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 91.30%         c2, level 4
  4.56%   [kernel.kallsyms]
  1.92%        libc-2.31.so
  1.87%           libjvm.so
  0.31%    libfcml.so.0.0.0
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       614.067          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
