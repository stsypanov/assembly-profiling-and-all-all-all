# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1105.912 ns/op
# Warmup Iteration   2: 659.694 ns/op
# Warmup Iteration   3: 616.369 ns/op
# Warmup Iteration   4: 615.353 ns/op
# Warmup Iteration   5: 617.892 ns/op
Iteration   1: 613.274 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.274 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114179 total address lines.
Perf output processed (skipped 11.106 seconds):
 Column 1: cycles (1922 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (235 bytes) 

            0x00007fc53836b33c: lea     (%r8,%r11,8),%r8
         ╭  0x00007fc53836b340: jmp     0x7fc53836b39a
         │  0x00007fc53836b342: mov     %r15,%rsi
         │  0x00007fc53836b345: movabs  $0x7fc54e3ba290,%r10
         │  0x00007fc53836b34f: callq   %r10
         │  0x00007fc53836b352: nopw    0x0(%rax,%rax)
         │  0x00007fc53836b35c: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fc53836b360: mov     0x108(%r15),%r11
  0.05%  │  0x00007fc53836b367: mov     (%rsp),%r10
         │  0x00007fc53836b36b: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  1.04%  │  0x00007fc53836b36f: mov     0x10(%rsp),%r9d
  0.05%  │  0x00007fc53836b374: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
         │  0x00007fc53836b377: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fc53836b37c: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
  0.57%  │  0x00007fc53836b37f: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007fc53836b944
         │  0x00007fc53836b383: cmp     %r11d,%r9d
         │  0x00007fc53836b386: jnl     0x7fc53836b62e    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007fc53836b38c: mov     0x8(%rsp),%ebp
         │  0x00007fc53836b390: mov     0x14(%rsp),%r9d
  0.73%  │  0x00007fc53836b395: mov     0x18(%rsp),%r8
         ↘  0x00007fc53836b39a: mov     0x118(%r15),%rax
  0.05%     0x00007fc53836b3a1: mov     %rax,%r11
            0x00007fc53836b3a4: add     $0x28,%r11
  0.26%     0x00007fc53836b3a8: cmp     0x128(%r15),%r11
            0x00007fc53836b3af: jnb     0x7fc53836b6d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fc53836b3b5: mov     %r11,0x118(%r15)
  0.05%     0x00007fc53836b3bc: prefetchnta 0x100(%r11)
            0x00007fc53836b3c4: mov     0xb8(%r8),%r11
  0.52%     0x00007fc53836b3cb: mov     %r11,(%rax)
            0x00007fc53836b3ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%     0x00007fc53836b3d5: movl    $0x0,0xc(%rax)
            0x00007fc53836b3dc: movq    $0x0,0x10(%rax)
  0.52%     0x00007fc53836b3e4: movq    $0x0,0x18(%rax)
            0x00007fc53836b3ec: movl    $0x0,0x20(%rax)
  0.05%     0x00007fc53836b3f3: mov     %ebp,0x8(%rsp)
            0x00007fc53836b3f7: mov     %r10d,0xc(%rsp)
  0.78%     0x00007fc53836b3fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fc53836b401: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc53836b405: mov     %r9d,0x14(%rsp)
            0x00007fc53836b40a: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.62%     0x00007fc53836b40d: mov     %rbp,%rsi
            0x00007fc53836b410: nop
            0x00007fc53836b413: callq   0x7fc530ea5b00    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.99%     0x00007fc53836b418: movl    $0x0,0x14(%rbp)
            0x00007fc53836b41f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.78%     0x00007fc53836b425: mov     (%rsp),%rsi
  0.10%     0x00007fc53836b429: nop
            0x00007fc53836b42b: callq   0x7fc53836b99e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fc53836b430: mov     %rax,%rbx
  0.36%     0x00007fc53836b433: cmpb    $0x0,0x30(%r15)
            0x00007fc53836b438: jne     0x7fc53836b63e
            0x00007fc53836b43e: mov     %rbx,%r11
            0x00007fc53836b441: mov     %r11d,0x1c(%rbp)
  1.04%     0x00007fc53836b445: mov     %rbp,%r10
            0x00007fc53836b448: mov     %rbx,%r11
            0x00007fc53836b44b: xor     %r10,%r11
            0x00007fc53836b44e: shr     $0x14,%r11
  0.42%     0x00007fc53836b452: test    %r11,%r11
            0x00007fc53836b455: je      0x7fc53836b4af
            0x00007fc53836b457: test    %rbx,%rbx
            0x00007fc53836b45a: je      0x7fc53836b4af
            0x00007fc53836b45c: shr     $0x9,%r10
            0x00007fc53836b460: movabs  $0x7fc54c223000,%rdi
            0x00007fc53836b46a: add     %r10,%rdi
            0x00007fc53836b46d: cmpb    $0x20,(%rdi)
            0x00007fc53836b470: je      0x7fc53836b4af
            0x00007fc53836b472: mov     0x80(%r15),%r10
            0x00007fc53836b479: mov     0x70(%r15),%r11
....................................................................................................
 27.06%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc53836b554: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fc53836b558: mov     %r8,0x70(%r15)
            0x00007fc53836b55c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.16%     0x00007fc53836b562: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc53836b566: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fc53836b928
            0x00007fc53836b56a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.42%     0x00007fc53836b56f: mov     (%rsp),%r10
            0x00007fc53836b573: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fc53836b579: vcvttss2si %xmm0,%r8d
  0.62%     0x00007fc53836b57d: cmp     $0x80000000,%r8d
         ╭  0x00007fc53836b584: jne     0x7fc53836b596
         │  0x00007fc53836b586: sub     $0x8,%rsp
         │  0x00007fc53836b58a: vmovss  %xmm0,(%rsp)
         │  0x00007fc53836b58f: callq   0x7fc5308b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fc53836b594: pop     %r8
         ↘  0x00007fc53836b596: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fc53836b59a: mov     0xc(%rsp),%ebx
  0.68%     0x00007fc53836b59e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007fc53836b934
            0x00007fc53836b5a2: mov     0x10(%rsp),%r9d
....................................................................................................
 14.20%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (235 bytes) 
 14.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (27 bytes) 
  6.61%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (160 bytes) 
  5.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 559 (191 bytes) 
  5.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 (146 bytes) 
  5.10%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 544 (141 bytes) 
  4.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (58 bytes) 
  3.69%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 (27 bytes) 
  3.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 (104 bytes) 
  2.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (53 bytes) 
  2.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 543 (17 bytes) 
  2.13%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 (32 bytes) 
  1.51%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 544 (20 bytes) 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (26 bytes) 
  1.20%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 561 (27 bytes) 
  1.04%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 (0 bytes) 
  0.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (107 bytes) 
  0.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (74 bytes) 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 594 (60 bytes) 
  9.31%  <...other 123 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 
  9.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 
  6.92%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 
  6.61%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 544 
  5.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 559 
  3.69%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 
  2.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 543 
  2.13%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 
  1.20%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 561 
  1.04%   [kernel.kallsyms]  native_write_msr 
  0.73%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 594 
  0.52%        libc-2.31.so  malloc 
  0.42%        libc-2.31.so  malloc_consolidate 
  0.31%        libc-2.31.so  _int_free 
  0.26%        libc-2.31.so  _int_malloc 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 
  0.16%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.16%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  5.67%  <...other 89 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 91.10%         c2, level 4
  4.01%   [kernel.kallsyms]
  1.98%        libc-2.31.so
  1.93%           libjvm.so
  0.68%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%         c1, level 3
  0.05%  libpthread-2.31.so
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.274          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
