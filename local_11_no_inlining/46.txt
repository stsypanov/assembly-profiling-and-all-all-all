# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1231.159 ns/op
# Warmup Iteration   2: 629.147 ns/op
# Warmup Iteration   3: 619.796 ns/op
# Warmup Iteration   4: 617.082 ns/op
# Warmup Iteration   5: 620.138 ns/op
Iteration   1: 617.179 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  617.179 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 116208 total address lines.
Perf output processed (skipped 11.236 seconds):
 Column 1: cycles (1952 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (262 bytes) 

            0x00007fa87036bf9e: jbe     0x7fa87036c2ad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fa87036bfa4: mov     %rbx,%r11
            0x00007fa87036bfa7: mov     (%rsp),%r10
            0x00007fa87036bfab: mov     %r10,%rcx
            0x00007fa87036bfae: mov     $0x8012575,%r8d   ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fa87036bfb4: shl     $0x3,%r8
            0x00007fa87036bfb8: movabs  $0x800000000,%r12
            0x00007fa87036bfc2: add     %r12,%r8
            0x00007fa87036bfc5: xor     %r12,%r12
  0.15%  ╭  0x00007fa87036bfc8: jmp     0x7fa87036c019
         │  0x00007fa87036bfca: mov     %r15,%rsi
         │  0x00007fa87036bfcd: movabs  $0x7fa8867a1290,%r10
         │  0x00007fa87036bfd7: callq   %r10
         │  0x00007fa87036bfda: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fa87036bfe0: mov     0x108(%r15),%r10
  0.46%  │  0x00007fa87036bfe7: mov     (%rsp),%r11
         │  0x00007fa87036bfeb: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007fa87036bfef: mov     0x10(%rsp),%r9d
         │  0x00007fa87036bff4: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.67%  │  0x00007fa87036bff7: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fa87036bffc: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007fa87036bfff: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fa87036c5b8
  0.05%  │  0x00007fa87036c003: cmp     %r8d,%r9d
         │  0x00007fa87036c006: jnl     0x7fa87036c2ad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  1.02%  │  0x00007fa87036c00c: mov     0x8(%rsp),%ebp
         │  0x00007fa87036c010: mov     0x14(%rsp),%ecx
         │  0x00007fa87036c014: mov     0x18(%rsp),%r8
         ↘  0x00007fa87036c019: mov     0x118(%r15),%rax
  0.46%     0x00007fa87036c020: mov     %rax,%r10
            0x00007fa87036c023: add     $0x28,%r10
  0.05%     0x00007fa87036c027: cmp     0x128(%r15),%r10
            0x00007fa87036c02e: jnb     0x7fa87036c358    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa87036c034: mov     %r10,0x118(%r15)
  0.61%     0x00007fa87036c03b: prefetchnta 0x100(%r10)
            0x00007fa87036c043: mov     0xb8(%r8),%r10
            0x00007fa87036c04a: mov     %r10,(%rax)
            0x00007fa87036c04d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.41%     0x00007fa87036c054: movl    $0x0,0xc(%rax)
  0.05%     0x00007fa87036c05b: movq    $0x0,0x10(%rax)
  0.05%     0x00007fa87036c063: movq    $0x0,0x18(%rax)
            0x00007fa87036c06b: movl    $0x0,0x20(%rax)
  0.46%     0x00007fa87036c072: mov     %ebp,0x8(%rsp)
            0x00007fa87036c076: mov     %r11d,0xc(%rsp)
  0.05%     0x00007fa87036c07b: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fa87036c080: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.56%     0x00007fa87036c083: mov     %ecx,0x14(%rsp)
            0x00007fa87036c087: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fa87036c08a: mov     %rbp,%rsi
            0x00007fa87036c08d: nop
  0.61%     0x00007fa87036c08f: callq   0x7fa87036a170    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.10%     0x00007fa87036c094: movl    $0x0,0x14(%rbp)
  0.05%     0x00007fa87036c09b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.85%     0x00007fa87036c0a1: mov     (%rsp),%rsi
  0.10%     0x00007fa87036c0a5: nop
            0x00007fa87036c0a7: callq   0x7fa87036c61e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fa87036c0ac: mov     %rax,%rbx
  0.97%     0x00007fa87036c0af: cmpb    $0x0,0x30(%r15)
            0x00007fa87036c0b4: jne     0x7fa87036c2bd
            0x00007fa87036c0ba: mov     %rbx,%r10
            0x00007fa87036c0bd: mov     %r10d,0x1c(%rbp)
  0.87%     0x00007fa87036c0c1: mov     %rbp,%r10
            0x00007fa87036c0c4: mov     %rbx,%r11
            0x00007fa87036c0c7: xor     %r10,%r11
            0x00007fa87036c0ca: shr     $0x14,%r11
  0.56%     0x00007fa87036c0ce: test    %r11,%r11
            0x00007fa87036c0d1: je      0x7fa87036c12b
            0x00007fa87036c0d3: test    %rbx,%rbx
            0x00007fa87036c0d6: je      0x7fa87036c12b
            0x00007fa87036c0d8: shr     $0x9,%r10
            0x00007fa87036c0dc: movabs  $0x7fa88460a000,%rdi
            0x00007fa87036c0e6: add     %r10,%rdi
            0x00007fa87036c0e9: cmpb    $0x20,(%rdi)
            0x00007fa87036c0ec: je      0x7fa87036c12b
            0x00007fa87036c0ee: mov     0x80(%r15),%r10
            0x00007fa87036c0f5: mov     0x70(%r15),%r11
....................................................................................................
 27.25%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa87036c1d0: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa87036c1d4: mov     %r8,0x70(%r15)
            0x00007fa87036c1d8: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.14%     0x00007fa87036c1de: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa87036c1e2: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa87036c59c
            0x00007fa87036c1e6: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.72%     0x00007fa87036c1eb: mov     (%rsp),%r11
            0x00007fa87036c1ef: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007fa87036c1f5: vcvttss2si %xmm1,%r11d
  0.61%     0x00007fa87036c1f9: cmp     $0x80000000,%r11d
         ╭  0x00007fa87036c200: jne     0x7fa87036c212
         │  0x00007fa87036c202: sub     $0x8,%rsp
         │  0x00007fa87036c206: vmovss  %xmm1,(%rsp)
         │  0x00007fa87036c20b: callq   0x7fa8688b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fa87036c210: pop     %r11
         ↘  0x00007fa87036c212: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.51%     0x00007fa87036c216: mov     0xc(%rsp),%ebx
            0x00007fa87036c21a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007fa87036c5a8
            0x00007fa87036c21e: mov     0x10(%rsp),%r9d
            0x00007fa87036c223: cmp     %r11d,%r9d
            0x00007fa87036c226: jnb     0x7fa87036c410
  0.61%     0x00007fa87036c22c: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007fa87036c22f: lea     0x10(%rbx,%r9,4),%r14
            0x00007fa87036c234: cmpb    $0x0,0x30(%r15)
            0x00007fa87036c239: jne     0x7fa87036c326
  0.41%     0x00007fa87036c23f: mov     %r10,%r11
            0x00007fa87036c242: mov     %r10,%r8
            0x00007fa87036c245: mov     %r8d,(%r14)
            0x00007fa87036c248: mov     %r14,%r10
  0.61%     0x00007fa87036c24b: xor     %r10,%r11
            0x00007fa87036c24e: shr     $0x14,%r11
            0x00007fa87036c252: test    %r11,%r11
            0x00007fa87036c255: je      0x7fa87036bfe0
            0x00007fa87036c25b: shr     $0x9,%r10
            0x00007fa87036c25f: movabs  $0x7fa88460a000,%rdi
            0x00007fa87036c269: add     %r10,%rdi
            0x00007fa87036c26c: cmpb    $0x20,(%rdi)
            0x00007fa87036c26f: je      0x7fa87036bfe0
            0x00007fa87036c275: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 15.63%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (262 bytes) 
 15.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (109 bytes) 
  5.58%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (167 bytes) 
  5.28%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 (144 bytes) 
  5.23%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 563 (191 bytes) 
  5.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 (146 bytes) 
  4.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (70 bytes) 
  4.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 (104 bytes) 
  3.53%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  2.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 547 (24 bytes) 
  2.36%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 567 (35 bytes) 
  2.25%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (0 bytes) 
  1.49%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 566 (24 bytes) 
  1.43%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 (20 bytes) 
  0.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (68 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 (89 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 (0 bytes) 
  0.46%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 568 (16 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 570 (63 bytes) 
  9.17%  <...other 116 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 
  9.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 
  6.71%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 548 
  5.79%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 
  5.23%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 563 
  3.53%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  2.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 547 
  2.36%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 567 
  2.25%   [kernel.kallsyms]  native_write_msr 
  1.49%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 566 
  0.56%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 568 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 570 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 595 
  0.41%        libc-2.31.so  malloc 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%        libc-2.31.so  _int_malloc 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%   [kernel.kallsyms]  zap_pte_range.isra.0 
  5.53%  <...other 81 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.06%         c2, level 4
  4.97%   [kernel.kallsyms]
  2.25%           libjvm.so
  1.74%        libc-2.31.so
  0.77%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.05%      perf-55724.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       617.179          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
