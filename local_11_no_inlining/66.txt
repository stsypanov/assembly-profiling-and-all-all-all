# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1172.762 ns/op
# Warmup Iteration   2: 652.068 ns/op
# Warmup Iteration   3: 620.750 ns/op
# Warmup Iteration   4: 622.367 ns/op
# Warmup Iteration   5: 621.368 ns/op
Iteration   1: 618.746 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  618.746 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115541 total address lines.
Perf output processed (skipped 11.082 seconds):
 Column 1: cycles (1944 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (223 bytes) 

            0x00007f44b036bb34: lea     (%r9,%r10,8),%r9
         ╭  0x00007f44b036bb38: jmp     0x7f44b036bb80
         │  0x00007f44b036bb3a: mov     %r15,%rsi
         │  0x00007f44b036bb3d: movabs  $0x7f44c594b290,%r10
         │  0x00007f44b036bb47: callq   %r10
         │  0x00007f44b036bb4a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f44b036bb50: mov     0x108(%r15),%r10
         │  0x00007f44b036bb57: mov     (%rsp),%r11
  0.41%  │  0x00007f44b036bb5b: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f44b036bb5f: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f44b036bb61: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f44b036bb64: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f44b036c128
  0.57%  │  0x00007f44b036bb68: cmp     %r11d,%ebp
         │  0x00007f44b036bb6b: jnl     0x7f44b036be19    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007f44b036bb71: mov     0x14(%rsp),%r11d
  0.05%  │  0x00007f44b036bb76: mov     0x18(%rsp),%r9
         │  0x00007f44b036bb7b: mov     0xc(%rsp),%r13d
  0.51%  ↘  0x00007f44b036bb80: mov     0x118(%r15),%rax
            0x00007f44b036bb87: mov     %rax,%r10
            0x00007f44b036bb8a: add     $0x28,%r10
            0x00007f44b036bb8e: cmp     0x128(%r15),%r10
            0x00007f44b036bb95: jnb     0x7f44b036bec4    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.62%     0x00007f44b036bb9b: mov     %r10,0x118(%r15)
  0.05%     0x00007f44b036bba2: prefetchnta 0x100(%r10)
            0x00007f44b036bbaa: mov     0xb8(%r9),%r10
            0x00007f44b036bbb1: mov     %r10,(%rax)
  0.51%     0x00007f44b036bbb4: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f44b036bbbb: movl    $0x0,0xc(%rax)
  0.05%     0x00007f44b036bbc2: movq    $0x0,0x10(%rax)
            0x00007f44b036bbca: movq    $0x0,0x18(%rax)
  0.41%     0x00007f44b036bbd2: movl    $0x0,0x20(%rax)
  0.10%     0x00007f44b036bbd9: mov     %ebp,0x8(%rsp)
  0.05%     0x00007f44b036bbdd: mov     %r13d,0xc(%rsp)
            0x00007f44b036bbe2: mov     %r8d,0x10(%rsp)
  0.67%     0x00007f44b036bbe7: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.10%     0x00007f44b036bbec: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f44b036bbf0: mov     %r11d,0x14(%rsp)
            0x00007f44b036bbf5: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.67%     0x00007f44b036bbf8: mov     %rbp,%rsi
            0x00007f44b036bbfb: callq   0x7f44b036aff0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f44b036bc00: movl    $0x0,0x14(%rbp)
  0.36%     0x00007f44b036bc07: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.57%     0x00007f44b036bc0d: mov     (%rsp),%rsi
  0.21%     0x00007f44b036bc11: nop
            0x00007f44b036bc13: callq   0x7f44a8ea8d20    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f44b036bc18: mov     %rax,%rbx
  0.62%     0x00007f44b036bc1b: cmpb    $0x0,0x30(%r15)
            0x00007f44b036bc20: jne     0x7f44b036be29
            0x00007f44b036bc26: mov     %rbx,%r10
            0x00007f44b036bc29: mov     %r10d,0x1c(%rbp)
  0.62%     0x00007f44b036bc2d: mov     %rbp,%r10
            0x00007f44b036bc30: mov     %rbx,%r11
            0x00007f44b036bc33: xor     %r10,%r11
            0x00007f44b036bc36: shr     $0x14,%r11
  0.57%     0x00007f44b036bc3a: test    %r11,%r11
            0x00007f44b036bc3d: je      0x7f44b036bc97
            0x00007f44b036bc3f: test    %rbx,%rbx
            0x00007f44b036bc42: je      0x7f44b036bc97
            0x00007f44b036bc44: shr     $0x9,%r10
            0x00007f44b036bc48: movabs  $0x7f44a7c9e000,%rdi
            0x00007f44b036bc52: add     %r10,%rdi
            0x00007f44b036bc55: cmpb    $0x20,(%rdi)
            0x00007f44b036bc58: je      0x7f44b036bc97
            0x00007f44b036bc5a: mov     0x80(%r15),%r10
            0x00007f44b036bc61: mov     0x70(%r15),%r11
....................................................................................................
 25.82%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f44b036bd3c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f44b036bd40: mov     %r8,0x70(%r15)
            0x00007f44b036bd44: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.29%     0x00007f44b036bd4a: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f44b036bd4e: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f44b036c10c
            0x00007f44b036bd52: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.87%     0x00007f44b036bd57: mov     (%rsp),%r11
            0x00007f44b036bd5b: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f44b036bd61: vcvttss2si %xmm1,%r11d
  0.57%     0x00007f44b036bd65: cmp     $0x80000000,%r11d
         ╭  0x00007f44b036bd6c: jne     0x7f44b036bd7e
         │  0x00007f44b036bd6e: sub     $0x8,%rsp
         │  0x00007f44b036bd72: vmovss  %xmm1,(%rsp)
         │  0x00007f44b036bd77: callq   0x7f44a88b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f44b036bd7c: pop     %r11
         ↘  0x00007f44b036bd7e: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f44b036bd82: mov     0x10(%rsp),%r8d
  0.46%     0x00007f44b036bd87: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f44b036c118
            0x00007f44b036bd8b: mov     0x8(%rsp),%ebp
....................................................................................................
 13.84%  <total for region 2>

....[Hottest Regions]...............................................................................
 25.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (223 bytes) 
 13.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (27 bytes) 
  6.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 553 (191 bytes) 
  5.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 (146 bytes) 
  5.25%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 543 (141 bytes) 
  4.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (156 bytes) 
  4.68%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  4.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (67 bytes) 
  4.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 (104 bytes) 
  2.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (51 bytes) 
  2.11%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 (25 bytes) 
  1.95%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 543 (20 bytes) 
  1.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (65 bytes) 
  1.85%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 561 (27 bytes) 
  1.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 542 (24 bytes) 
  1.08%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 588 (113 bytes) 
  0.77%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 (16 bytes) 
  0.51%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (1 bytes) 
  0.46%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  9.77%  <...other 125 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 
 10.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 558 
  7.20%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 543 
  6.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 553 
  5.45%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 
  4.68%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  2.11%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 
  1.85%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 561 
  1.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 542 
  1.08%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 588 
  0.77%   [kernel.kallsyms]  native_write_msr 
  0.51%        libc-2.31.so  _int_malloc 
  0.51%        libc-2.31.so  malloc_consolidate 
  0.46%        libc-2.31.so  malloc 
  0.46%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.26%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 563 
  0.26%        libc-2.31.so  _int_free 
  0.21%   [kernel.kallsyms]  finish_task_switch 
  5.45%  <...other 87 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.79%         c2, level 4
  4.12%   [kernel.kallsyms]
  2.26%        libc-2.31.so
  1.90%           libjvm.so
  0.62%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.10%         interpreter
  0.05%      perf-57357.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       618.746          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
