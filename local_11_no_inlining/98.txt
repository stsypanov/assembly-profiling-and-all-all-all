# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1074.564 ns/op
# Warmup Iteration   2: 655.791 ns/op
# Warmup Iteration   3: 627.375 ns/op
# Warmup Iteration   4: 622.881 ns/op
# Warmup Iteration   5: 622.728 ns/op
Iteration   1: 627.622 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  627.622 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 115760 total address lines.
Perf output processed (skipped 11.122 seconds):
 Column 1: cycles (1966 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (218 bytes) 

           0x00007fa45436a8c7: mov     %r15,%rsi
           0x00007fa45436a8ca: movabs  $0x7fa469857290,%r10
           0x00007fa45436a8d4: callq   %r10
           0x00007fa45436a8d7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fa45436a8e0: mov     0x108(%r15),%r10
           0x00007fa45436a8e7: mov     0x10(%rsp),%r11
           0x00007fa45436a8ec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.71%    0x00007fa45436a8f0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fa45436a8f2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007fa45436a8f5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fa45436aeb4
           0x00007fa45436a8f9: cmp     %r10d,%ebp
           0x00007fa45436a8fc: jnl     0x7fa45436aba7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.51%    0x00007fa45436a902: mov     0xc(%rsp),%r10d
           0x00007fa45436a907: mov     0x18(%rsp),%r8
           0x00007fa45436a90c: mov     0x8(%rsp),%r13d
           0x00007fa45436a911: mov     0x118(%r15),%rax
  0.25%    0x00007fa45436a918: mov     %rax,%r11
  0.10%    0x00007fa45436a91b: add     $0x28,%r11
           0x00007fa45436a91f: cmp     0x128(%r15),%r11
           0x00007fa45436a926: jnb     0x7fa45436ac53    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fa45436a92c: mov     %r11,0x118(%r15)
  0.51%    0x00007fa45436a933: prefetchnta 0x100(%r11)
           0x00007fa45436a93b: mov     0xb8(%r8),%r11
           0x00007fa45436a942: mov     %r11,(%rax)
  0.05%    0x00007fa45436a945: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.56%    0x00007fa45436a94c: movl    $0x0,0xc(%rax)
           0x00007fa45436a953: movq    $0x0,0x10(%rax)
           0x00007fa45436a95b: movq    $0x0,0x18(%rax)
           0x00007fa45436a963: movl    $0x0,0x20(%rax)
  0.71%    0x00007fa45436a96a: mov     %ebp,(%rsp)
           0x00007fa45436a96d: mov     %r13d,0x8(%rsp)
           0x00007fa45436a972: mov     %ecx,0x4(%rsp)
           0x00007fa45436a976: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.51%    0x00007fa45436a97b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007fa45436a97f: mov     %r10d,0xc(%rsp)
           0x00007fa45436a984: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007fa45436a987: mov     %rbp,%rsi
  0.71%    0x00007fa45436a98a: nop
           0x00007fa45436a98b: callq   0x7fa44cea7a00    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.05%    0x00007fa45436a990: movl    $0x0,0x14(%rbp)
  0.61%    0x00007fa45436a997: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.79%    0x00007fa45436a99d: mov     0x10(%rsp),%rsi
  0.10%    0x00007fa45436a9a2: nop
           0x00007fa45436a9a3: callq   0x7fa44cea9220    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fa45436a9a8: mov     %rax,%rbx
  0.56%    0x00007fa45436a9ab: cmpb    $0x0,0x30(%r15)
           0x00007fa45436a9b0: jne     0x7fa45436abb7
           0x00007fa45436a9b6: mov     %rbx,%r11
           0x00007fa45436a9b9: mov     %r11d,0x1c(%rbp)
  0.36%    0x00007fa45436a9bd: mov     %rbp,%r10
           0x00007fa45436a9c0: mov     %rbx,%r11
           0x00007fa45436a9c3: xor     %r10,%r11
           0x00007fa45436a9c6: shr     $0x14,%r11
  0.61%    0x00007fa45436a9ca: test    %r11,%r11
           0x00007fa45436a9cd: je      0x7fa45436aa27
           0x00007fa45436a9cf: test    %rbx,%rbx
           0x00007fa45436a9d2: je      0x7fa45436aa27
           0x00007fa45436a9d4: shr     $0x9,%r10
           0x00007fa45436a9d8: movabs  $0x7fa44bc9e000,%rdi
           0x00007fa45436a9e2: add     %r10,%rdi
           0x00007fa45436a9e5: cmpb    $0x20,(%rdi)
           0x00007fa45436a9e8: je      0x7fa45436aa27
           0x00007fa45436a9ea: mov     0x80(%r15),%r10
           0x00007fa45436a9f1: mov     0x70(%r15),%r11
....................................................................................................
 26.81%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa45436aacc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa45436aad0: mov     %r8,0x70(%r15)
            0x00007fa45436aad4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.90%     0x00007fa45436aada: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fa45436aade: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa45436ae94
            0x00007fa45436aae2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.61%     0x00007fa45436aae7: mov     0x10(%rsp),%r11
            0x00007fa45436aaec: vmulss  0x14(%r11),%xmm1,%xmm0
  0.05%     0x00007fa45436aaf2: vcvttss2si %xmm0,%r8d
  0.51%     0x00007fa45436aaf6: cmp     $0x80000000,%r8d
         â­  0x00007fa45436aafd: jne     0x7fa45436ab0f
         â  0x00007fa45436aaff: sub     $0x8,%rsp
         â  0x00007fa45436ab03: vmovss  %xmm0,(%rsp)
         â  0x00007fa45436ab08: callq   0x7fa44c8b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fa45436ab0d: pop     %r8
         â  0x00007fa45436ab0f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa45436ab13: mov     0x4(%rsp),%r9d
  0.41%     0x00007fa45436ab18: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fa45436aea0
            0x00007fa45436ab1c: mov     (%rsp),%ebp
....................................................................................................
 13.12%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (218 bytes) 
 13.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (28 bytes) 
  5.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 544 (191 bytes) 
  5.44%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (163 bytes) 
  5.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (146 bytes) 
  5.09%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (141 bytes) 
  4.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (104 bytes) 
  3.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (58 bytes) 
  3.00%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.85%         c2, level 4  java.lang.Object::&lt;init&gt;, version 30 (27 bytes) 
  2.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (52 bytes) 
  2.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 (24 bytes) 
  2.24%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (20 bytes) 
  1.93%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 552 (35 bytes) 
  1.88%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 (27 bytes) 
  1.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (0 bytes) 
  0.61%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (1 bytes) 
  0.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (9 bytes) 
  0.51%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 585 (53 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (113 bytes) 
 10.58%  <...other 145 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 
  9.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 
  7.32%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 
  6.05%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 
  5.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 544 
  3.00%   [kernel.kallsyms]  native_write_msr 
  2.85%         c2, level 4  java.lang.Object::&lt;init&gt;, version 30 
  2.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 
  1.93%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 552 
  1.88%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 
  0.61%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 585 
  0.56%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  _int_malloc 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.25%        libc-2.31.so  _int_free 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.20%   [kernel.kallsyms]  psi_group_change 
  0.20%        libc-2.31.so  unlink_chunk.isra.0 
  0.20%           libjvm.so  MemAllocator::allocate_inside_tlab_slow 
  6.46%  <...other 101 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 88.25%         c2, level 4
  5.65%   [kernel.kallsyms]
  2.75%           libjvm.so
  2.19%        libc-2.31.so
  0.86%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%        runtime stub
  0.05%  libpthread-2.31.so
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       627.622          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
