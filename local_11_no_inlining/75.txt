# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1213.617 ns/op
# Warmup Iteration   2: 630.768 ns/op
# Warmup Iteration   3: 618.154 ns/op
# Warmup Iteration   4: 617.301 ns/op
# Warmup Iteration   5: 620.516 ns/op
Iteration   1: 621.780 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  621.780 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115399 total address lines.
Perf output processed (skipped 11.083 seconds):
 Column 1: cycles (1990 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (234 bytes) 

            0x00007f18d436d124: mov     $0x8012575,%r10d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.10%     0x00007f18d436d12a: movabs  $0x800000000,%r9
            0x00007f18d436d134: lea     (%r9,%r10,8),%r9
         ╭  0x00007f18d436d138: jmp     0x7f18d436d180
         │  0x00007f18d436d13a: mov     %r15,%rsi
         │  0x00007f18d436d13d: movabs  $0x7f18ec7de290,%r10
         │  0x00007f18d436d147: callq   %r10
         │  0x00007f18d436d14a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%  │  0x00007f18d436d150: mov     0x108(%r15),%r10
         │  0x00007f18d436d157: mov     (%rsp),%r11
  0.65%  │  0x00007f18d436d15b: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f18d436d15f: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f18d436d161: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f18d436d164: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f18d436d728
  0.50%  │  0x00007f18d436d168: cmp     %r11d,%ebp
         │  0x00007f18d436d16b: jnl     0x7f18d436d419    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007f18d436d171: mov     0x14(%rsp),%r11d
  0.05%  │  0x00007f18d436d176: mov     0x18(%rsp),%r9
         │  0x00007f18d436d17b: mov     0xc(%rsp),%r13d
  0.40%  ↘  0x00007f18d436d180: mov     0x118(%r15),%rax
  0.05%     0x00007f18d436d187: mov     %rax,%r10
            0x00007f18d436d18a: add     $0x28,%r10
            0x00007f18d436d18e: cmp     0x128(%r15),%r10
            0x00007f18d436d195: jnb     0x7f18d436d4c4    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.45%     0x00007f18d436d19b: mov     %r10,0x118(%r15)
  0.05%     0x00007f18d436d1a2: prefetchnta 0x100(%r10)
  0.05%     0x00007f18d436d1aa: mov     0xb8(%r9),%r10
            0x00007f18d436d1b1: mov     %r10,(%rax)
  0.90%     0x00007f18d436d1b4: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f18d436d1bb: movl    $0x0,0xc(%rax)
            0x00007f18d436d1c2: movq    $0x0,0x10(%rax)
  0.10%     0x00007f18d436d1ca: movq    $0x0,0x18(%rax)
  0.75%     0x00007f18d436d1d2: movl    $0x0,0x20(%rax)
            0x00007f18d436d1d9: mov     %ebp,0x8(%rsp)
            0x00007f18d436d1dd: mov     %r13d,0xc(%rsp)
            0x00007f18d436d1e2: mov     %r8d,0x10(%rsp)
  0.25%     0x00007f18d436d1e7: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f18d436d1ec: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18d436d1f0: mov     %r11d,0x14(%rsp)
  0.05%     0x00007f18d436d1f5: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.70%     0x00007f18d436d1f8: mov     %rbp,%rsi
  0.05%     0x00007f18d436d1fb: callq   0x7f18d436aff0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007f18d436d200: movl    $0x0,0x14(%rbp)
  0.60%     0x00007f18d436d207: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.20%     0x00007f18d436d20d: mov     (%rsp),%rsi
            0x00007f18d436d211: nop
            0x00007f18d436d213: callq   0x7f18ccea4ea0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f18d436d218: mov     %rax,%rbx
  0.75%     0x00007f18d436d21b: cmpb    $0x0,0x30(%r15)
            0x00007f18d436d220: jne     0x7f18d436d429
            0x00007f18d436d226: mov     %rbx,%r10
            0x00007f18d436d229: mov     %r10d,0x1c(%rbp)
  0.45%     0x00007f18d436d22d: mov     %rbp,%r10
            0x00007f18d436d230: mov     %rbx,%r11
            0x00007f18d436d233: xor     %r10,%r11
            0x00007f18d436d236: shr     $0x14,%r11
  0.75%     0x00007f18d436d23a: test    %r11,%r11
            0x00007f18d436d23d: je      0x7f18d436d297
            0x00007f18d436d23f: test    %rbx,%rbx
            0x00007f18d436d242: je      0x7f18d436d297
            0x00007f18d436d244: shr     $0x9,%r10
            0x00007f18d436d248: movabs  $0x7f18ea647000,%rdi
            0x00007f18d436d252: add     %r10,%rdi
            0x00007f18d436d255: cmpb    $0x20,(%rdi)
            0x00007f18d436d258: je      0x7f18d436d297
            0x00007f18d436d25a: mov     0x80(%r15),%r10
            0x00007f18d436d261: mov     0x70(%r15),%r11
....................................................................................................
 26.88%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18d436d33c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f18d436d340: mov     %r8,0x70(%r15)
            0x00007f18d436d344: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.51%     0x00007f18d436d34a: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f18d436d34e: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f18d436d70c
            0x00007f18d436d352: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.45%     0x00007f18d436d357: mov     (%rsp),%r11
            0x00007f18d436d35b: vmulss  0x14(%r11),%xmm0,%xmm1
  0.05%     0x00007f18d436d361: vcvttss2si %xmm1,%r11d
  0.90%     0x00007f18d436d365: cmp     $0x80000000,%r11d
         ╭  0x00007f18d436d36c: jne     0x7f18d436d37e
         │  0x00007f18d436d36e: sub     $0x8,%rsp
         │  0x00007f18d436d372: vmovss  %xmm1,(%rsp)
         │  0x00007f18d436d377: callq   0x7f18cc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f18d436d37c: pop     %r11
         ↘  0x00007f18d436d37e: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f18d436d382: mov     0x10(%rsp),%r8d
  0.45%     0x00007f18d436d387: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f18d436d718
            0x00007f18d436d38b: mov     0x8(%rsp),%ebp
....................................................................................................
 12.96%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (234 bytes) 
 12.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (27 bytes) 
  8.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (284 bytes) 
  6.23%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 550 (156 bytes) 
  5.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 565 (180 bytes) 
  4.82%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 (141 bytes) 
  4.02%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  3.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (58 bytes) 
  2.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 545 (24 bytes) 
  2.21%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 568 (27 bytes) 
  2.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (51 bytes) 
  1.86%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.81%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 567 (25 bytes) 
  1.76%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 (20 bytes) 
  1.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 (31 bytes) 
  1.01%           libjvm.so  SpinPause (7 bytes) 
  0.90%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 550 (1 bytes) 
  0.65%           libjvm.so  ParallelTaskTerminator::offer_termination (14 bytes) 
  0.60%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.60%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 593 (94 bytes) 
 10.40%  <...other 137 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 47.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 
  8.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 
  7.14%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 550 
  6.58%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 547 
  5.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 565 
  4.02%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  2.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 545 
  2.21%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 568 
  1.86%   [kernel.kallsyms]  native_write_msr 
  1.81%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 567 
  1.01%           libjvm.so  SpinPause 
  0.65%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.65%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.60%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 593 
  0.55%        libc-2.31.so  malloc 
  0.45%        libc-2.31.so  _int_free 
  0.40%   [kernel.kallsyms]  free_pcppages_bulk 
  0.35%        libc-2.31.so  _int_malloc 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%   [kernel.kallsyms]  __perf_event_task_sched_in 
  6.38%  <...other 93 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.19%         c2, level 4
  5.98%   [kernel.kallsyms]
  3.97%           libjvm.so
  2.11%        libc-2.31.so
  0.50%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.05%         classes.jsa
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       621.780          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
