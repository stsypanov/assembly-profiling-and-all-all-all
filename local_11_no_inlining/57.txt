# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1121.272 ns/op
# Warmup Iteration   2: 668.894 ns/op
# Warmup Iteration   3: 614.412 ns/op
# Warmup Iteration   4: 614.057 ns/op
# Warmup Iteration   5: 621.005 ns/op
Iteration   1: 616.105 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.105 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 116292 total address lines.
Perf output processed (skipped 11.123 seconds):
 Column 1: cycles (1978 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (218 bytes) 

           0x00007f2f9c36b147: mov     %r15,%rsi
           0x00007f2f9c36b14a: movabs  $0x7f2fb19f5290,%r10
           0x00007f2f9c36b154: callq   %r10
           0x00007f2f9c36b157: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f2f9c36b160: mov     0x108(%r15),%r10
           0x00007f2f9c36b167: mov     0x10(%rsp),%r11
           0x00007f2f9c36b16c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.56%    0x00007f2f9c36b170: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f2f9c36b172: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007f2f9c36b175: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007f2f9c36b728
           0x00007f2f9c36b179: cmp     %r10d,%ebp
           0x00007f2f9c36b17c: jnl     0x7f2f9c36b427    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.66%    0x00007f2f9c36b182: mov     0xc(%rsp),%r10d
           0x00007f2f9c36b187: mov     0x18(%rsp),%r8
           0x00007f2f9c36b18c: mov     0x8(%rsp),%r13d
           0x00007f2f9c36b191: mov     0x118(%r15),%rax
  0.61%    0x00007f2f9c36b198: mov     %rax,%r11
  0.05%    0x00007f2f9c36b19b: add     $0x28,%r11
           0x00007f2f9c36b19f: cmp     0x128(%r15),%r11
           0x00007f2f9c36b1a6: jnb     0x7f2f9c36b4d3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.10%    0x00007f2f9c36b1ac: mov     %r11,0x118(%r15)
  0.66%    0x00007f2f9c36b1b3: prefetchnta 0x100(%r11)
  0.05%    0x00007f2f9c36b1bb: mov     0xb8(%r8),%r11
           0x00007f2f9c36b1c2: mov     %r11,(%rax)
  0.05%    0x00007f2f9c36b1c5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.51%    0x00007f2f9c36b1cc: movl    $0x0,0xc(%rax)
           0x00007f2f9c36b1d3: movq    $0x0,0x10(%rax)
           0x00007f2f9c36b1db: movq    $0x0,0x18(%rax)
           0x00007f2f9c36b1e3: movl    $0x0,0x20(%rax)
  0.81%    0x00007f2f9c36b1ea: mov     %ebp,(%rsp)
           0x00007f2f9c36b1ed: mov     %r13d,0x8(%rsp)
           0x00007f2f9c36b1f2: mov     %ecx,0x4(%rsp)
  0.05%    0x00007f2f9c36b1f6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.51%    0x00007f2f9c36b1fb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007f2f9c36b1ff: mov     %r10d,0xc(%rsp)
  0.05%    0x00007f2f9c36b204: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007f2f9c36b207: mov     %rbp,%rsi
  0.61%    0x00007f2f9c36b20a: nop
           0x00007f2f9c36b20b: callq   0x7f2f9c369cf0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.15%    0x00007f2f9c36b210: movl    $0x0,0x14(%rbp)
  0.76%    0x00007f2f9c36b217: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.22%    0x00007f2f9c36b21d: mov     0x10(%rsp),%rsi
  0.15%    0x00007f2f9c36b222: nop
           0x00007f2f9c36b223: callq   0x7f2f9c36b77e    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f2f9c36b228: mov     %rax,%rbx
  0.71%    0x00007f2f9c36b22b: cmpb    $0x0,0x30(%r15)
           0x00007f2f9c36b230: jne     0x7f2f9c36b437
  0.05%    0x00007f2f9c36b236: mov     %rbx,%r11
           0x00007f2f9c36b239: mov     %r11d,0x1c(%rbp)
  0.40%    0x00007f2f9c36b23d: mov     %rbp,%r10
  0.05%    0x00007f2f9c36b240: mov     %rbx,%r11
  0.05%    0x00007f2f9c36b243: xor     %r10,%r11
           0x00007f2f9c36b246: shr     $0x14,%r11
  0.71%    0x00007f2f9c36b24a: test    %r11,%r11
           0x00007f2f9c36b24d: je      0x7f2f9c36b2a7
           0x00007f2f9c36b24f: test    %rbx,%rbx
           0x00007f2f9c36b252: je      0x7f2f9c36b2a7
           0x00007f2f9c36b254: shr     $0x9,%r10
           0x00007f2f9c36b258: movabs  $0x7f2f94078000,%rdi
           0x00007f2f9c36b262: add     %r10,%rdi
           0x00007f2f9c36b265: cmpb    $0x20,(%rdi)
           0x00007f2f9c36b268: je      0x7f2f9c36b2a7
           0x00007f2f9c36b26a: mov     0x80(%r15),%r10
           0x00007f2f9c36b271: mov     0x70(%r15),%r11
....................................................................................................
 28.61%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f2f9c36b34c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f2f9c36b350: mov     %r8,0x70(%r15)
            0x00007f2f9c36b354: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.59%     0x00007f2f9c36b35a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f2f9c36b35e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f2f9c36b708
            0x00007f2f9c36b362: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.61%     0x00007f2f9c36b367: mov     0x10(%rsp),%r11
            0x00007f2f9c36b36c: vmulss  0x14(%r11),%xmm1,%xmm0
  0.05%     0x00007f2f9c36b372: vcvttss2si %xmm0,%r8d
  0.61%     0x00007f2f9c36b376: cmp     $0x80000000,%r8d
         â­  0x00007f2f9c36b37d: jne     0x7f2f9c36b38f
         â  0x00007f2f9c36b37f: sub     $0x8,%rsp
         â  0x00007f2f9c36b383: vmovss  %xmm0,(%rsp)
         â  0x00007f2f9c36b388: callq   0x7f2f948b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007f2f9c36b38d: pop     %r8
         â  0x00007f2f9c36b38f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f2f9c36b393: mov     0x4(%rsp),%r9d
  0.71%     0x00007f2f9c36b398: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007f2f9c36b714
            0x00007f2f9c36b39c: mov     (%rsp),%ebp
....................................................................................................
 13.90%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.61%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (218 bytes) 
 13.90%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (28 bytes) 
  6.07%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 566 (191 bytes) 
  4.60%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (146 bytes) 
  4.20%          c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 549 (141 bytes) 
  3.89%          c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 (99 bytes) 
  3.34%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (61 bytes) 
  3.29%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (104 bytes) 
  3.19%          c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  2.68%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (52 bytes) 
  2.38%          c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 561 (27 bytes) 
  2.07%          c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 556 (35 bytes) 
  1.97%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 (17 bytes) 
  1.87%          c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 549 (20 bytes) 
  1.72%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (41 bytes) 
  1.52%          c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 (23 bytes) 
  1.42%    [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.66%    [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.61%          c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 (8 bytes) 
  0.61%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 (9 bytes) 
 11.38%  <...other 162 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.37%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 
  8.49%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 562 
  6.07%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 566 
  6.07%          c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 549 
  6.02%          c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 
  3.19%          c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  2.38%          c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 561 
  2.07%          c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 556 
  1.97%          c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 546 
  1.42%    [kernel.kallsyms]  native_write_msr 
  0.66%    [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.46%          c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 594 
  0.35%         libc-2.31.so  malloc 
  0.30%    [kernel.kallsyms]  syscall_return_via_sysret 
  0.30%    [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%    [kernel.kallsyms]  free_pcppages_bulk 
  0.25%         libc-2.31.so  __memset_avx2_unaligned_erms 
  0.25%         libc-2.31.so  malloc_consolidate 
  0.20%         libc-2.31.so  _int_malloc 
  0.20%         libc-2.31.so  unlink_chunk.isra.0 
  7.68%  <...other 116 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.42%          c2, level 4
  5.36%    [kernel.kallsyms]
  3.08%            libjvm.so
  1.92%         libc-2.31.so
  0.86%     libfcml.so.0.0.0
  0.05%  libstdc++.so.6.0.28
  0.05%          c1, level 3
  0.05%   libpthread-2.31.so
  0.05%       libz.so.1.2.11
  0.05%          interpreter
  0.05%            nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.105          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
