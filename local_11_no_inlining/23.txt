# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1123.351 ns/op
# Warmup Iteration   2: 671.995 ns/op
# Warmup Iteration   3: 618.302 ns/op
# Warmup Iteration   4: 614.281 ns/op
# Warmup Iteration   5: 614.601 ns/op
Iteration   1: 615.792 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  615.792 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 114619 total address lines.
Perf output processed (skipped 11.091 seconds):
 Column 1: cycles (1940 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (218 bytes) 

           0x00007fdaf036ad47: mov     %r15,%rsi
           0x00007fdaf036ad4a: movabs  $0x7fdb05d7e290,%r10
           0x00007fdaf036ad54: callq   %r10
           0x00007fdaf036ad57: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fdaf036ad60: mov     0x108(%r15),%r10
           0x00007fdaf036ad67: mov     0x10(%rsp),%r11
           0x00007fdaf036ad6c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.52%    0x00007fdaf036ad70: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fdaf036ad72: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007fdaf036ad75: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fdaf036b328
           0x00007fdaf036ad79: cmp     %r10d,%ebp
           0x00007fdaf036ad7c: jnl     0x7fdaf036b027    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.82%    0x00007fdaf036ad82: mov     0xc(%rsp),%r10d
           0x00007fdaf036ad87: mov     0x18(%rsp),%r8
           0x00007fdaf036ad8c: mov     0x8(%rsp),%r13d
  0.05%    0x00007fdaf036ad91: mov     0x118(%r15),%rax
  0.46%    0x00007fdaf036ad98: mov     %rax,%r11
           0x00007fdaf036ad9b: add     $0x28,%r11
           0x00007fdaf036ad9f: cmp     0x128(%r15),%r11
           0x00007fdaf036ada6: jnb     0x7fdaf036b0d3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fdaf036adac: mov     %r11,0x118(%r15)
  0.52%    0x00007fdaf036adb3: prefetchnta 0x100(%r11)
           0x00007fdaf036adbb: mov     0xb8(%r8),%r11
           0x00007fdaf036adc2: mov     %r11,(%rax)
           0x00007fdaf036adc5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.82%    0x00007fdaf036adcc: movl    $0x0,0xc(%rax)
  0.10%    0x00007fdaf036add3: movq    $0x0,0x10(%rax)
           0x00007fdaf036addb: movq    $0x0,0x18(%rax)
  0.10%    0x00007fdaf036ade3: movl    $0x0,0x20(%rax)
  0.36%    0x00007fdaf036adea: mov     %ebp,(%rsp)
  0.05%    0x00007fdaf036aded: mov     %r13d,0x8(%rsp)
           0x00007fdaf036adf2: mov     %ecx,0x4(%rsp)
           0x00007fdaf036adf6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.26%    0x00007fdaf036adfb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fdaf036adff: mov     %r10d,0xc(%rsp)
           0x00007fdaf036ae04: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fdaf036ae07: mov     %rbp,%rsi
  0.52%    0x00007fdaf036ae0a: nop
  0.05%    0x00007fdaf036ae0b: callq   0x7fdaf03698f0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.05%    0x00007fdaf036ae10: movl    $0x0,0x14(%rbp)
  0.52%    0x00007fdaf036ae17: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.40%    0x00007fdaf036ae1d: mov     0x10(%rsp),%rsi
  0.10%    0x00007fdaf036ae22: nop
           0x00007fdaf036ae23: callq   0x7fdae8ea7620    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fdaf036ae28: mov     %rax,%rbx
  0.67%    0x00007fdaf036ae2b: cmpb    $0x0,0x30(%r15)
           0x00007fdaf036ae30: jne     0x7fdaf036b037
           0x00007fdaf036ae36: mov     %rbx,%r11
           0x00007fdaf036ae39: mov     %r11d,0x1c(%rbp)
  0.88%    0x00007fdaf036ae3d: mov     %rbp,%r10
           0x00007fdaf036ae40: mov     %rbx,%r11
           0x00007fdaf036ae43: xor     %r10,%r11
           0x00007fdaf036ae46: shr     $0x14,%r11
  0.82%    0x00007fdaf036ae4a: test    %r11,%r11
           0x00007fdaf036ae4d: je      0x7fdaf036aea7
           0x00007fdaf036ae4f: test    %rbx,%rbx
           0x00007fdaf036ae52: je      0x7fdaf036aea7
           0x00007fdaf036ae54: shr     $0x9,%r10
           0x00007fdaf036ae58: movabs  $0x7fdb03be7000,%rdi
           0x00007fdaf036ae62: add     %r10,%rdi
           0x00007fdaf036ae65: cmpb    $0x20,(%rdi)
           0x00007fdaf036ae68: je      0x7fdaf036aea7
           0x00007fdaf036ae6a: mov     0x80(%r15),%r10
           0x00007fdaf036ae71: mov     0x70(%r15),%r11
....................................................................................................
 26.08%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fdaf036af4c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fdaf036af50: mov     %r8,0x70(%r15)
            0x00007fdaf036af54: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.06%     0x00007fdaf036af5a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fdaf036af5e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fdaf036b308
            0x00007fdaf036af62: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.57%     0x00007fdaf036af67: mov     0x10(%rsp),%r11
            0x00007fdaf036af6c: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007fdaf036af72: vcvttss2si %xmm0,%r8d
  0.82%     0x00007fdaf036af76: cmp     $0x80000000,%r8d
         â­  0x00007fdaf036af7d: jne     0x7fdaf036af8f
         â  0x00007fdaf036af7f: sub     $0x8,%rsp
         â  0x00007fdaf036af83: vmovss  %xmm0,(%rsp)
         â  0x00007fdaf036af88: callq   0x7fdae88b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fdaf036af8d: pop     %r8
         â  0x00007fdaf036af8f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fdaf036af93: mov     0x4(%rsp),%r9d
  0.88%     0x00007fdaf036af98: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fdaf036b314
            0x00007fdaf036af9c: mov     (%rsp),%ebp
....................................................................................................
 13.45%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (218 bytes) 
 13.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (28 bytes) 
  6.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 (181 bytes) 
  5.93%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 536 (156 bytes) 
  5.05%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 534 (141 bytes) 
  4.79%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (146 bytes) 
  3.97%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  3.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (104 bytes) 
  3.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (67 bytes) 
  2.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (52 bytes) 
  2.37%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 534 (23 bytes) 
  1.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 533 (17 bytes) 
  1.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (27 bytes) 
  1.70%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 544 (27 bytes) 
  1.70%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 543 (25 bytes) 
  1.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (0 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (83 bytes) 
  0.77%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.72%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 536 (8 bytes) 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 553 (64 bytes) 
 11.29%  <...other 137 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 
  9.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 
  7.42%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 534 
  6.65%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 536 
  6.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 
  3.97%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  1.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 533 
  1.70%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 543 
  1.70%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 544 
  0.77%   [kernel.kallsyms]  native_write_msr 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 582 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 555 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 553 
  0.36%        libc-2.31.so  malloc 
  0.36%        libc-2.31.so  malloc_consolidate 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%           libjvm.so  SpinPause 
  0.26%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  7.11%  <...other 99 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 89.90%         c2, level 4
  4.48%   [kernel.kallsyms]
  2.78%           libjvm.so
  1.60%        libc-2.31.so
  1.03%    libfcml.so.0.0.0
  0.10%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%         interpreter
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       615.792          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
