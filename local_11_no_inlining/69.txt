# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1174.282 ns/op
# Warmup Iteration   2: 632.775 ns/op
# Warmup Iteration   3: 616.181 ns/op
# Warmup Iteration   4: 616.321 ns/op
# Warmup Iteration   5: 616.783 ns/op
Iteration   1: 616.822 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.822 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 116326 total address lines.
Perf output processed (skipped 11.270 seconds):
 Column 1: cycles (1959 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (227 bytes) 

           0x00007f9db036cdc5: movabs  $0x7f9dc50b7290,%r10
           0x00007f9db036cdcf: callq   %r10
           0x00007f9db036cdd2: nopw    0x0(%rax,%rax)
           0x00007f9db036cddc: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f9db036cde0: mov     0x108(%r15),%r11
           0x00007f9db036cde7: mov     (%rsp),%r10
           0x00007f9db036cdeb: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.61%    0x00007f9db036cdef: mov     0x10(%rsp),%r9d
           0x00007f9db036cdf4: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
           0x00007f9db036cdf7: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f9db036cdfc: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
  0.46%    0x00007f9db036cdff: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007f9db036d3c4
           0x00007f9db036ce03: cmp     %r11d,%r9d
           0x00007f9db036ce06: jnl     0x7f9db036d0ae    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
           0x00007f9db036ce0c: mov     0x8(%rsp),%ebp
           0x00007f9db036ce10: mov     0x14(%rsp),%r9d
  0.92%    0x00007f9db036ce15: mov     0x18(%rsp),%r8
           0x00007f9db036ce1a: mov     0x118(%r15),%rax
  0.10%    0x00007f9db036ce21: mov     %rax,%r11
           0x00007f9db036ce24: add     $0x28,%r11
  0.61%    0x00007f9db036ce28: cmp     0x128(%r15),%r11
           0x00007f9db036ce2f: jnb     0x7f9db036d159    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f9db036ce35: mov     %r11,0x118(%r15)
  0.05%    0x00007f9db036ce3c: prefetchnta 0x100(%r11)
  0.05%    0x00007f9db036ce44: mov     0xb8(%r8),%r11
  0.36%    0x00007f9db036ce4b: mov     %r11,(%rax)
           0x00007f9db036ce4e: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%    0x00007f9db036ce55: movl    $0x0,0xc(%rax)
           0x00007f9db036ce5c: movq    $0x0,0x10(%rax)
  0.82%    0x00007f9db036ce64: movq    $0x0,0x18(%rax)
  0.05%    0x00007f9db036ce6c: movl    $0x0,0x20(%rax)
           0x00007f9db036ce73: mov     %ebp,0x8(%rsp)
           0x00007f9db036ce77: mov     %r10d,0xc(%rsp)
  0.46%    0x00007f9db036ce7c: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007f9db036ce81: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f9db036ce85: mov     %r9d,0x14(%rsp)
           0x00007f9db036ce8a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.56%    0x00007f9db036ce8d: mov     %rbp,%rsi
           0x00007f9db036ce90: nop
           0x00007f9db036ce93: callq   0x7f9da889d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.46%    0x00007f9db036ce98: movl    $0x0,0x14(%rbp)
           0x00007f9db036ce9f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.00%    0x00007f9db036cea5: mov     (%rsp),%rsi
  0.10%    0x00007f9db036cea9: nop
           0x00007f9db036ceab: callq   0x7f9da889d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f9db036ceb0: mov     %rax,%rbx
  0.51%    0x00007f9db036ceb3: cmpb    $0x0,0x30(%r15)
  0.05%    0x00007f9db036ceb8: jne     0x7f9db036d0be
           0x00007f9db036cebe: mov     %rbx,%r11
           0x00007f9db036cec1: mov     %r11d,0x1c(%rbp)
  0.71%    0x00007f9db036cec5: mov     %rbp,%r10
           0x00007f9db036cec8: mov     %rbx,%r11
           0x00007f9db036cecb: xor     %r10,%r11
           0x00007f9db036cece: shr     $0x14,%r11
  0.66%    0x00007f9db036ced2: test    %r11,%r11
           0x00007f9db036ced5: je      0x7f9db036cf2f
           0x00007f9db036ced7: test    %rbx,%rbx
           0x00007f9db036ceda: je      0x7f9db036cf2f
           0x00007f9db036cedc: shr     $0x9,%r10
           0x00007f9db036cee0: movabs  $0x7f9da3426000,%rdi
           0x00007f9db036ceea: add     %r10,%rdi
           0x00007f9db036ceed: cmpb    $0x20,(%rdi)
           0x00007f9db036cef0: je      0x7f9db036cf2f
           0x00007f9db036cef2: mov     0x80(%r15),%r10
           0x00007f9db036cef9: mov     0x70(%r15),%r11
....................................................................................................
 24.60%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9db036cfd4: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9db036cfd8: mov     %r8,0x70(%r15)
            0x00007f9db036cfdc: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.71%     0x00007f9db036cfe2: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f9db036cfe6: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f9db036d3a8
  0.05%     0x00007f9db036cfea: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.66%     0x00007f9db036cfef: mov     (%rsp),%r10
            0x00007f9db036cff3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f9db036cff9: vcvttss2si %xmm0,%r8d
  0.41%     0x00007f9db036cffd: cmp     $0x80000000,%r8d
         â­  0x00007f9db036d004: jne     0x7f9db036d016
         â  0x00007f9db036d006: sub     $0x8,%rsp
         â  0x00007f9db036d00a: vmovss  %xmm0,(%rsp)
         â  0x00007f9db036d00f: callq   0x7f9da88b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007f9db036d014: pop     %r8
         â  0x00007f9db036d016: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f9db036d01a: mov     0xc(%rsp),%ebx
  0.82%     0x00007f9db036d01e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007f9db036d3b4
            0x00007f9db036d022: mov     0x10(%rsp),%r9d
....................................................................................................
 13.88%  <total for region 2>

....[Hottest Regions]...............................................................................
 24.60%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (227 bytes) 
 13.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (27 bytes) 
  9.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 572 (284 bytes) 
  6.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 574 (160 bytes) 
  6.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 573 (191 bytes) 
  4.95%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 555 (141 bytes) 
  4.03%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 (27 bytes) 
  3.93%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (67 bytes) 
  3.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (53 bytes) 
  1.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 554 (17 bytes) 
  1.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 565 (18 bytes) 
  1.84%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 555 (23 bytes) 
  1.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (40 bytes) 
  1.48%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.43%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 564 (27 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 572 (7 bytes) 
  0.56%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 574 (0 bytes) 
  0.56%           libjvm.so  SpinPause (7 bytes) 
  0.51%   [kernel.kallsyms]  entry_SYSCALL_64 (29 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 (54 bytes) 
  9.70%  <...other 130 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 
  9.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 572 
  7.50%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 574 
  6.79%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 555 
  6.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 573 
  4.03%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 
  1.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 554 
  1.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 565 
  1.48%   [kernel.kallsyms]  native_write_msr 
  1.43%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 564 
  0.56%        libc-2.31.so  malloc 
  0.56%           libjvm.so  SpinPause 
  0.56%        libc-2.31.so  malloc_consolidate 
  0.51%        libc-2.31.so  _int_malloc 
  0.51%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.46%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 603 
  0.31%        libc-2.31.so  _int_free 
  0.26%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.26%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  5.41%  <...other 87 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.43%         c2, level 4
  4.70%   [kernel.kallsyms]
  2.65%           libjvm.so
  2.40%        libc-2.31.so
  0.61%    libfcml.so.0.0.0
  0.15%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.822          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
