# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1121.867 ns/op
# Warmup Iteration   2: 690.538 ns/op
# Warmup Iteration   3: 625.496 ns/op
# Warmup Iteration   4: 616.318 ns/op
# Warmup Iteration   5: 617.177 ns/op
Iteration   1: 616.420 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.420 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114060 total address lines.
Perf output processed (skipped 11.207 seconds):
 Column 1: cycles (1965 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (218 bytes) 

           0x00007f0d9436b347: mov     %r15,%rsi
           0x00007f0d9436b34a: movabs  $0x7f0daa860290,%r10
           0x00007f0d9436b354: callq   %r10
           0x00007f0d9436b357: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f0d9436b360: mov     0x108(%r15),%r10
           0x00007f0d9436b367: mov     0x10(%rsp),%r11
           0x00007f0d9436b36c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.76%    0x00007f0d9436b370: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f0d9436b372: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007f0d9436b375: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007f0d9436b928
           0x00007f0d9436b379: cmp     %r10d,%ebp
           0x00007f0d9436b37c: jnl     0x7f0d9436b627    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.46%    0x00007f0d9436b382: mov     0xc(%rsp),%r10d
           0x00007f0d9436b387: mov     0x18(%rsp),%r8
           0x00007f0d9436b38c: mov     0x8(%rsp),%r13d
  0.05%    0x00007f0d9436b391: mov     0x118(%r15),%rax
  0.66%    0x00007f0d9436b398: mov     %rax,%r11
           0x00007f0d9436b39b: add     $0x28,%r11
           0x00007f0d9436b39f: cmp     0x128(%r15),%r11
           0x00007f0d9436b3a6: jnb     0x7f0d9436b6d3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.10%    0x00007f0d9436b3ac: mov     %r11,0x118(%r15)
  0.41%    0x00007f0d9436b3b3: prefetchnta 0x100(%r11)
  0.05%    0x00007f0d9436b3bb: mov     0xb8(%r8),%r11
           0x00007f0d9436b3c2: mov     %r11,(%rax)
  0.05%    0x00007f0d9436b3c5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.56%    0x00007f0d9436b3cc: movl    $0x0,0xc(%rax)
  0.15%    0x00007f0d9436b3d3: movq    $0x0,0x10(%rax)
           0x00007f0d9436b3db: movq    $0x0,0x18(%rax)
           0x00007f0d9436b3e3: movl    $0x0,0x20(%rax)
  0.41%    0x00007f0d9436b3ea: mov     %ebp,(%rsp)
  0.05%    0x00007f0d9436b3ed: mov     %r13d,0x8(%rsp)
           0x00007f0d9436b3f2: mov     %ecx,0x4(%rsp)
  0.05%    0x00007f0d9436b3f6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.76%    0x00007f0d9436b3fb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0d9436b3ff: mov     %r10d,0xc(%rsp)
  0.05%    0x00007f0d9436b404: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0d9436b407: mov     %rbp,%rsi
  0.76%    0x00007f0d9436b40a: nop
  0.05%    0x00007f0d9436b40b: callq   0x7f0d9436a770    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.10%    0x00007f0d9436b410: movl    $0x0,0x14(%rbp)
  0.36%    0x00007f0d9436b417: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.78%    0x00007f0d9436b41d: mov     0x10(%rsp),%rsi
           0x00007f0d9436b422: nop
           0x00007f0d9436b423: callq   0x7f0d94369d90    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f0d9436b428: mov     %rax,%rbx
  0.66%    0x00007f0d9436b42b: cmpb    $0x0,0x30(%r15)
           0x00007f0d9436b430: jne     0x7f0d9436b637
           0x00007f0d9436b436: mov     %rbx,%r11
           0x00007f0d9436b439: mov     %r11d,0x1c(%rbp)
  0.56%    0x00007f0d9436b43d: mov     %rbp,%r10
           0x00007f0d9436b440: mov     %rbx,%r11
           0x00007f0d9436b443: xor     %r10,%r11
           0x00007f0d9436b446: shr     $0x14,%r11
  0.20%    0x00007f0d9436b44a: test    %r11,%r11
           0x00007f0d9436b44d: je      0x7f0d9436b4a7
           0x00007f0d9436b44f: test    %rbx,%rbx
           0x00007f0d9436b452: je      0x7f0d9436b4a7
           0x00007f0d9436b454: shr     $0x9,%r10
           0x00007f0d9436b458: movabs  $0x7f0da86c9000,%rdi
           0x00007f0d9436b462: add     %r10,%rdi
           0x00007f0d9436b465: cmpb    $0x20,(%rdi)
           0x00007f0d9436b468: je      0x7f0d9436b4a7
           0x00007f0d9436b46a: mov     0x80(%r15),%r10
           0x00007f0d9436b471: mov     0x70(%r15),%r11
....................................................................................................
 26.06%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (34 bytes) 

             0x00007f0d9436b542: mov     %rbx,%r10
         ╭   0x00007f0d9436b545: jmp     0x7f0d9436b554
         │   0x00007f0d9436b547: mov     %rdi,0xfffffffffffffff8(%r11,%r8)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │   0x00007f0d9436b54c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │   0x00007f0d9436b550: mov     %r8,0x70(%r15)
  0.05%  ↘   0x00007f0d9436b554: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.32%      0x00007f0d9436b55a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%      0x00007f0d9436b55e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                           ; implicit exception: dispatches to 0x00007f0d9436b908
             0x00007f0d9436b562: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.46%      0x00007f0d9436b567: mov     0x10(%rsp),%r11
             0x00007f0d9436b56c: vmulss  0x14(%r11),%xmm1,%xmm0
             0x00007f0d9436b572: vcvttss2si %xmm0,%r8d
  0.87%      0x00007f0d9436b576: cmp     $0x80000000,%r8d
          ╭  0x00007f0d9436b57d: jne     0x7f0d9436b58f
          │  0x00007f0d9436b57f: sub     $0x8,%rsp
          │  0x00007f0d9436b583: vmovss  %xmm0,(%rsp)
          │  0x00007f0d9436b588: callq   0x7f0d8c8b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007f0d9436b58d: pop     %r8
          ↘  0x00007f0d9436b58f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
             0x00007f0d9436b593: mov     0x4(%rsp),%r9d
  0.51%      0x00007f0d9436b598: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007f0d9436b914
             0x00007f0d9436b59c: mov     (%rsp),%ebp
....................................................................................................
 13.74%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (218 bytes) 
 13.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (34 bytes) 
  6.11%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (156 bytes) 
  5.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 546 (191 bytes) 
  5.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 538 (146 bytes) 
  5.34%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (141 bytes) 
  4.12%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  4.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 538 (104 bytes) 
  3.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (70 bytes) 
  2.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (52 bytes) 
  2.09%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 548 (35 bytes) 
  1.88%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (23 bytes) 
  1.83%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 549 (27 bytes) 
  1.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 (24 bytes) 
  1.42%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (5 bytes) 
  0.71%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (1 bytes) 
  0.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (98 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 538 (0 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (37 bytes) 
 11.15%  <...other 144 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 
 10.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 538 
  7.23%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 
  6.82%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 
  5.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 546 
  4.12%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  2.09%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 548 
  1.83%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 549 
  1.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 
  1.42%   [kernel.kallsyms]  native_write_msr 
  0.66%        libc-2.31.so  _int_malloc 
  0.61%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 585 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.25%        libc-2.31.so  _int_free 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 552 
  0.25%           libjvm.so  OtherRegionsTable::occupied 
  6.72%  <...other 97 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.80%         c2, level 4
  4.33%   [kernel.kallsyms]
  3.16%           libjvm.so
  2.75%        libc-2.31.so
  0.56%    libfcml.so.0.0.0
  0.15%           nvidia.ko
  0.10%  libpthread-2.31.so
  0.10%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.420          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
