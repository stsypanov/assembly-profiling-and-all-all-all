# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1031.587 ns/op
# Warmup Iteration   2: 671.537 ns/op
# Warmup Iteration   3: 617.289 ns/op
# Warmup Iteration   4: 615.238 ns/op
# Warmup Iteration   5: 619.364 ns/op
Iteration   1: 613.331 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.331 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 112804 total address lines.
Perf output processed (skipped 11.067 seconds):
 Column 1: cycles (1966 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (218 bytes) 

           0x00007f5fc836aac7: mov     %r15,%rsi
           0x00007f5fc836aaca: movabs  $0x7f5fddac1290,%r10
           0x00007f5fc836aad4: callq   %r10
           0x00007f5fc836aad7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f5fc836aae0: mov     0x108(%r15),%r10
           0x00007f5fc836aae7: mov     0x10(%rsp),%r11
           0x00007f5fc836aaec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.56%    0x00007f5fc836aaf0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f5fc836aaf2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007f5fc836aaf5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007f5fc836b0b4
           0x00007f5fc836aaf9: cmp     %r10d,%ebp
           0x00007f5fc836aafc: jnl     0x7f5fc836ada7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.61%    0x00007f5fc836ab02: mov     0xc(%rsp),%r10d
           0x00007f5fc836ab07: mov     0x18(%rsp),%r8
           0x00007f5fc836ab0c: mov     0x8(%rsp),%r13d
  0.05%    0x00007f5fc836ab11: mov     0x118(%r15),%rax
  0.76%    0x00007f5fc836ab18: mov     %rax,%r11
           0x00007f5fc836ab1b: add     $0x28,%r11
           0x00007f5fc836ab1f: cmp     0x128(%r15),%r11
           0x00007f5fc836ab26: jnb     0x7f5fc836ae53    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f5fc836ab2c: mov     %r11,0x118(%r15)
  0.51%    0x00007f5fc836ab33: prefetchnta 0x100(%r11)
           0x00007f5fc836ab3b: mov     0xb8(%r8),%r11
           0x00007f5fc836ab42: mov     %r11,(%rax)
  0.10%    0x00007f5fc836ab45: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.46%    0x00007f5fc836ab4c: movl    $0x0,0xc(%rax)
  0.05%    0x00007f5fc836ab53: movq    $0x0,0x10(%rax)
  0.05%    0x00007f5fc836ab5b: movq    $0x0,0x18(%rax)
           0x00007f5fc836ab63: movl    $0x0,0x20(%rax)
  0.56%    0x00007f5fc836ab6a: mov     %ebp,(%rsp)
           0x00007f5fc836ab6d: mov     %r13d,0x8(%rsp)
           0x00007f5fc836ab72: mov     %ecx,0x4(%rsp)
  0.10%    0x00007f5fc836ab76: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.97%    0x00007f5fc836ab7b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007f5fc836ab7f: mov     %r10d,0xc(%rsp)
           0x00007f5fc836ab84: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007f5fc836ab87: mov     %rbp,%rsi
  0.56%    0x00007f5fc836ab8a: nop
           0x00007f5fc836ab8b: callq   0x7f5fc0ea3a00    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f5fc836ab90: movl    $0x0,0x14(%rbp)
  0.51%    0x00007f5fc836ab97: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.36%    0x00007f5fc836ab9d: mov     0x10(%rsp),%rsi
           0x00007f5fc836aba2: nop
           0x00007f5fc836aba3: callq   0x7f5fc8369790    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f5fc836aba8: mov     %rax,%rbx
  0.92%    0x00007f5fc836abab: cmpb    $0x0,0x30(%r15)
  0.05%    0x00007f5fc836abb0: jne     0x7f5fc836adb7
           0x00007f5fc836abb6: mov     %rbx,%r11
           0x00007f5fc836abb9: mov     %r11d,0x1c(%rbp)
  0.76%    0x00007f5fc836abbd: mov     %rbp,%r10
           0x00007f5fc836abc0: mov     %rbx,%r11
           0x00007f5fc836abc3: xor     %r10,%r11
           0x00007f5fc836abc6: shr     $0x14,%r11
  0.81%    0x00007f5fc836abca: test    %r11,%r11
           0x00007f5fc836abcd: je      0x7f5fc836ac27
           0x00007f5fc836abcf: test    %rbx,%rbx
           0x00007f5fc836abd2: je      0x7f5fc836ac27
           0x00007f5fc836abd4: shr     $0x9,%r10
           0x00007f5fc836abd8: movabs  $0x7f5fc0078000,%rdi
           0x00007f5fc836abe2: add     %r10,%rdi
           0x00007f5fc836abe5: cmpb    $0x20,(%rdi)
           0x00007f5fc836abe8: je      0x7f5fc836ac27
           0x00007f5fc836abea: mov     0x80(%r15),%r10
           0x00007f5fc836abf1: mov     0x70(%r15),%r11
....................................................................................................
 26.86%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5fc836accc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f5fc836acd0: mov     %r8,0x70(%r15)
            0x00007f5fc836acd4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.36%     0x00007f5fc836acda: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5fc836acde: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f5fc836b094
            0x00007f5fc836ace2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.41%     0x00007f5fc836ace7: mov     0x10(%rsp),%r11
            0x00007f5fc836acec: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007f5fc836acf2: vcvttss2si %xmm0,%r8d
  0.66%     0x00007f5fc836acf6: cmp     $0x80000000,%r8d
         â­  0x00007f5fc836acfd: jne     0x7f5fc836ad0f
         â  0x00007f5fc836acff: sub     $0x8,%rsp
         â  0x00007f5fc836ad03: vmovss  %xmm0,(%rsp)
         â  0x00007f5fc836ad08: callq   0x7f5fc08b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007f5fc836ad0d: pop     %r8
         â  0x00007f5fc836ad0f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f5fc836ad13: mov     0x4(%rsp),%r9d
  0.51%     0x00007f5fc836ad18: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007f5fc836b0a0
            0x00007f5fc836ad1c: mov     (%rsp),%ebp
....................................................................................................
 13.43%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (218 bytes) 
 13.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (28 bytes) 
  6.26%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 (163 bytes) 
  5.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 548 (180 bytes) 
  4.98%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (146 bytes) 
  4.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 (141 bytes) 
  3.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (104 bytes) 
  3.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (58 bytes) 
  3.71%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 (27 bytes) 
  2.29%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.19%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 (27 bytes) 
  2.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (52 bytes) 
  1.88%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 (23 bytes) 
  1.88%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 554 (25 bytes) 
  1.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (5 bytes) 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 536 (24 bytes) 
  0.71%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 (8 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (9 bytes) 
  0.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (52 bytes) 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
 11.60%  <...other 139 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 
  9.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 
  6.97%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 547 
  6.51%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 
  5.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 548 
  3.71%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 
  2.29%   [kernel.kallsyms]  native_write_msr 
  2.19%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 
  1.88%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 554 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 536 
  0.61%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 557 
  0.51%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.36%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 586 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk 
  0.25%        libc-2.31.so  _int_malloc 
  0.25%        libc-2.31.so  _int_free 
  6.77%  <...other 99 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 88.35%         c2, level 4
  5.75%   [kernel.kallsyms]
  2.70%           libjvm.so
  2.24%        libc-2.31.so
  0.66%    libfcml.so.0.0.0
  0.15%              kvm.ko
  0.15%         interpreter
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.331          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
