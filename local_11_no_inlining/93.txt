# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1166.857 ns/op
# Warmup Iteration   2: 649.009 ns/op
# Warmup Iteration   3: 619.890 ns/op
# Warmup Iteration   4: 617.181 ns/op
# Warmup Iteration   5: 623.786 ns/op
Iteration   1: 616.251 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.251 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115465 total address lines.
Perf output processed (skipped 11.171 seconds):
 Column 1: cycles (1954 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (262 bytes) 

            0x00007fe8a036b61e: jbe     0x7fe8a036b92d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fe8a036b624: mov     %rbx,%r11
            0x00007fe8a036b627: mov     (%rsp),%r10
            0x00007fe8a036b62b: mov     %r10,%rcx
            0x00007fe8a036b62e: mov     $0x8012575,%r8d   ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fe8a036b634: shl     $0x3,%r8
            0x00007fe8a036b638: movabs  $0x800000000,%r12
            0x00007fe8a036b642: add     %r12,%r8
            0x00007fe8a036b645: xor     %r12,%r12
  0.10%  ╭  0x00007fe8a036b648: jmp     0x7fe8a036b699
         │  0x00007fe8a036b64a: mov     %r15,%rsi
         │  0x00007fe8a036b64d: movabs  $0x7fe8b55e9290,%r10
         │  0x00007fe8a036b657: callq   %r10
         │  0x00007fe8a036b65a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fe8a036b660: mov     0x108(%r15),%r10
  0.51%  │  0x00007fe8a036b667: mov     (%rsp),%r11
         │  0x00007fe8a036b66b: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007fe8a036b66f: mov     0x10(%rsp),%r9d
         │  0x00007fe8a036b674: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.82%  │  0x00007fe8a036b677: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fe8a036b67c: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007fe8a036b67f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fe8a036bc34
         │  0x00007fe8a036b683: cmp     %r8d,%r9d
         │  0x00007fe8a036b686: jnl     0x7fe8a036b92d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.61%  │  0x00007fe8a036b68c: mov     0x8(%rsp),%ebp
         │  0x00007fe8a036b690: mov     0x14(%rsp),%ecx
         │  0x00007fe8a036b694: mov     0x18(%rsp),%r8
         ↘  0x00007fe8a036b699: mov     0x118(%r15),%rax
  0.36%     0x00007fe8a036b6a0: mov     %rax,%r10
            0x00007fe8a036b6a3: add     $0x28,%r10
            0x00007fe8a036b6a7: cmp     0x128(%r15),%r10
            0x00007fe8a036b6ae: jnb     0x7fe8a036b9d8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe8a036b6b4: mov     %r10,0x118(%r15)
  0.61%     0x00007fe8a036b6bb: prefetchnta 0x100(%r10)
            0x00007fe8a036b6c3: mov     0xb8(%r8),%r10
            0x00007fe8a036b6ca: mov     %r10,(%rax)
            0x00007fe8a036b6cd: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.67%     0x00007fe8a036b6d4: movl    $0x0,0xc(%rax)
            0x00007fe8a036b6db: movq    $0x0,0x10(%rax)
            0x00007fe8a036b6e3: movq    $0x0,0x18(%rax)
            0x00007fe8a036b6eb: movl    $0x0,0x20(%rax)
  0.41%     0x00007fe8a036b6f2: mov     %ebp,0x8(%rsp)
            0x00007fe8a036b6f6: mov     %r11d,0xc(%rsp)
            0x00007fe8a036b6fb: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fe8a036b700: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.46%     0x00007fe8a036b703: mov     %ecx,0x14(%rsp)
            0x00007fe8a036b707: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe8a036b70a: mov     %rbp,%rsi
            0x00007fe8a036b70d: nop
  0.77%     0x00007fe8a036b70f: callq   0x7fe8a036a570    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007fe8a036b714: movl    $0x0,0x14(%rbp)
            0x00007fe8a036b71b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.11%     0x00007fe8a036b721: mov     (%rsp),%rsi
  0.05%     0x00007fe8a036b725: nop
            0x00007fe8a036b727: callq   0x7fe8a036bc9e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fe8a036b72c: mov     %rax,%rbx
  0.36%     0x00007fe8a036b72f: cmpb    $0x0,0x30(%r15)
  0.05%     0x00007fe8a036b734: jne     0x7fe8a036b93d
            0x00007fe8a036b73a: mov     %rbx,%r10
            0x00007fe8a036b73d: mov     %r10d,0x1c(%rbp)
  0.67%     0x00007fe8a036b741: mov     %rbp,%r10
  0.05%     0x00007fe8a036b744: mov     %rbx,%r11
  0.05%     0x00007fe8a036b747: xor     %r10,%r11
            0x00007fe8a036b74a: shr     $0x14,%r11
  0.56%     0x00007fe8a036b74e: test    %r11,%r11
            0x00007fe8a036b751: je      0x7fe8a036b7ab
            0x00007fe8a036b753: test    %rbx,%rbx
            0x00007fe8a036b756: je      0x7fe8a036b7ab
            0x00007fe8a036b758: shr     $0x9,%r10
            0x00007fe8a036b75c: movabs  $0x7fe897c9e000,%rdi
            0x00007fe8a036b766: add     %r10,%rdi
            0x00007fe8a036b769: cmpb    $0x20,(%rdi)
            0x00007fe8a036b76c: je      0x7fe8a036b7ab
            0x00007fe8a036b76e: mov     0x80(%r15),%r10
            0x00007fe8a036b775: mov     0x70(%r15),%r11
....................................................................................................
 27.28%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe8a036b850: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe8a036b854: mov     %r8,0x70(%r15)
            0x00007fe8a036b858: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.85%     0x00007fe8a036b85e: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe8a036b862: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fe8a036bc18
            0x00007fe8a036b866: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.51%     0x00007fe8a036b86b: mov     (%rsp),%r11
            0x00007fe8a036b86f: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007fe8a036b875: vcvttss2si %xmm1,%r11d
  0.72%     0x00007fe8a036b879: cmp     $0x80000000,%r11d
         ╭  0x00007fe8a036b880: jne     0x7fe8a036b892
         │  0x00007fe8a036b882: sub     $0x8,%rsp
         │  0x00007fe8a036b886: vmovss  %xmm1,(%rsp)
         │  0x00007fe8a036b88b: callq   0x7fe8988b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fe8a036b890: pop     %r11
         ↘  0x00007fe8a036b892: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.67%     0x00007fe8a036b896: mov     0xc(%rsp),%ebx
            0x00007fe8a036b89a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007fe8a036bc24
            0x00007fe8a036b89e: mov     0x10(%rsp),%r9d
  0.05%     0x00007fe8a036b8a3: cmp     %r11d,%r9d
            0x00007fe8a036b8a6: jnb     0x7fe8a036ba90
  0.72%     0x00007fe8a036b8ac: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007fe8a036b8af: lea     0x10(%rbx,%r9,4),%r14
            0x00007fe8a036b8b4: cmpb    $0x0,0x30(%r15)
  0.05%     0x00007fe8a036b8b9: jne     0x7fe8a036b9a6
  0.56%     0x00007fe8a036b8bf: mov     %r10,%r11
            0x00007fe8a036b8c2: mov     %r10,%r8
            0x00007fe8a036b8c5: mov     %r8d,(%r14)
            0x00007fe8a036b8c8: mov     %r14,%r10
  0.51%     0x00007fe8a036b8cb: xor     %r10,%r11
            0x00007fe8a036b8ce: shr     $0x14,%r11
            0x00007fe8a036b8d2: test    %r11,%r11
            0x00007fe8a036b8d5: je      0x7fe8a036b660
            0x00007fe8a036b8db: shr     $0x9,%r10
            0x00007fe8a036b8df: movabs  $0x7fe897c9e000,%rdi
            0x00007fe8a036b8e9: add     %r10,%rdi
            0x00007fe8a036b8ec: cmpb    $0x20,(%rdi)
            0x00007fe8a036b8ef: je      0x7fe8a036b660
            0x00007fe8a036b8f5: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 16.63%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (262 bytes) 
 16.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (109 bytes) 
  6.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 566 (180 bytes) 
  6.14%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 550 (167 bytes) 
  4.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 (146 bytes) 
  4.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 (104 bytes) 
  4.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (58 bytes) 
  3.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 546 (141 bytes) 
  2.87%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  2.61%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 556 (35 bytes) 
  2.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 545 (27 bytes) 
  1.74%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 546 (23 bytes) 
  1.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (71 bytes) 
  1.07%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 555 (27 bytes) 
  0.97%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 (0 bytes) 
  0.67%           libjvm.so  SpinPause (7 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (18 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (34 bytes) 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 595 (54 bytes) 
 10.49%  <...other 136 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 
 10.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 565 
  6.45%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 550 
  6.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 566 
  5.37%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 546 
  2.87%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  2.61%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 556 
  2.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 545 
  1.07%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 555 
  0.97%   [kernel.kallsyms]  native_write_msr 
  0.67%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 595 
  0.67%           libjvm.so  SpinPause 
  0.56%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  _int_malloc 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 564 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%        libc-2.31.so  _int_free 
  0.26%   [kernel.kallsyms]  free_pcppages_bulk 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  6.24%  <...other 97 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.56%         c2, level 4
  4.30%   [kernel.kallsyms]
  2.97%           libjvm.so
  2.51%        libc-2.31.so
  0.46%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.251          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
