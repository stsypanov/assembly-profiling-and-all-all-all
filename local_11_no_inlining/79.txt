# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1007.241 ns/op
# Warmup Iteration   2: 647.203 ns/op
# Warmup Iteration   3: 628.235 ns/op
# Warmup Iteration   4: 631.429 ns/op
# Warmup Iteration   5: 628.440 ns/op
Iteration   1: 624.239 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  624.239 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 113228 total address lines.
Perf output processed (skipped 11.099 seconds):
 Column 1: cycles (2000 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (223 bytes) 

            0x00007f722436ab34: lea     (%r9,%r10,8),%r9
         ╭  0x00007f722436ab38: jmp     0x7f722436ab80
         │  0x00007f722436ab3a: mov     %r15,%rsi
         │  0x00007f722436ab3d: movabs  $0x7f723b400290,%r10
         │  0x00007f722436ab47: callq   %r10
         │  0x00007f722436ab4a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f722436ab50: mov     0x108(%r15),%r10
         │  0x00007f722436ab57: mov     (%rsp),%r11
  0.50%  │  0x00007f722436ab5b: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f722436ab5f: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f722436ab61: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f722436ab64: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f722436b128
  0.65%  │  0x00007f722436ab68: cmp     %r11d,%ebp
         │  0x00007f722436ab6b: jnl     0x7f722436ae19    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007f722436ab71: mov     0x14(%rsp),%r11d
  0.05%  │  0x00007f722436ab76: mov     0x18(%rsp),%r9
         │  0x00007f722436ab7b: mov     0xc(%rsp),%r13d
  0.70%  ↘  0x00007f722436ab80: mov     0x118(%r15),%rax
  0.05%     0x00007f722436ab87: mov     %rax,%r10
            0x00007f722436ab8a: add     $0x28,%r10
            0x00007f722436ab8e: cmp     0x128(%r15),%r10
            0x00007f722436ab95: jnb     0x7f722436aec4    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.45%     0x00007f722436ab9b: mov     %r10,0x118(%r15)
  0.10%     0x00007f722436aba2: prefetchnta 0x100(%r10)
            0x00007f722436abaa: mov     0xb8(%r9),%r10
            0x00007f722436abb1: mov     %r10,(%rax)
  0.95%     0x00007f722436abb4: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.10%     0x00007f722436abbb: movl    $0x0,0xc(%rax)
            0x00007f722436abc2: movq    $0x0,0x10(%rax)
            0x00007f722436abca: movq    $0x0,0x18(%rax)
  0.80%     0x00007f722436abd2: movl    $0x0,0x20(%rax)
  0.05%     0x00007f722436abd9: mov     %ebp,0x8(%rsp)
            0x00007f722436abdd: mov     %r13d,0xc(%rsp)
            0x00007f722436abe2: mov     %r8d,0x10(%rsp)
  0.55%     0x00007f722436abe7: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.05%     0x00007f722436abec: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f722436abf0: mov     %r11d,0x14(%rsp)
            0x00007f722436abf5: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.65%     0x00007f722436abf8: mov     %rbp,%rsi
            0x00007f722436abfb: callq   0x7f7224369ff0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007f722436ac00: movl    $0x0,0x14(%rbp)
  0.35%     0x00007f722436ac07: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.15%     0x00007f722436ac0d: mov     (%rsp),%rsi
  0.10%     0x00007f722436ac11: nop
            0x00007f722436ac13: callq   0x7f721cea5f20    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f722436ac18: mov     %rax,%rbx
  0.50%     0x00007f722436ac1b: cmpb    $0x0,0x30(%r15)
            0x00007f722436ac20: jne     0x7f722436ae29
            0x00007f722436ac26: mov     %rbx,%r10
            0x00007f722436ac29: mov     %r10d,0x1c(%rbp)
  0.55%     0x00007f722436ac2d: mov     %rbp,%r10
            0x00007f722436ac30: mov     %rbx,%r11
            0x00007f722436ac33: xor     %r10,%r11
            0x00007f722436ac36: shr     $0x14,%r11
  0.65%     0x00007f722436ac3a: test    %r11,%r11
            0x00007f722436ac3d: je      0x7f722436ac97
            0x00007f722436ac3f: test    %rbx,%rbx
            0x00007f722436ac42: je      0x7f722436ac97
            0x00007f722436ac44: shr     $0x9,%r10
            0x00007f722436ac48: movabs  $0x7f7239269000,%rdi
            0x00007f722436ac52: add     %r10,%rdi
            0x00007f722436ac55: cmpb    $0x20,(%rdi)
            0x00007f722436ac58: je      0x7f722436ac97
            0x00007f722436ac5a: mov     0x80(%r15),%r10
            0x00007f722436ac61: mov     0x70(%r15),%r11
....................................................................................................
 26.05%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f722436ad3c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f722436ad40: mov     %r8,0x70(%r15)
            0x00007f722436ad44: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.50%     0x00007f722436ad4a: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f722436ad4e: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f722436b10c
            0x00007f722436ad52: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.70%     0x00007f722436ad57: mov     (%rsp),%r11
            0x00007f722436ad5b: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f722436ad61: vcvttss2si %xmm1,%r11d
  0.80%     0x00007f722436ad65: cmp     $0x80000000,%r11d
         ╭  0x00007f722436ad6c: jne     0x7f722436ad7e
         │  0x00007f722436ad6e: sub     $0x8,%rsp
         │  0x00007f722436ad72: vmovss  %xmm1,(%rsp)
         │  0x00007f722436ad77: callq   0x7f721c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f722436ad7c: pop     %r11
         ↘  0x00007f722436ad7e: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f722436ad82: mov     0x10(%rsp),%r8d
  0.25%     0x00007f722436ad87: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f722436b118
            0x00007f722436ad8b: mov     0x8(%rsp),%ebp
....................................................................................................
 13.05%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (223 bytes) 
 13.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (27 bytes) 
  7.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 (191 bytes) 
  5.85%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (156 bytes) 
  4.75%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (141 bytes) 
  4.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (70 bytes) 
  4.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (146 bytes) 
  3.85%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  3.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (104 bytes) 
  3.20%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (51 bytes) 
  1.85%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 (27 bytes) 
  1.70%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 553 (32 bytes) 
  1.55%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (23 bytes) 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 (17 bytes) 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (72 bytes) 
  0.90%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (1 bytes) 
  0.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (7 bytes) 
  0.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (67 bytes) 
  0.55%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 584 (123 bytes) 
 11.10%  <...other 149 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 
  8.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 
  7.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 
  6.75%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 
  6.30%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 
  3.85%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  3.20%   [kernel.kallsyms]  native_write_msr 
  1.85%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 
  1.70%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 553 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 
  0.65%        libc-2.31.so  malloc 
  0.55%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 584 
  0.35%        libc-2.31.so  _int_free 
  0.30%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 554 
  0.30%        libc-2.31.so  malloc_consolidate 
  0.25%        libc-2.31.so  unlink_chunk.isra.0 
  0.25%           libjvm.so  OtherRegionsTable::occupied 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk 
  0.20%        libc-2.31.so  _int_malloc 
  7.00%  <...other 114 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.40%         c2, level 4
  6.35%   [kernel.kallsyms]
  3.30%           libjvm.so
  2.20%        libc-2.31.so
  0.55%    libfcml.so.0.0.0
  0.10%              kvm.ko
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       624.239          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
