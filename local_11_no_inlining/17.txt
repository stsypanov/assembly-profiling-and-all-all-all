# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1251.577 ns/op
# Warmup Iteration   2: 633.804 ns/op
# Warmup Iteration   3: 615.555 ns/op
# Warmup Iteration   4: 614.220 ns/op
# Warmup Iteration   5: 615.903 ns/op
Iteration   1: 617.107 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  617.107 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115454 total address lines.
Perf output processed (skipped 11.081 seconds):
 Column 1: cycles (2028 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (262 bytes) 

            0x00007fe5c436d79e: jbe     0x7fe5c436daad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fe5c436d7a4: mov     %rbx,%r11
            0x00007fe5c436d7a7: mov     (%rsp),%r10
            0x00007fe5c436d7ab: mov     %r10,%rcx
            0x00007fe5c436d7ae: mov     $0x8012575,%r8d   ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fe5c436d7b4: shl     $0x3,%r8
            0x00007fe5c436d7b8: movabs  $0x800000000,%r12
            0x00007fe5c436d7c2: add     %r12,%r8
            0x00007fe5c436d7c5: xor     %r12,%r12
  0.05%  ╭  0x00007fe5c436d7c8: jmp     0x7fe5c436d819
         │  0x00007fe5c436d7ca: mov     %r15,%rsi
         │  0x00007fe5c436d7cd: movabs  $0x7fe5dbbcf290,%r10
         │  0x00007fe5c436d7d7: callq   %r10
         │  0x00007fe5c436d7da: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fe5c436d7e0: mov     0x108(%r15),%r10
  0.69%  │  0x00007fe5c436d7e7: mov     (%rsp),%r11
         │  0x00007fe5c436d7eb: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007fe5c436d7ef: mov     0x10(%rsp),%r9d
  0.05%  │  0x00007fe5c436d7f4: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.74%  │  0x00007fe5c436d7f7: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fe5c436d7fc: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007fe5c436d7ff: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fe5c436ddb8
         │  0x00007fe5c436d803: cmp     %r8d,%r9d
         │  0x00007fe5c436d806: jnl     0x7fe5c436daad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.74%  │  0x00007fe5c436d80c: mov     0x8(%rsp),%ebp
         │  0x00007fe5c436d810: mov     0x14(%rsp),%ecx
         │  0x00007fe5c436d814: mov     0x18(%rsp),%r8
         ↘  0x00007fe5c436d819: mov     0x118(%r15),%rax
  0.59%     0x00007fe5c436d820: mov     %rax,%r10
            0x00007fe5c436d823: add     $0x28,%r10
  0.15%     0x00007fe5c436d827: cmp     0x128(%r15),%r10
            0x00007fe5c436d82e: jnb     0x7fe5c436db58    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe5c436d834: mov     %r10,0x118(%r15)
  0.59%     0x00007fe5c436d83b: prefetchnta 0x100(%r10)
            0x00007fe5c436d843: mov     0xb8(%r8),%r10
  0.10%     0x00007fe5c436d84a: mov     %r10,(%rax)
            0x00007fe5c436d84d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.39%     0x00007fe5c436d854: movl    $0x0,0xc(%rax)
            0x00007fe5c436d85b: movq    $0x0,0x10(%rax)
            0x00007fe5c436d863: movq    $0x0,0x18(%rax)
  0.05%     0x00007fe5c436d86b: movl    $0x0,0x20(%rax)
  0.35%     0x00007fe5c436d872: mov     %ebp,0x8(%rsp)
            0x00007fe5c436d876: mov     %r11d,0xc(%rsp)
  0.10%     0x00007fe5c436d87b: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fe5c436d880: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.79%     0x00007fe5c436d883: mov     %ecx,0x14(%rsp)
            0x00007fe5c436d887: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe5c436d88a: mov     %rbp,%rsi
            0x00007fe5c436d88d: nop
  0.94%     0x00007fe5c436d88f: callq   0x7fe5c436a3f0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.15%     0x00007fe5c436d894: movl    $0x0,0x14(%rbp)
            0x00007fe5c436d89b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.72%     0x00007fe5c436d8a1: mov     (%rsp),%rsi
  0.05%     0x00007fe5c436d8a5: nop
            0x00007fe5c436d8a7: callq   0x7fe5bcea56a0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fe5c436d8ac: mov     %rax,%rbx
  0.69%     0x00007fe5c436d8af: cmpb    $0x0,0x30(%r15)
            0x00007fe5c436d8b4: jne     0x7fe5c436dabd
            0x00007fe5c436d8ba: mov     %rbx,%r10
            0x00007fe5c436d8bd: mov     %r10d,0x1c(%rbp)
  0.49%     0x00007fe5c436d8c1: mov     %rbp,%r10
            0x00007fe5c436d8c4: mov     %rbx,%r11
            0x00007fe5c436d8c7: xor     %r10,%r11
            0x00007fe5c436d8ca: shr     $0x14,%r11
  0.54%     0x00007fe5c436d8ce: test    %r11,%r11
            0x00007fe5c436d8d1: je      0x7fe5c436d92b
            0x00007fe5c436d8d3: test    %rbx,%rbx
            0x00007fe5c436d8d6: je      0x7fe5c436d92b
            0x00007fe5c436d8d8: shr     $0x9,%r10
            0x00007fe5c436d8dc: movabs  $0x7fe5d9a38000,%rdi
            0x00007fe5c436d8e6: add     %r10,%rdi
            0x00007fe5c436d8e9: cmpb    $0x20,(%rdi)
            0x00007fe5c436d8ec: je      0x7fe5c436d92b
            0x00007fe5c436d8ee: mov     0x80(%r15),%r10
            0x00007fe5c436d8f5: mov     0x70(%r15),%r11
....................................................................................................
 24.95%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe5c436d9d0: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe5c436d9d4: mov     %r8,0x70(%r15)
            0x00007fe5c436d9d8: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.03%     0x00007fe5c436d9de: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe5c436d9e2: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fe5c436dd9c
            0x00007fe5c436d9e6: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.59%     0x00007fe5c436d9eb: mov     (%rsp),%r11
            0x00007fe5c436d9ef: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007fe5c436d9f5: vcvttss2si %xmm1,%r11d
  0.49%     0x00007fe5c436d9f9: cmp     $0x80000000,%r11d
         ╭  0x00007fe5c436da00: jne     0x7fe5c436da12
         │  0x00007fe5c436da02: sub     $0x8,%rsp
         │  0x00007fe5c436da06: vmovss  %xmm1,(%rsp)
         │  0x00007fe5c436da0b: callq   0x7fe5bc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fe5c436da10: pop     %r11
         ↘  0x00007fe5c436da12: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.59%     0x00007fe5c436da16: mov     0xc(%rsp),%ebx
            0x00007fe5c436da1a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007fe5c436dda8
            0x00007fe5c436da1e: mov     0x10(%rsp),%r9d
            0x00007fe5c436da23: cmp     %r11d,%r9d
            0x00007fe5c436da26: jnb     0x7fe5c436dc10
  0.74%     0x00007fe5c436da2c: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007fe5c436da2f: lea     0x10(%rbx,%r9,4),%r14
            0x00007fe5c436da34: cmpb    $0x0,0x30(%r15)
            0x00007fe5c436da39: jne     0x7fe5c436db26
  0.59%     0x00007fe5c436da3f: mov     %r10,%r11
            0x00007fe5c436da42: mov     %r10,%r8
            0x00007fe5c436da45: mov     %r8d,(%r14)
            0x00007fe5c436da48: mov     %r14,%r10
  0.69%     0x00007fe5c436da4b: xor     %r10,%r11
            0x00007fe5c436da4e: shr     $0x14,%r11
            0x00007fe5c436da52: test    %r11,%r11
            0x00007fe5c436da55: je      0x7fe5c436d7e0
            0x00007fe5c436da5b: shr     $0x9,%r10
            0x00007fe5c436da5f: movabs  $0x7fe5d9a38000,%rdi
            0x00007fe5c436da69: add     %r10,%rdi
            0x00007fe5c436da6c: cmpb    $0x20,(%rdi)
            0x00007fe5c436da6f: je      0x7fe5c436d7e0
            0x00007fe5c436da75: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 15.73%  <total for region 2>

....[Hottest Regions]...............................................................................
 24.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (262 bytes) 
 15.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (109 bytes) 
  6.16%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 536 (167 bytes) 
  6.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 543 (191 bytes) 
  5.42%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 (141 bytes) 
  5.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 (146 bytes) 
  3.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (58 bytes) 
  3.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 (104 bytes) 
  3.21%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  2.66%   [kernel.kallsyms]  native_write_msr (5 bytes) 
  2.47%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 546 (32 bytes) 
  1.82%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 (23 bytes) 
  1.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 (17 bytes) 
  1.38%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 547 (27 bytes) 
  1.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (0 bytes) 
  0.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (179 bytes) 
  0.69%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 536 (3 bytes) 
  0.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (54 bytes) 
  0.44%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.39%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 586 (87 bytes) 
 12.03%  <...other 163 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 47.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 
  9.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 
  7.25%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 
  6.85%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 536 
  6.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 543 
  3.21%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  2.66%   [kernel.kallsyms]  native_write_msr 
  2.47%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 546 
  1.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 
  1.38%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 547 
  0.54%        libc-2.31.so  malloc 
  0.44%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.39%        libc-2.31.so  _int_malloc 
  0.39%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 586 
  0.39%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.35%   [kernel.kallsyms]  free_pcppages_bulk 
  0.35%        libc-2.31.so  _int_free 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 559 
  0.25%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  8.28%  <...other 124 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 86.19%         c2, level 4
  7.45%   [kernel.kallsyms]
  3.01%           libjvm.so
  2.32%        libc-2.31.so
  0.84%    libfcml.so.0.0.0
  0.15%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       617.107          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
