# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1072.783 ns/op
# Warmup Iteration   2: 670.172 ns/op
# Warmup Iteration   3: 617.961 ns/op
# Warmup Iteration   4: 613.934 ns/op
# Warmup Iteration   5: 618.224 ns/op
Iteration   1: 612.693 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  612.693 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115798 total address lines.
Perf output processed (skipped 11.209 seconds):
 Column 1: cycles (1981 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (135 bytes) 

           0x00007fac1836b49a: mov     0x118(%r15),%rax
  0.05%    0x00007fac1836b4a1: mov     %rax,%r11
           0x00007fac1836b4a4: add     $0x28,%r11
  0.56%    0x00007fac1836b4a8: cmp     0x128(%r15),%r11
           0x00007fac1836b4af: jnb     0x7fac1836b7d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fac1836b4b5: mov     %r11,0x118(%r15)
           0x00007fac1836b4bc: prefetchnta 0x100(%r11)
           0x00007fac1836b4c4: mov     0xb8(%r8),%r11
  0.50%    0x00007fac1836b4cb: mov     %r11,(%rax)
           0x00007fac1836b4ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007fac1836b4d5: movl    $0x0,0xc(%rax)
  0.05%    0x00007fac1836b4dc: movq    $0x0,0x10(%rax)
  0.45%    0x00007fac1836b4e4: movq    $0x0,0x18(%rax)
           0x00007fac1836b4ec: movl    $0x0,0x20(%rax)
  0.05%    0x00007fac1836b4f3: mov     %ebp,0x8(%rsp)
           0x00007fac1836b4f7: mov     %r10d,0xc(%rsp)
  0.96%    0x00007fac1836b4fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007fac1836b501: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%    0x00007fac1836b505: mov     %r9d,0x14(%rsp)
           0x00007fac1836b50a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.56%    0x00007fac1836b50d: mov     %rbp,%rsi
           0x00007fac1836b510: nop
           0x00007fac1836b513: callq   0x7fac1836a8f0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.81%    0x00007fac1836b518: movl    $0x0,0x14(%rbp)
           0x00007fac1836b51f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.83%    0x00007fac1836b525: mov     (%rsp),%rsi
  0.05%    0x00007fac1836b529: nop
           0x00007fac1836b52b: callq   0x7fac10ea5120    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fac1836b530: mov     %rax,%rbx
  0.61%    0x00007fac1836b533: cmpb    $0x0,0x30(%r15)
           0x00007fac1836b538: jne     0x7fac1836b73e
           0x00007fac1836b53e: mov     %rbx,%r11
           0x00007fac1836b541: mov     %r11d,0x1c(%rbp)
  0.50%    0x00007fac1836b545: mov     %rbp,%r10
           0x00007fac1836b548: mov     %rbx,%r11
           0x00007fac1836b54b: xor     %r10,%r11
  0.05%    0x00007fac1836b54e: shr     $0x14,%r11
  0.66%    0x00007fac1836b552: test    %r11,%r11
           0x00007fac1836b555: je      0x7fac1836b5af
           0x00007fac1836b557: test    %rbx,%rbx
           0x00007fac1836b55a: je      0x7fac1836b5af
           0x00007fac1836b55c: shr     $0x9,%r10
           0x00007fac1836b560: movabs  $0x7fac2cd31000,%rdi
           0x00007fac1836b56a: add     %r10,%rdi
           0x00007fac1836b56d: cmpb    $0x20,(%rdi)
           0x00007fac1836b570: je      0x7fac1836b5af
           0x00007fac1836b572: mov     0x80(%r15),%r10
           0x00007fac1836b579: mov     0x70(%r15),%r11
....................................................................................................
 24.18%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (33 bytes) 

             0x00007fac1836b64a: mov     %rbx,%r11
         ╭   0x00007fac1836b64d: jmp     0x7fac1836b65c
         │   0x00007fac1836b64f: mov     %rdi,0xfffffffffffffff8(%r10,%r8)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │   0x00007fac1836b654: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │   0x00007fac1836b658: mov     %r8,0x70(%r15)
  0.05%  ↘   0x00007fac1836b65c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.52%      0x00007fac1836b662: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007fac1836b666: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                           ; implicit exception: dispatches to 0x00007fac1836ba28
             0x00007fac1836b66a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.61%      0x00007fac1836b66f: mov     (%rsp),%r10
             0x00007fac1836b673: vmulss  0x14(%r10),%xmm1,%xmm0
             0x00007fac1836b679: vcvttss2si %xmm0,%r8d
  0.61%      0x00007fac1836b67d: cmp     $0x80000000,%r8d
          ╭  0x00007fac1836b684: jne     0x7fac1836b696
          │  0x00007fac1836b686: sub     $0x8,%rsp
          │  0x00007fac1836b68a: vmovss  %xmm0,(%rsp)
          │  0x00007fac1836b68f: callq   0x7fac108b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007fac1836b694: pop     %r8
          ↘  0x00007fac1836b696: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
             0x00007fac1836b69a: mov     0xc(%rsp),%ebx
  0.50%      0x00007fac1836b69e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007fac1836ba34
             0x00007fac1836b6a2: mov     0x10(%rsp),%r9d
....................................................................................................
 13.78%  <total for region 2>

....[Hottest Regions]...............................................................................
 24.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (135 bytes) 
 13.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (33 bytes) 
  7.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 (191 bytes) 
  6.66%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 (160 bytes) 
  4.75%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 (141 bytes) 
  4.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (146 bytes) 
  3.94%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (104 bytes) 
  3.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (70 bytes) 
  3.28%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  3.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (53 bytes) 
  2.27%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.22%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 (23 bytes) 
  2.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (57 bytes) 
  1.77%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 539 (25 bytes) 
  1.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 536 (17 bytes) 
  1.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (71 bytes) 
  0.91%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 548 (24 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (22 bytes) 
  0.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (35 bytes) 
  0.50%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 587 (143 bytes) 
 11.00%  <...other 139 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 
  8.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 
  7.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 
  7.12%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 
  6.97%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 537 
  3.28%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  2.27%   [kernel.kallsyms]  native_write_msr 
  1.77%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 539 
  1.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 536 
  0.91%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 548 
  0.56%        libc-2.31.so  _int_malloc 
  0.50%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 587 
  0.45%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.35%        libc-2.31.so  malloc 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk 
  0.30%          ld-2.31.so  __tls_get_addr 
  0.30%        libc-2.31.so  __vfprintf_internal 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  6.26%  <...other 95 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.69%         c2, level 4
  5.70%   [kernel.kallsyms]
  2.47%        libc-2.31.so
  2.02%           libjvm.so
  0.66%    libfcml.so.0.0.0
  0.30%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       612.693          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
