# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1018.475 ns/op
# Warmup Iteration   2: 643.867 ns/op
# Warmup Iteration   3: 621.227 ns/op
# Warmup Iteration   4: 626.435 ns/op
# Warmup Iteration   5: 628.325 ns/op
Iteration   1: 623.056 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  623.056 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114463 total address lines.
Perf output processed (skipped 11.044 seconds):
 Column 1: cycles (1958 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (231 bytes) 

            0x00007ff30436c042: add     %r12,%r8
            0x00007ff30436c045: xor     %r12,%r12
         ╭  0x00007ff30436c048: jmp     0x7ff30436c099
         │  0x00007ff30436c04a: mov     %r15,%rsi
         │  0x00007ff30436c04d: movabs  $0x7ff31bc81290,%r10
         │  0x00007ff30436c057: callq   %r10
         │  0x00007ff30436c05a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007ff30436c060: mov     0x108(%r15),%r10
  0.61%  │  0x00007ff30436c067: mov     (%rsp),%r11
         │  0x00007ff30436c06b: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007ff30436c06f: mov     0x10(%rsp),%r9d
         │  0x00007ff30436c074: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.41%  │  0x00007ff30436c077: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007ff30436c07c: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007ff30436c07f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007ff30436c638
         │  0x00007ff30436c083: cmp     %r8d,%r9d
         │  0x00007ff30436c086: jnl     0x7ff30436c32d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.61%  │  0x00007ff30436c08c: mov     0x8(%rsp),%ebp
         │  0x00007ff30436c090: mov     0x14(%rsp),%ecx
         │  0x00007ff30436c094: mov     0x18(%rsp),%r8
         ↘  0x00007ff30436c099: mov     0x118(%r15),%rax
  0.31%     0x00007ff30436c0a0: mov     %rax,%r10
            0x00007ff30436c0a3: add     $0x28,%r10
            0x00007ff30436c0a7: cmp     0x128(%r15),%r10
            0x00007ff30436c0ae: jnb     0x7ff30436c3d8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff30436c0b4: mov     %r10,0x118(%r15)
  0.56%     0x00007ff30436c0bb: prefetchnta 0x100(%r10)
            0x00007ff30436c0c3: mov     0xb8(%r8),%r10
  0.05%     0x00007ff30436c0ca: mov     %r10,(%rax)
            0x00007ff30436c0cd: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.61%     0x00007ff30436c0d4: movl    $0x0,0xc(%rax)
            0x00007ff30436c0db: movq    $0x0,0x10(%rax)
            0x00007ff30436c0e3: movq    $0x0,0x18(%rax)
            0x00007ff30436c0eb: movl    $0x0,0x20(%rax)
  0.46%     0x00007ff30436c0f2: mov     %ebp,0x8(%rsp)
            0x00007ff30436c0f6: mov     %r11d,0xc(%rsp)
            0x00007ff30436c0fb: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007ff30436c100: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.56%     0x00007ff30436c103: mov     %ecx,0x14(%rsp)
            0x00007ff30436c107: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007ff30436c10a: mov     %rbp,%rsi
            0x00007ff30436c10d: nop
  0.51%     0x00007ff30436c10f: callq   0x7ff2fc89d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007ff30436c114: movl    $0x0,0x14(%rbp)
            0x00007ff30436c11b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.16%     0x00007ff30436c121: mov     (%rsp),%rsi
  0.15%     0x00007ff30436c125: nop
            0x00007ff30436c127: callq   0x7ff2fc89d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007ff30436c12c: mov     %rax,%rbx
  0.61%     0x00007ff30436c12f: cmpb    $0x0,0x30(%r15)
            0x00007ff30436c134: jne     0x7ff30436c33d
            0x00007ff30436c13a: mov     %rbx,%r10
            0x00007ff30436c13d: mov     %r10d,0x1c(%rbp)
  0.72%     0x00007ff30436c141: mov     %rbp,%r10
            0x00007ff30436c144: mov     %rbx,%r11
            0x00007ff30436c147: xor     %r10,%r11
            0x00007ff30436c14a: shr     $0x14,%r11
  0.72%     0x00007ff30436c14e: test    %r11,%r11
            0x00007ff30436c151: je      0x7ff30436c1ab
            0x00007ff30436c153: test    %rbx,%rbx
            0x00007ff30436c156: je      0x7ff30436c1ab
            0x00007ff30436c158: shr     $0x9,%r10
            0x00007ff30436c15c: movabs  $0x7ff319aea000,%rdi
            0x00007ff30436c166: add     %r10,%rdi
            0x00007ff30436c169: cmpb    $0x20,(%rdi)
            0x00007ff30436c16c: je      0x7ff30436c1ab
            0x00007ff30436c16e: mov     0x80(%r15),%r10
            0x00007ff30436c175: mov     0x70(%r15),%r11
....................................................................................................
 24.16%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (129 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff30436c250: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff30436c254: mov     %r8,0x70(%r15)
            0x00007ff30436c258: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.74%     0x00007ff30436c25e: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff30436c262: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff30436c61c
            0x00007ff30436c266: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.77%     0x00007ff30436c26b: mov     (%rsp),%r11
            0x00007ff30436c26f: vmulss  0x14(%r11),%xmm0,%xmm1
  0.05%     0x00007ff30436c275: vcvttss2si %xmm1,%r11d
  0.82%     0x00007ff30436c279: cmp     $0x80000000,%r11d
         ╭  0x00007ff30436c280: jne     0x7ff30436c292
         │  0x00007ff30436c282: sub     $0x8,%rsp
         │  0x00007ff30436c286: vmovss  %xmm1,(%rsp)
         │  0x00007ff30436c28b: callq   0x7ff2fc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007ff30436c290: pop     %r11
         ↘  0x00007ff30436c292: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.51%     0x00007ff30436c296: mov     0xc(%rsp),%ebx
            0x00007ff30436c29a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007ff30436c628
            0x00007ff30436c29e: mov     0x10(%rsp),%r9d
            0x00007ff30436c2a3: cmp     %r11d,%r9d
            0x00007ff30436c2a6: jnb     0x7ff30436c490
  0.61%     0x00007ff30436c2ac: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007ff30436c2af: lea     0x10(%rbx,%r9,4),%r14
            0x00007ff30436c2b4: cmpb    $0x0,0x30(%r15)
            0x00007ff30436c2b9: jne     0x7ff30436c3a6
  0.56%     0x00007ff30436c2bf: mov     %r10,%r11
            0x00007ff30436c2c2: mov     %r10,%r8
            0x00007ff30436c2c5: mov     %r8d,(%r14)
            0x00007ff30436c2c8: mov     %r14,%r10
  0.87%     0x00007ff30436c2cb: xor     %r10,%r11
            0x00007ff30436c2ce: shr     $0x14,%r11
            0x00007ff30436c2d2: test    %r11,%r11
            0x00007ff30436c2d5: je      0x7ff30436c060
            0x00007ff30436c2db: shr     $0x9,%r10
  0.05%     0x00007ff30436c2df: movabs  $0x7ff319aea000,%rdi
            0x00007ff30436c2e9: add     %r10,%rdi
            0x00007ff30436c2ec: cmpb    $0x20,(%rdi)
            0x00007ff30436c2ef: je      0x7ff30436c060
            0x00007ff30436c2f5: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff30436c2fc: mov     0x70(%r15),%r11
            0x00007ff30436c300: lock addl $0x0,0xffffffffffffffc0(%rsp)
            0x00007ff30436c306: cmpb    $0x0,(%rdi)
            0x00007ff30436c309: je      0x7ff30436c060
....................................................................................................
 17.98%  <total for region 2>

....[Hottest Regions]...............................................................................
 24.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (231 bytes) 
 17.98%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (129 bytes) 
  7.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 (180 bytes) 
  6.44%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 541 (160 bytes) 
  4.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 548 (146 bytes) 
  4.39%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 532 (141 bytes) 
  3.83%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  3.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (58 bytes) 
  3.32%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 548 (104 bytes) 
  2.55%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 540 (32 bytes) 
  1.94%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 532 (20 bytes) 
  1.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 530 (24 bytes) 
  1.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (94 bytes) 
  1.43%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 531 (16 bytes) 
  1.23%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.12%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 (0 bytes) 
  0.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 548 (7 bytes) 
  0.46%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 541 (0 bytes) 
  0.41%   [kernel.kallsyms]  entry_SYSCALL_64 (24 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (56 bytes) 
 10.47%  <...other 139 warm regions...>
....................................................................................................
 99.85%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 
  8.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 548 
  7.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 
  6.89%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 541 
  6.33%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 532 
  3.83%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  2.55%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 540 
  1.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 530 
  1.43%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 531 
  1.23%   [kernel.kallsyms]  native_write_msr 
  1.12%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.56%        libc-2.31.so  malloc 
  0.56%        libc-2.31.so  malloc_consolidate 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 
  0.41%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 580 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 
  0.26%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.26%        libc-2.31.so  _int_free 
  6.84%  <...other 101 warm methods...>
....................................................................................................
 99.85%  <totals>

....[Distribution by Source]........................................................................
 88.25%         c2, level 4
  5.57%   [kernel.kallsyms]
  2.45%           libjvm.so
  2.45%        libc-2.31.so
  0.92%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%   libhsdis.so.0.0.0
  0.05%  libpthread-2.31.so
....................................................................................................
 99.85%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       623.056          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
