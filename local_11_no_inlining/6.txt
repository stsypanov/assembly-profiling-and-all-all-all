# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1092.099 ns/op
# Warmup Iteration   2: 697.314 ns/op
# Warmup Iteration   3: 618.082 ns/op
# Warmup Iteration   4: 613.037 ns/op
# Warmup Iteration   5: 619.991 ns/op
Iteration   1: 615.511 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  615.511 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115676 total address lines.
Perf output processed (skipped 11.053 seconds):
 Column 1: cycles (1986 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (135 bytes) 

           0x00007f900836a39a: mov     0x118(%r15),%rax
           0x00007f900836a3a1: mov     %rax,%r11
           0x00007f900836a3a4: add     $0x28,%r11
  0.45%    0x00007f900836a3a8: cmp     0x128(%r15),%r11
           0x00007f900836a3af: jnb     0x7f900836a6d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f900836a3b5: mov     %r11,0x118(%r15)
           0x00007f900836a3bc: prefetchnta 0x100(%r11)
           0x00007f900836a3c4: mov     0xb8(%r8),%r11
  0.20%    0x00007f900836a3cb: mov     %r11,(%rax)
           0x00007f900836a3ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007f900836a3d5: movl    $0x0,0xc(%rax)
  0.05%    0x00007f900836a3dc: movq    $0x0,0x10(%rax)
  0.45%    0x00007f900836a3e4: movq    $0x0,0x18(%rax)
           0x00007f900836a3ec: movl    $0x0,0x20(%rax)
           0x00007f900836a3f3: mov     %ebp,0x8(%rsp)
           0x00007f900836a3f7: mov     %r10d,0xc(%rsp)
  0.60%    0x00007f900836a3fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007f900836a401: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f900836a405: mov     %r9d,0x14(%rsp)
           0x00007f900836a40a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.55%    0x00007f900836a40d: mov     %rbp,%rsi
           0x00007f900836a410: nop
  0.10%    0x00007f900836a413: callq   0x7f9008369a70    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.65%    0x00007f900836a418: movl    $0x0,0x14(%rbp)
           0x00007f900836a41f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.03%    0x00007f900836a425: mov     (%rsp),%rsi
  0.20%    0x00007f900836a429: nop
           0x00007f900836a42b: callq   0x7f9000ea8ba0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f900836a430: mov     %rax,%rbx
  0.30%    0x00007f900836a433: cmpb    $0x0,0x30(%r15)
           0x00007f900836a438: jne     0x7f900836a63e
           0x00007f900836a43e: mov     %rbx,%r11
           0x00007f900836a441: mov     %r11d,0x1c(%rbp)
  0.76%    0x00007f900836a445: mov     %rbp,%r10
           0x00007f900836a448: mov     %rbx,%r11
           0x00007f900836a44b: xor     %r10,%r11
           0x00007f900836a44e: shr     $0x14,%r11
  0.45%    0x00007f900836a452: test    %r11,%r11
           0x00007f900836a455: je      0x7f900836a4af
           0x00007f900836a457: test    %rbx,%rbx
           0x00007f900836a45a: je      0x7f900836a4af
           0x00007f900836a45c: shr     $0x9,%r10
           0x00007f900836a460: movabs  $0x7f901e0d0000,%rdi
           0x00007f900836a46a: add     %r10,%rdi
           0x00007f900836a46d: cmpb    $0x20,(%rdi)
           0x00007f900836a470: je      0x7f900836a4af
           0x00007f900836a472: mov     0x80(%r15),%r10
           0x00007f900836a479: mov     0x70(%r15),%r11
....................................................................................................
 22.36%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f900836a554: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f900836a558: mov     %r8,0x70(%r15)
            0x00007f900836a55c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.54%     0x00007f900836a562: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f900836a566: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f900836a928
  0.05%     0x00007f900836a56a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.55%     0x00007f900836a56f: mov     (%rsp),%r10
            0x00007f900836a573: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f900836a579: vcvttss2si %xmm0,%r8d
  0.60%     0x00007f900836a57d: cmp     $0x80000000,%r8d
         ╭  0x00007f900836a584: jne     0x7f900836a596
         │  0x00007f900836a586: sub     $0x8,%rsp
         │  0x00007f900836a58a: vmovss  %xmm0,(%rsp)
         │  0x00007f900836a58f: callq   0x7f90008b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f900836a594: pop     %r8
         ↘  0x00007f900836a596: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f900836a59a: mov     0xc(%rsp),%ebx
  0.55%     0x00007f900836a59e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007f900836a934
            0x00007f900836a5a2: mov     0x10(%rsp),%r9d
....................................................................................................
 13.75%  <total for region 2>

....[Hottest Regions]...............................................................................
 22.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (135 bytes) 
 13.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (27 bytes) 
  6.55%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (167 bytes) 
  6.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 (191 bytes) 
  5.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (146 bytes) 
  4.53%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 542 (141 bytes) 
  4.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (58 bytes) 
  4.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (104 bytes) 
  3.68%         c2, level 4  java.lang.Object::&lt;init&gt;, version 28 (27 bytes) 
  3.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (53 bytes) 
  2.06%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (57 bytes) 
  1.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 541 (17 bytes) 
  1.91%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 542 (23 bytes) 
  1.76%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 (24 bytes) 
  1.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (56 bytes) 
  0.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (7 bytes) 
  0.70%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 (0 bytes) 
  0.65%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 562 (20 bytes) 
  0.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (100 bytes) 
 11.68%  <...other 156 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 
 10.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 
  7.25%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 551 
  6.45%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 542 
  6.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 
  3.68%         c2, level 4  java.lang.Object::&lt;init&gt;, version 28 
  2.06%   [kernel.kallsyms]  native_write_msr 
  1.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 541 
  1.76%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 
  0.65%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 562 
  0.60%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 590 
  0.55%        libc-2.31.so  malloc 
  0.50%        libc-2.31.so  _int_free 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 563 
  0.30%           libjvm.so  SpinPause 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.25%           libjvm.so  fileStream::write 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk 
  7.25%  <...other 113 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 88.17%         c2, level 4
  5.19%   [kernel.kallsyms]
  3.27%           libjvm.so
  2.06%        libc-2.31.so
  0.76%    libfcml.so.0.0.0
  0.30%         interpreter
  0.15%  libpthread-2.31.so
  0.05%         classes.jsa
  0.05%      perf-52500.map
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       615.511          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
