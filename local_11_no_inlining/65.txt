# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1180.743 ns/op
# Warmup Iteration   2: 662.266 ns/op
# Warmup Iteration   3: 616.425 ns/op
# Warmup Iteration   4: 616.608 ns/op
# Warmup Iteration   5: 617.043 ns/op
Iteration   1: 614.357 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  614.357 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115441 total address lines.
Perf output processed (skipped 11.128 seconds):
 Column 1: cycles (1943 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (223 bytes) 

            0x00007faf9436c5b4: lea     (%r9,%r10,8),%r9
         ╭  0x00007faf9436c5b8: jmp     0x7faf9436c600
         │  0x00007faf9436c5ba: mov     %r15,%rsi
         │  0x00007faf9436c5bd: movabs  $0x7fafaae65290,%r10
         │  0x00007faf9436c5c7: callq   %r10
         │  0x00007faf9436c5ca: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007faf9436c5d0: mov     0x108(%r15),%r10
         │  0x00007faf9436c5d7: mov     (%rsp),%r11
  0.72%  │  0x00007faf9436c5db: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007faf9436c5df: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007faf9436c5e1: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007faf9436c5e4: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007faf9436cba8
  0.36%  │  0x00007faf9436c5e8: cmp     %r11d,%ebp
         │  0x00007faf9436c5eb: jnl     0x7faf9436c899    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007faf9436c5f1: mov     0x14(%rsp),%r11d
         │  0x00007faf9436c5f6: mov     0x18(%rsp),%r9
         │  0x00007faf9436c5fb: mov     0xc(%rsp),%r13d
  0.36%  ↘  0x00007faf9436c600: mov     0x118(%r15),%rax
  0.05%     0x00007faf9436c607: mov     %rax,%r10
            0x00007faf9436c60a: add     $0x28,%r10
            0x00007faf9436c60e: cmp     0x128(%r15),%r10
            0x00007faf9436c615: jnb     0x7faf9436c944    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.57%     0x00007faf9436c61b: mov     %r10,0x118(%r15)
  0.05%     0x00007faf9436c622: prefetchnta 0x100(%r10)
  0.05%     0x00007faf9436c62a: mov     0xb8(%r9),%r10
  0.05%     0x00007faf9436c631: mov     %r10,(%rax)
  0.41%     0x00007faf9436c634: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007faf9436c63b: movl    $0x0,0xc(%rax)
            0x00007faf9436c642: movq    $0x0,0x10(%rax)
            0x00007faf9436c64a: movq    $0x0,0x18(%rax)
  0.51%     0x00007faf9436c652: movl    $0x0,0x20(%rax)
            0x00007faf9436c659: mov     %ebp,0x8(%rsp)
  0.10%     0x00007faf9436c65d: mov     %r13d,0xc(%rsp)
            0x00007faf9436c662: mov     %r8d,0x10(%rsp)
  0.62%     0x00007faf9436c667: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.10%     0x00007faf9436c66c: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007faf9436c670: mov     %r11d,0x14(%rsp)
            0x00007faf9436c675: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.67%     0x00007faf9436c678: mov     %rbp,%rsi
  0.05%     0x00007faf9436c67b: callq   0x7faf9436acf0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007faf9436c680: movl    $0x0,0x14(%rbp)
  0.46%     0x00007faf9436c687: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.28%     0x00007faf9436c68d: mov     (%rsp),%rsi
            0x00007faf9436c691: nop
            0x00007faf9436c693: callq   0x7faf8cea6ca0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007faf9436c698: mov     %rax,%rbx
  0.82%     0x00007faf9436c69b: cmpb    $0x0,0x30(%r15)
            0x00007faf9436c6a0: jne     0x7faf9436c8a9
            0x00007faf9436c6a6: mov     %rbx,%r10
            0x00007faf9436c6a9: mov     %r10d,0x1c(%rbp)
  0.41%     0x00007faf9436c6ad: mov     %rbp,%r10
  0.05%     0x00007faf9436c6b0: mov     %rbx,%r11
            0x00007faf9436c6b3: xor     %r10,%r11
            0x00007faf9436c6b6: shr     $0x14,%r11
  0.72%     0x00007faf9436c6ba: test    %r11,%r11
            0x00007faf9436c6bd: je      0x7faf9436c717
            0x00007faf9436c6bf: test    %rbx,%rbx
            0x00007faf9436c6c2: je      0x7faf9436c717
            0x00007faf9436c6c4: shr     $0x9,%r10
            0x00007faf9436c6c8: movabs  $0x7fafa8cce000,%rdi
            0x00007faf9436c6d2: add     %r10,%rdi
            0x00007faf9436c6d5: cmpb    $0x20,(%rdi)
            0x00007faf9436c6d8: je      0x7faf9436c717
            0x00007faf9436c6da: mov     0x80(%r15),%r10
            0x00007faf9436c6e1: mov     0x70(%r15),%r11
....................................................................................................
 27.48%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007faf9436c7bc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007faf9436c7c0: mov     %r8,0x70(%r15)
            0x00007faf9436c7c4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.18%     0x00007faf9436c7ca: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007faf9436c7ce: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007faf9436cb8c
            0x00007faf9436c7d2: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.46%     0x00007faf9436c7d7: mov     (%rsp),%r11
            0x00007faf9436c7db: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007faf9436c7e1: vcvttss2si %xmm1,%r11d
  0.46%     0x00007faf9436c7e5: cmp     $0x80000000,%r11d
         ╭  0x00007faf9436c7ec: jne     0x7faf9436c7fe
         │  0x00007faf9436c7ee: sub     $0x8,%rsp
         │  0x00007faf9436c7f2: vmovss  %xmm1,(%rsp)
         │  0x00007faf9436c7f7: callq   0x7faf8c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007faf9436c7fc: pop     %r11
         ↘  0x00007faf9436c7fe: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007faf9436c802: mov     0x10(%rsp),%r8d
  0.57%     0x00007faf9436c807: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007faf9436cb98
            0x00007faf9436c80b: mov     0x8(%rsp),%ebp
....................................................................................................
 14.10%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (223 bytes) 
 14.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (27 bytes) 
  7.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 560 (284 bytes) 
  6.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 561 (188 bytes) 
  5.51%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 562 (141 bytes) 
  4.27%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (99 bytes) 
  4.01%         c2, level 4  java.lang.Object::&lt;init&gt;, version 25 (27 bytes) 
  2.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (58 bytes) 
  2.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (51 bytes) 
  1.96%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 564 (25 bytes) 
  1.85%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.85%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (30 bytes) 
  1.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 544 (17 bytes) 
  1.75%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 567 (27 bytes) 
  1.70%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 562 (20 bytes) 
  1.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (0 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 560 (19 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 (52 bytes) 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 594 (74 bytes) 
  0.51%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (0 bytes) 
 10.19%  <...other 129 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 557 
  8.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 560 
  7.21%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 562 
  6.64%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 
  6.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 561 
  4.01%         c2, level 4  java.lang.Object::&lt;init&gt;, version 25 
  1.96%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 564 
  1.85%   [kernel.kallsyms]  native_write_msr 
  1.75%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 567 
  1.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 544 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 594 
  0.57%        libc-2.31.so  malloc_consolidate 
  0.46%        libc-2.31.so  malloc 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 569 
  0.31%        libc-2.31.so  _int_malloc 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 566 
  0.26%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%   [kernel.kallsyms]  release_pages 
  0.26%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  6.07%  <...other 90 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.71%         c2, level 4
  5.46%   [kernel.kallsyms]
  2.21%           libjvm.so
  1.80%        libc-2.31.so
  0.57%    libfcml.so.0.0.0
  0.05%          ld-2.31.so
  0.05%         c1, level 3
  0.05%  libpthread-2.31.so
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       614.357          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
