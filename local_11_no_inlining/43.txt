# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1057.132 ns/op
# Warmup Iteration   2: 662.566 ns/op
# Warmup Iteration   3: 625.814 ns/op
# Warmup Iteration   4: 628.047 ns/op
# Warmup Iteration   5: 639.643 ns/op
Iteration   1: 622.022 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  622.022 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 114434 total address lines.
Perf output processed (skipped 11.006 seconds):
 Column 1: cycles (1932 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (218 bytes) 

           0x00007fa118367f47: mov     %r15,%rsi
           0x00007fa118367f4a: movabs  $0x7fa12d1e1290,%r10
           0x00007fa118367f54: callq   %r10
           0x00007fa118367f57: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fa118367f60: mov     0x108(%r15),%r10
           0x00007fa118367f67: mov     0x10(%rsp),%r11
           0x00007fa118367f6c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.57%    0x00007fa118367f70: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fa118367f72: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007fa118367f75: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fa118368534
           0x00007fa118367f79: cmp     %r10d,%ebp
           0x00007fa118367f7c: jnl     0x7fa118368227    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.67%    0x00007fa118367f82: mov     0xc(%rsp),%r10d
           0x00007fa118367f87: mov     0x18(%rsp),%r8
           0x00007fa118367f8c: mov     0x8(%rsp),%r13d
  0.05%    0x00007fa118367f91: mov     0x118(%r15),%rax
  0.67%    0x00007fa118367f98: mov     %rax,%r11
           0x00007fa118367f9b: add     $0x28,%r11
           0x00007fa118367f9f: cmp     0x128(%r15),%r11
           0x00007fa118367fa6: jnb     0x7fa1183682d3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fa118367fac: mov     %r11,0x118(%r15)
  0.67%    0x00007fa118367fb3: prefetchnta 0x100(%r11)
           0x00007fa118367fbb: mov     0xb8(%r8),%r11
           0x00007fa118367fc2: mov     %r11,(%rax)
  0.05%    0x00007fa118367fc5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.57%    0x00007fa118367fcc: movl    $0x0,0xc(%rax)
           0x00007fa118367fd3: movq    $0x0,0x10(%rax)
           0x00007fa118367fdb: movq    $0x0,0x18(%rax)
           0x00007fa118367fe3: movl    $0x0,0x20(%rax)
  0.41%    0x00007fa118367fea: mov     %ebp,(%rsp)
           0x00007fa118367fed: mov     %r13d,0x8(%rsp)
           0x00007fa118367ff2: mov     %ecx,0x4(%rsp)
           0x00007fa118367ff6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.47%    0x00007fa118367ffb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007fa118367fff: mov     %r10d,0xc(%rsp)
           0x00007fa118368004: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%    0x00007fa118368007: mov     %rbp,%rsi
  0.67%    0x00007fa11836800a: nop
           0x00007fa11836800b: callq   0x7fa118367670    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.10%    0x00007fa118368010: movl    $0x0,0x14(%rbp)
  0.10%    0x00007fa118368017: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.41%    0x00007fa11836801d: mov     0x10(%rsp),%rsi
  0.05%    0x00007fa118368022: nop
           0x00007fa118368023: callq   0x7fa110ea6520    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fa118368028: mov     %rax,%rbx
  0.52%    0x00007fa11836802b: cmpb    $0x0,0x30(%r15)
           0x00007fa118368030: jne     0x7fa118368237
           0x00007fa118368036: mov     %rbx,%r11
           0x00007fa118368039: mov     %r11d,0x1c(%rbp)
  0.72%    0x00007fa11836803d: mov     %rbp,%r10
           0x00007fa118368040: mov     %rbx,%r11
           0x00007fa118368043: xor     %r10,%r11
           0x00007fa118368046: shr     $0x14,%r11
  0.62%    0x00007fa11836804a: test    %r11,%r11
           0x00007fa11836804d: je      0x7fa1183680a7
           0x00007fa11836804f: test    %rbx,%rbx
           0x00007fa118368052: je      0x7fa1183680a7
           0x00007fa118368054: shr     $0x9,%r10
           0x00007fa118368058: movabs  $0x7fa10b800000,%rdi
           0x00007fa118368062: add     %r10,%rdi
           0x00007fa118368065: cmpb    $0x20,(%rdi)
           0x00007fa118368068: je      0x7fa1183680a7
           0x00007fa11836806a: mov     0x80(%r15),%r10
           0x00007fa118368071: mov     0x70(%r15),%r11
....................................................................................................
 26.50%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa11836814c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa118368150: mov     %r8,0x70(%r15)
            0x00007fa118368154: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.41%     0x00007fa11836815a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fa11836815e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa118368514
            0x00007fa118368162: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.57%     0x00007fa118368167: mov     0x10(%rsp),%r11
            0x00007fa11836816c: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007fa118368172: vcvttss2si %xmm0,%r8d
  0.52%     0x00007fa118368176: cmp     $0x80000000,%r8d
         â­  0x00007fa11836817d: jne     0x7fa11836818f
         â  0x00007fa11836817f: sub     $0x8,%rsp
         â  0x00007fa118368183: vmovss  %xmm0,(%rsp)
         â  0x00007fa118368188: callq   0x7fa1108b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fa11836818d: pop     %r8
         â  0x00007fa11836818f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa118368193: mov     0x4(%rsp),%r9d
  0.52%     0x00007fa118368198: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fa118368520
            0x00007fa11836819c: mov     (%rsp),%ebp
....................................................................................................
 14.54%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (218 bytes) 
 14.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (28 bytes) 
  6.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 552 (191 bytes) 
  5.28%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (156 bytes) 
  4.92%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (141 bytes) 
  4.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (146 bytes) 
  4.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (65 bytes) 
  4.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (104 bytes) 
  3.31%         c2, level 4  java.lang.Object::&lt;init&gt;, version 25 (27 bytes) 
  2.80%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (23 bytes) 
  2.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (52 bytes) 
  2.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 (17 bytes) 
  1.86%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 554 (32 bytes) 
  1.50%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 (27 bytes) 
  1.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (0 bytes) 
  1.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (154 bytes) 
  0.93%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (6 bytes) 
  0.57%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (7 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (10 bytes) 
 10.25%  <...other 132 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 
  9.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 
  7.71%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 
  6.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 552 
  5.85%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 
  3.31%         c2, level 4  java.lang.Object::&lt;init&gt;, version 25 
  2.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 
  1.86%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 554 
  1.50%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 553 
  0.93%   [kernel.kallsyms]  native_write_msr 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 583 
  0.52%        libc-2.31.so  _int_malloc 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.36%        libc-2.31.so  malloc 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%        libc-2.31.so  _int_free 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 
  0.26%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  5.80%  <...other 88 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.48%         c2, level 4
  3.99%   [kernel.kallsyms]
  2.48%        libc-2.31.so
  1.97%           libjvm.so
  0.88%    libfcml.so.0.0.0
  0.16%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       622.022          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
