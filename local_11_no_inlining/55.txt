# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1170.871 ns/op
# Warmup Iteration   2: 632.292 ns/op
# Warmup Iteration   3: 620.726 ns/op
# Warmup Iteration   4: 618.625 ns/op
# Warmup Iteration   5: 615.251 ns/op
Iteration   1: 614.679 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  614.679 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 113830 total address lines.
Perf output processed (skipped 11.111 seconds):
 Column 1: cycles (1934 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (231 bytes) 

            0x00007efea836b342: add     %r12,%r8
            0x00007efea836b345: xor     %r12,%r12
         ╭  0x00007efea836b348: jmp     0x7efea836b399
         │  0x00007efea836b34a: mov     %r15,%rsi
         │  0x00007efea836b34d: movabs  $0x7efebf099290,%r10
         │  0x00007efea836b357: callq   %r10
         │  0x00007efea836b35a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007efea836b360: mov     0x108(%r15),%r10
  0.57%  │  0x00007efea836b367: mov     (%rsp),%r11
         │  0x00007efea836b36b: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007efea836b36f: mov     0x10(%rsp),%r9d
         │  0x00007efea836b374: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  1.14%  │  0x00007efea836b377: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007efea836b37c: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
  0.05%  │  0x00007efea836b37f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007efea836b938
         │  0x00007efea836b383: cmp     %r8d,%r9d
         │  0x00007efea836b386: jnl     0x7efea836b62d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.67%  │  0x00007efea836b38c: mov     0x8(%rsp),%ebp
         │  0x00007efea836b390: mov     0x14(%rsp),%ecx
         │  0x00007efea836b394: mov     0x18(%rsp),%r8
         ↘  0x00007efea836b399: mov     0x118(%r15),%rax
  0.05%     0x00007efea836b3a0: mov     %rax,%r10
            0x00007efea836b3a3: add     $0x28,%r10
            0x00007efea836b3a7: cmp     0x128(%r15),%r10
            0x00007efea836b3ae: jnb     0x7efea836b6d8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efea836b3b4: mov     %r10,0x118(%r15)
  0.72%     0x00007efea836b3bb: prefetchnta 0x100(%r10)
            0x00007efea836b3c3: mov     0xb8(%r8),%r10
  0.05%     0x00007efea836b3ca: mov     %r10,(%rax)
            0x00007efea836b3cd: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.52%     0x00007efea836b3d4: movl    $0x0,0xc(%rax)
            0x00007efea836b3db: movq    $0x0,0x10(%rax)
            0x00007efea836b3e3: movq    $0x0,0x18(%rax)
            0x00007efea836b3eb: movl    $0x0,0x20(%rax)
  0.62%     0x00007efea836b3f2: mov     %ebp,0x8(%rsp)
            0x00007efea836b3f6: mov     %r11d,0xc(%rsp)
  0.05%     0x00007efea836b3fb: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007efea836b400: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.72%     0x00007efea836b403: mov     %ecx,0x14(%rsp)
            0x00007efea836b407: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efea836b40a: mov     %rbp,%rsi
            0x00007efea836b40d: nop
  0.62%     0x00007efea836b40f: callq   0x7efea0ea1f00    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007efea836b414: movl    $0x0,0x14(%rbp)
            0x00007efea836b41b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.48%     0x00007efea836b421: mov     (%rsp),%rsi
            0x00007efea836b425: nop
            0x00007efea836b427: callq   0x7efea836b99e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007efea836b42c: mov     %rax,%rbx
  0.83%     0x00007efea836b42f: cmpb    $0x0,0x30(%r15)
  0.05%     0x00007efea836b434: jne     0x7efea836b63d
            0x00007efea836b43a: mov     %rbx,%r10
            0x00007efea836b43d: mov     %r10d,0x1c(%rbp)
  0.36%     0x00007efea836b441: mov     %rbp,%r10
            0x00007efea836b444: mov     %rbx,%r11
            0x00007efea836b447: xor     %r10,%r11
            0x00007efea836b44a: shr     $0x14,%r11
  0.52%     0x00007efea836b44e: test    %r11,%r11
            0x00007efea836b451: je      0x7efea836b4ab
            0x00007efea836b453: test    %rbx,%rbx
            0x00007efea836b456: je      0x7efea836b4ab
            0x00007efea836b458: shr     $0x9,%r10
            0x00007efea836b45c: movabs  $0x7efebcf02000,%rdi
            0x00007efea836b466: add     %r10,%rdi
            0x00007efea836b469: cmpb    $0x20,(%rdi)
            0x00007efea836b46c: je      0x7efea836b4ab
            0x00007efea836b46e: mov     0x80(%r15),%r10
            0x00007efea836b475: mov     0x70(%r15),%r11
....................................................................................................
 28.02%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efea836b550: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efea836b554: mov     %r8,0x70(%r15)
            0x00007efea836b558: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.15%     0x00007efea836b55e: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efea836b562: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007efea836b91c
            0x00007efea836b566: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.62%     0x00007efea836b56b: mov     (%rsp),%r11
            0x00007efea836b56f: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007efea836b575: vcvttss2si %xmm1,%r11d
  0.57%     0x00007efea836b579: cmp     $0x80000000,%r11d
         ╭  0x00007efea836b580: jne     0x7efea836b592
         │  0x00007efea836b582: sub     $0x8,%rsp
         │  0x00007efea836b586: vmovss  %xmm1,(%rsp)
         │  0x00007efea836b58b: callq   0x7efea08b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007efea836b590: pop     %r11
         ↘  0x00007efea836b592: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.72%     0x00007efea836b596: mov     0xc(%rsp),%ebx
            0x00007efea836b59a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007efea836b928
            0x00007efea836b59e: mov     0x10(%rsp),%r9d
            0x00007efea836b5a3: cmp     %r11d,%r9d
            0x00007efea836b5a6: jnb     0x7efea836b790
  0.52%     0x00007efea836b5ac: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007efea836b5af: lea     0x10(%rbx,%r9,4),%r14
            0x00007efea836b5b4: cmpb    $0x0,0x30(%r15)
            0x00007efea836b5b9: jne     0x7efea836b6a6
  0.83%     0x00007efea836b5bf: mov     %r10,%r11
            0x00007efea836b5c2: mov     %r10,%r8
            0x00007efea836b5c5: mov     %r8d,(%r14)
            0x00007efea836b5c8: mov     %r14,%r10
  0.78%     0x00007efea836b5cb: xor     %r10,%r11
            0x00007efea836b5ce: shr     $0x14,%r11
            0x00007efea836b5d2: test    %r11,%r11
            0x00007efea836b5d5: je      0x7efea836b360
            0x00007efea836b5db: shr     $0x9,%r10
            0x00007efea836b5df: movabs  $0x7efebcf02000,%rdi
            0x00007efea836b5e9: add     %r10,%rdi
            0x00007efea836b5ec: cmpb    $0x20,(%rdi)
            0x00007efea836b5ef: je      0x7efea836b360
            0x00007efea836b5f5: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 16.18%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (231 bytes) 
 16.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (109 bytes) 
  8.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 (284 bytes) 
  6.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 (181 bytes) 
  5.89%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (167 bytes) 
  4.91%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (141 bytes) 
  4.60%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (58 bytes) 
  3.57%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  1.91%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (23 bytes) 
  1.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (57 bytes) 
  1.60%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 559 (32 bytes) 
  1.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 540 (17 bytes) 
  1.34%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 558 (17 bytes) 
  0.83%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (120 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (79 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 (10 bytes) 
  0.52%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (8 bytes) 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  9.31%  <...other 127 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 52.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 
  9.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 
  6.83%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 
  6.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 
  6.41%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 
  3.57%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  1.60%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 559 
  1.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 540 
  1.34%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 558 
  0.83%   [kernel.kallsyms]  native_write_msr 
  0.62%        libc-2.31.so  malloc 
  0.52%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 590 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%           libjvm.so  SpinPause 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 561 
  0.31%   [kernel.kallsyms]  release_pages 
  0.31%        libc-2.31.so  _int_free 
  0.26%        libc-2.31.so  _int_malloc 
  5.53%  <...other 88 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.85%         c2, level 4
  4.19%   [kernel.kallsyms]
  2.22%           libjvm.so
  1.86%        libc-2.31.so
  0.52%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%         classes.jsa
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%              [vdso]
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       614.679          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
