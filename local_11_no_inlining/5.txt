# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1103.549 ns/op
# Warmup Iteration   2: 654.736 ns/op
# Warmup Iteration   3: 620.736 ns/op
# Warmup Iteration   4: 620.444 ns/op
# Warmup Iteration   5: 620.105 ns/op
Iteration   1: 618.586 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  618.586 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114249 total address lines.
Perf output processed (skipped 11.129 seconds):
 Column 1: cycles (1969 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (223 bytes) 

            0x00007efd1c36afb4: lea     (%r9,%r10,8),%r9
         ╭  0x00007efd1c36afb8: jmp     0x7efd1c36b000
         │  0x00007efd1c36afba: mov     %r15,%rsi
         │  0x00007efd1c36afbd: movabs  $0x7efd348d8290,%r10
         │  0x00007efd1c36afc7: callq   %r10
         │  0x00007efd1c36afca: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007efd1c36afd0: mov     0x108(%r15),%r10
         │  0x00007efd1c36afd7: mov     (%rsp),%r11
  0.41%  │  0x00007efd1c36afdb: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007efd1c36afdf: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007efd1c36afe1: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
  0.05%  │  0x00007efd1c36afe4: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007efd1c36b5a8
  0.51%  │  0x00007efd1c36afe8: cmp     %r11d,%ebp
         │  0x00007efd1c36afeb: jnl     0x7efd1c36b299    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007efd1c36aff1: mov     0x14(%rsp),%r11d
         │  0x00007efd1c36aff6: mov     0x18(%rsp),%r9
  0.05%  │  0x00007efd1c36affb: mov     0xc(%rsp),%r13d
  0.56%  ↘  0x00007efd1c36b000: mov     0x118(%r15),%rax
            0x00007efd1c36b007: mov     %rax,%r10
            0x00007efd1c36b00a: add     $0x28,%r10
            0x00007efd1c36b00e: cmp     0x128(%r15),%r10
            0x00007efd1c36b015: jnb     0x7efd1c36b344    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.46%     0x00007efd1c36b01b: mov     %r10,0x118(%r15)
            0x00007efd1c36b022: prefetchnta 0x100(%r10)
            0x00007efd1c36b02a: mov     0xb8(%r9),%r10
            0x00007efd1c36b031: mov     %r10,(%rax)
  0.46%     0x00007efd1c36b034: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%     0x00007efd1c36b03b: movl    $0x0,0xc(%rax)
  0.05%     0x00007efd1c36b042: movq    $0x0,0x10(%rax)
            0x00007efd1c36b04a: movq    $0x0,0x18(%rax)
  0.71%     0x00007efd1c36b052: movl    $0x0,0x20(%rax)
            0x00007efd1c36b059: mov     %ebp,0x8(%rsp)
            0x00007efd1c36b05d: mov     %r13d,0xc(%rsp)
            0x00007efd1c36b062: mov     %r8d,0x10(%rsp)
  0.61%     0x00007efd1c36b067: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.10%     0x00007efd1c36b06c: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efd1c36b070: mov     %r11d,0x14(%rsp)
  0.05%     0x00007efd1c36b075: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.46%     0x00007efd1c36b078: mov     %rbp,%rsi
            0x00007efd1c36b07b: callq   0x7efd14ea7180    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007efd1c36b080: movl    $0x0,0x14(%rbp)
  0.76%     0x00007efd1c36b087: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.17%     0x00007efd1c36b08d: mov     (%rsp),%rsi
            0x00007efd1c36b091: nop
            0x00007efd1c36b093: callq   0x7efd1c36b5fe    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007efd1c36b098: mov     %rax,%rbx
  0.46%     0x00007efd1c36b09b: cmpb    $0x0,0x30(%r15)
            0x00007efd1c36b0a0: jne     0x7efd1c36b2a9
            0x00007efd1c36b0a6: mov     %rbx,%r10
            0x00007efd1c36b0a9: mov     %r10d,0x1c(%rbp)
  0.61%     0x00007efd1c36b0ad: mov     %rbp,%r10
            0x00007efd1c36b0b0: mov     %rbx,%r11
            0x00007efd1c36b0b3: xor     %r10,%r11
            0x00007efd1c36b0b6: shr     $0x14,%r11
  0.71%     0x00007efd1c36b0ba: test    %r11,%r11
            0x00007efd1c36b0bd: je      0x7efd1c36b117
            0x00007efd1c36b0bf: test    %rbx,%rbx
            0x00007efd1c36b0c2: je      0x7efd1c36b117
            0x00007efd1c36b0c4: shr     $0x9,%r10
            0x00007efd1c36b0c8: movabs  $0x7efd32741000,%rdi
            0x00007efd1c36b0d2: add     %r10,%rdi
            0x00007efd1c36b0d5: cmpb    $0x20,(%rdi)
            0x00007efd1c36b0d8: je      0x7efd1c36b117
            0x00007efd1c36b0da: mov     0x80(%r15),%r10
            0x00007efd1c36b0e1: mov     0x70(%r15),%r11
....................................................................................................
 24.23%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efd1c36b1bc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efd1c36b1c0: mov     %r8,0x70(%r15)
            0x00007efd1c36b1c4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.63%     0x00007efd1c36b1ca: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007efd1c36b1ce: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007efd1c36b58c
            0x00007efd1c36b1d2: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.81%     0x00007efd1c36b1d7: mov     (%rsp),%r11
            0x00007efd1c36b1db: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007efd1c36b1e1: vcvttss2si %xmm1,%r11d
  0.51%     0x00007efd1c36b1e5: cmp     $0x80000000,%r11d
         ╭  0x00007efd1c36b1ec: jne     0x7efd1c36b1fe
         │  0x00007efd1c36b1ee: sub     $0x8,%rsp
         │  0x00007efd1c36b1f2: vmovss  %xmm1,(%rsp)
         │  0x00007efd1c36b1f7: callq   0x7efd148b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007efd1c36b1fc: pop     %r11
         ↘  0x00007efd1c36b1fe: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007efd1c36b202: mov     0x10(%rsp),%r8d
  0.66%     0x00007efd1c36b207: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007efd1c36b598
            0x00007efd1c36b20b: mov     0x8(%rsp),%ebp
....................................................................................................
 13.00%  <total for region 2>

....[Hottest Regions]...............................................................................
 24.23%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (223 bytes) 
 13.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 
  6.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 554 (191 bytes) 
  6.50%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (163 bytes) 
  5.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (146 bytes) 
  5.18%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (141 bytes) 
  4.32%         c2, level 4  java.lang.Object::&lt;init&gt;, version 29 (27 bytes) 
  3.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (67 bytes) 
  3.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (104 bytes) 
  2.79%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 545 (25 bytes) 
  2.74%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (51 bytes) 
  1.83%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 (17 bytes) 
  1.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (23 bytes) 
  1.63%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 541 (27 bytes) 
  0.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (0 bytes) 
  0.66%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (0 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (70 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (7 bytes) 
  0.46%           libjvm.so  SpinPause (9 bytes) 
 11.38%  <...other 151 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 45.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 
  9.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 
  7.16%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 
  6.81%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 
  6.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 554 
  4.32%         c2, level 4  java.lang.Object::&lt;init&gt;, version 29 
  2.79%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 545 
  2.74%   [kernel.kallsyms]  native_write_msr 
  1.83%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 
  1.63%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 541 
  0.56%   [kernel.kallsyms]  finish_task_switch 
  0.51%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 587 
  0.46%           libjvm.so  SpinPause 
  0.41%        libc-2.31.so  _int_malloc 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.30%        libc-2.31.so  malloc 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 555 
  0.30%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.25%   [kernel.kallsyms]  __perf_event_task_sched_in 
  7.06%  <...other 105 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.40%         c2, level 4
  7.31%   [kernel.kallsyms]
  2.84%           libjvm.so
  1.78%        libc-2.31.so
  0.51%    libfcml.so.0.0.0
  0.05%         c1, level 1
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       618.586          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
