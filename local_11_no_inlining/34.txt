# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1069.977 ns/op
# Warmup Iteration   2: 671.639 ns/op
# Warmup Iteration   3: 618.689 ns/op
# Warmup Iteration   4: 615.333 ns/op
# Warmup Iteration   5: 617.546 ns/op
Iteration   1: 613.959 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.959 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115655 total address lines.
Perf output processed (skipped 11.164 seconds):
 Column 1: cycles (1914 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (225 bytes) 

            0x00007fea2436bac2: xor     %r12,%r12
         ╭  0x00007fea2436bac5: jmp     0x7fea2436bb11
         │  0x00007fea2436bac7: mov     %r15,%rsi
         │  0x00007fea2436baca: movabs  $0x7fea3ca5d290,%r10
         │  0x00007fea2436bad4: callq   %r10
         │  0x00007fea2436bad7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fea2436bae0: mov     0x108(%r15),%r10
         │  0x00007fea2436bae7: mov     0x10(%rsp),%r11
  0.05%  │  0x00007fea2436baec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.52%  │  0x00007fea2436baf0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fea2436baf2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007fea2436baf5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fea2436c0a8
         │  0x00007fea2436baf9: cmp     %r10d,%ebp
         │  0x00007fea2436bafc: jnl     0x7fea2436bda7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.57%  │  0x00007fea2436bb02: mov     0xc(%rsp),%r10d
         │  0x00007fea2436bb07: mov     0x18(%rsp),%r8
         │  0x00007fea2436bb0c: mov     0x8(%rsp),%r13d
         ↘  0x00007fea2436bb11: mov     0x118(%r15),%rax
  0.52%     0x00007fea2436bb18: mov     %rax,%r11
            0x00007fea2436bb1b: add     $0x28,%r11
            0x00007fea2436bb1f: cmp     0x128(%r15),%r11
            0x00007fea2436bb26: jnb     0x7fea2436be53    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007fea2436bb2c: mov     %r11,0x118(%r15)
  0.68%     0x00007fea2436bb33: prefetchnta 0x100(%r11)
  0.05%     0x00007fea2436bb3b: mov     0xb8(%r8),%r11
            0x00007fea2436bb42: mov     %r11,(%rax)
            0x00007fea2436bb45: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.47%     0x00007fea2436bb4c: movl    $0x0,0xc(%rax)
            0x00007fea2436bb53: movq    $0x0,0x10(%rax)
  0.05%     0x00007fea2436bb5b: movq    $0x0,0x18(%rax)
            0x00007fea2436bb63: movl    $0x0,0x20(%rax)
  0.63%     0x00007fea2436bb6a: mov     %ebp,(%rsp)
            0x00007fea2436bb6d: mov     %r13d,0x8(%rsp)
  0.05%     0x00007fea2436bb72: mov     %ecx,0x4(%rsp)
  0.05%     0x00007fea2436bb76: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.52%     0x00007fea2436bb7b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fea2436bb7f: mov     %r10d,0xc(%rsp)
            0x00007fea2436bb84: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fea2436bb87: mov     %rbp,%rsi
  0.84%     0x00007fea2436bb8a: nop
            0x00007fea2436bb8b: callq   0x7fea2436b1f0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.10%     0x00007fea2436bb90: movl    $0x0,0x14(%rbp)
  0.63%     0x00007fea2436bb97: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.28%     0x00007fea2436bb9d: mov     0x10(%rsp),%rsi
  0.05%     0x00007fea2436bba2: nop
            0x00007fea2436bba3: callq   0x7fea2436c0fe    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fea2436bba8: mov     %rax,%rbx
  0.78%     0x00007fea2436bbab: cmpb    $0x0,0x30(%r15)
            0x00007fea2436bbb0: jne     0x7fea2436bdb7
            0x00007fea2436bbb6: mov     %rbx,%r11
            0x00007fea2436bbb9: mov     %r11d,0x1c(%rbp)
  0.63%     0x00007fea2436bbbd: mov     %rbp,%r10
            0x00007fea2436bbc0: mov     %rbx,%r11
            0x00007fea2436bbc3: xor     %r10,%r11
            0x00007fea2436bbc6: shr     $0x14,%r11
  0.52%     0x00007fea2436bbca: test    %r11,%r11
  0.05%     0x00007fea2436bbcd: je      0x7fea2436bc27
            0x00007fea2436bbcf: test    %rbx,%rbx
            0x00007fea2436bbd2: je      0x7fea2436bc27
            0x00007fea2436bbd4: shr     $0x9,%r10
            0x00007fea2436bbd8: movabs  $0x7fea3a8c6000,%rdi
            0x00007fea2436bbe2: add     %r10,%rdi
            0x00007fea2436bbe5: cmpb    $0x20,(%rdi)
            0x00007fea2436bbe8: je      0x7fea2436bc27
            0x00007fea2436bbea: mov     0x80(%r15),%r10
            0x00007fea2436bbf1: mov     0x70(%r15),%r11
            0x00007fea2436bbf5: lock addl $0x0,0xffffffffffffffc0(%rsp)
....................................................................................................
 27.12%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fea2436bccc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fea2436bcd0: mov     %r8,0x70(%r15)
            0x00007fea2436bcd4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.22%     0x00007fea2436bcda: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fea2436bcde: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fea2436c088
            0x00007fea2436bce2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.84%     0x00007fea2436bce7: mov     0x10(%rsp),%r11
            0x00007fea2436bcec: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007fea2436bcf2: vcvttss2si %xmm0,%r8d
  0.47%     0x00007fea2436bcf6: cmp     $0x80000000,%r8d
         ╭  0x00007fea2436bcfd: jne     0x7fea2436bd0f
         │  0x00007fea2436bcff: sub     $0x8,%rsp
         │  0x00007fea2436bd03: vmovss  %xmm0,(%rsp)
         │  0x00007fea2436bd08: callq   0x7fea1c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fea2436bd0d: pop     %r8
         ↘  0x00007fea2436bd0f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fea2436bd13: mov     0x4(%rsp),%r9d
  0.78%     0x00007fea2436bd18: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fea2436c094
            0x00007fea2436bd1c: mov     (%rsp),%ebp
....................................................................................................
 14.58%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (225 bytes) 
 14.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (28 bytes) 
  6.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 557 (191 bytes) 
  5.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 (146 bytes) 
  5.12%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 556 (144 bytes) 
  4.65%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  4.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (63 bytes) 
  4.02%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 565 (99 bytes) 
  3.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 (104 bytes) 
  2.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (52 bytes) 
  2.56%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 556 (23 bytes) 
  2.14%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 565 (30 bytes) 
  1.93%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 576 (27 bytes) 
  1.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 555 (17 bytes) 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (27 bytes) 
  1.36%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 574 (25 bytes) 
  0.99%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 (0 bytes) 
  0.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (51 bytes) 
  0.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 (48 bytes) 
  9.04%  <...other 119 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 566 
  9.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 571 
  7.68%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 556 
  6.48%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 565 
  6.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 557 
  4.65%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  1.93%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 576 
  1.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 555 
  1.36%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 574 
  0.99%   [kernel.kallsyms]  native_write_msr 
  0.47%        libc-2.31.so  malloc 
  0.42%        libc-2.31.so  malloc_consolidate 
  0.37%        libc-2.31.so  _int_malloc 
  0.37%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 602 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 575 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%        libc-2.31.so  _int_free 
  0.16%           libjvm.so  SpinPause 
  0.16%           libjvm.so  MemAllocator::allocate 
  5.02%  <...other 86 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 91.85%         c2, level 4
  2.72%   [kernel.kallsyms]
  2.46%           libjvm.so
  2.09%        libc-2.31.so
  0.57%    libfcml.so.0.0.0
  0.16%         interpreter
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.959          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
