# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1180.059 ns/op
# Warmup Iteration   2: 646.447 ns/op
# Warmup Iteration   3: 616.484 ns/op
# Warmup Iteration   4: 613.530 ns/op
# Warmup Iteration   5: 616.548 ns/op
Iteration   1: 613.421 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.421 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114373 total address lines.
Perf output processed (skipped 11.168 seconds):
 Column 1: cycles (1975 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (231 bytes) 

            0x00007f75dc36c0c2: add     %r12,%r8
            0x00007f75dc36c0c5: xor     %r12,%r12
         ╭  0x00007f75dc36c0c8: jmp     0x7f75dc36c119
         │  0x00007f75dc36c0ca: mov     %r15,%rsi
         │  0x00007f75dc36c0cd: movabs  $0x7f75f4366290,%r10
         │  0x00007f75dc36c0d7: callq   %r10
         │  0x00007f75dc36c0da: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f75dc36c0e0: mov     0x108(%r15),%r10
  0.61%  │  0x00007f75dc36c0e7: mov     (%rsp),%r11
         │  0x00007f75dc36c0eb: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f75dc36c0ef: mov     0x10(%rsp),%r9d
         │  0x00007f75dc36c0f4: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.71%  │  0x00007f75dc36c0f7: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f75dc36c0fc: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f75dc36c0ff: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f75dc36c6b8
         │  0x00007f75dc36c103: cmp     %r8d,%r9d
         │  0x00007f75dc36c106: jnl     0x7f75dc36c3ad    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.30%  │  0x00007f75dc36c10c: mov     0x8(%rsp),%ebp
         │  0x00007f75dc36c110: mov     0x14(%rsp),%ecx
         │  0x00007f75dc36c114: mov     0x18(%rsp),%r8
         ↘  0x00007f75dc36c119: mov     0x118(%r15),%rax
  0.71%     0x00007f75dc36c120: mov     %rax,%r10
            0x00007f75dc36c123: add     $0x28,%r10
  0.05%     0x00007f75dc36c127: cmp     0x128(%r15),%r10
            0x00007f75dc36c12e: jnb     0x7f75dc36c458    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f75dc36c134: mov     %r10,0x118(%r15)
  0.51%     0x00007f75dc36c13b: prefetchnta 0x100(%r10)
            0x00007f75dc36c143: mov     0xb8(%r8),%r10
  0.10%     0x00007f75dc36c14a: mov     %r10,(%rax)
  0.05%     0x00007f75dc36c14d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.61%     0x00007f75dc36c154: movl    $0x0,0xc(%rax)
            0x00007f75dc36c15b: movq    $0x0,0x10(%rax)
            0x00007f75dc36c163: movq    $0x0,0x18(%rax)
            0x00007f75dc36c16b: movl    $0x0,0x20(%rax)
  0.51%     0x00007f75dc36c172: mov     %ebp,0x8(%rsp)
            0x00007f75dc36c176: mov     %r11d,0xc(%rsp)
            0x00007f75dc36c17b: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f75dc36c180: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.56%     0x00007f75dc36c183: mov     %ecx,0x14(%rsp)
            0x00007f75dc36c187: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f75dc36c18a: mov     %rbp,%rsi
            0x00007f75dc36c18d: nop
  0.71%     0x00007f75dc36c18f: callq   0x7f75d489d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f75dc36c194: movl    $0x0,0x14(%rbp)
            0x00007f75dc36c19b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.53%     0x00007f75dc36c1a1: mov     (%rsp),%rsi
            0x00007f75dc36c1a5: nop
            0x00007f75dc36c1a7: callq   0x7f75d489d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f75dc36c1ac: mov     %rax,%rbx
  0.46%     0x00007f75dc36c1af: cmpb    $0x0,0x30(%r15)
  0.10%     0x00007f75dc36c1b4: jne     0x7f75dc36c3bd
            0x00007f75dc36c1ba: mov     %rbx,%r10
            0x00007f75dc36c1bd: mov     %r10d,0x1c(%rbp)
  0.56%     0x00007f75dc36c1c1: mov     %rbp,%r10
  0.05%     0x00007f75dc36c1c4: mov     %rbx,%r11
            0x00007f75dc36c1c7: xor     %r10,%r11
            0x00007f75dc36c1ca: shr     $0x14,%r11
  0.66%     0x00007f75dc36c1ce: test    %r11,%r11
            0x00007f75dc36c1d1: je      0x7f75dc36c22b
            0x00007f75dc36c1d3: test    %rbx,%rbx
            0x00007f75dc36c1d6: je      0x7f75dc36c22b
            0x00007f75dc36c1d8: shr     $0x9,%r10
            0x00007f75dc36c1dc: movabs  $0x7f75f21cf000,%rdi
            0x00007f75dc36c1e6: add     %r10,%rdi
            0x00007f75dc36c1e9: cmpb    $0x20,(%rdi)
            0x00007f75dc36c1ec: je      0x7f75dc36c22b
            0x00007f75dc36c1ee: mov     0x80(%r15),%r10
            0x00007f75dc36c1f5: mov     0x70(%r15),%r11
....................................................................................................
 25.82%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f75dc36c2d0: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f75dc36c2d4: mov     %r8,0x70(%r15)
            0x00007f75dc36c2d8: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.30%     0x00007f75dc36c2de: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f75dc36c2e2: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f75dc36c69c
            0x00007f75dc36c2e6: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.66%     0x00007f75dc36c2eb: mov     (%rsp),%r11
            0x00007f75dc36c2ef: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f75dc36c2f5: vcvttss2si %xmm1,%r11d
  0.46%     0x00007f75dc36c2f9: cmp     $0x80000000,%r11d
         ╭  0x00007f75dc36c300: jne     0x7f75dc36c312
         │  0x00007f75dc36c302: sub     $0x8,%rsp
         │  0x00007f75dc36c306: vmovss  %xmm1,(%rsp)
         │  0x00007f75dc36c30b: callq   0x7f75d48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f75dc36c310: pop     %r11
  0.05%  ↘  0x00007f75dc36c312: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.66%     0x00007f75dc36c316: mov     0xc(%rsp),%ebx
            0x00007f75dc36c31a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007f75dc36c6a8
            0x00007f75dc36c31e: mov     0x10(%rsp),%r9d
            0x00007f75dc36c323: cmp     %r11d,%r9d
            0x00007f75dc36c326: jnb     0x7f75dc36c510
  0.81%     0x00007f75dc36c32c: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007f75dc36c32f: lea     0x10(%rbx,%r9,4),%r14
            0x00007f75dc36c334: cmpb    $0x0,0x30(%r15)
            0x00007f75dc36c339: jne     0x7f75dc36c426
  0.91%     0x00007f75dc36c33f: mov     %r10,%r11
            0x00007f75dc36c342: mov     %r10,%r8
            0x00007f75dc36c345: mov     %r8d,(%r14)
            0x00007f75dc36c348: mov     %r14,%r10
  0.51%     0x00007f75dc36c34b: xor     %r10,%r11
            0x00007f75dc36c34e: shr     $0x14,%r11
            0x00007f75dc36c352: test    %r11,%r11
            0x00007f75dc36c355: je      0x7f75dc36c0e0
            0x00007f75dc36c35b: shr     $0x9,%r10
            0x00007f75dc36c35f: movabs  $0x7f75f21cf000,%rdi
            0x00007f75dc36c369: add     %r10,%rdi
            0x00007f75dc36c36c: cmpb    $0x20,(%rdi)
            0x00007f75dc36c36f: je      0x7f75dc36c0e0
            0x00007f75dc36c375: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 16.35%  <total for region 2>

....[Hottest Regions]...............................................................................
 25.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (231 bytes) 
 16.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (109 bytes) 
  6.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 (191 bytes) 
  5.62%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 542 (167 bytes) 
  5.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 (146 bytes) 
  5.16%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 538 (141 bytes) 
  4.00%         c2, level 4  java.lang.Object::&lt;init&gt;, version 28 (27 bytes) 
  3.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (58 bytes) 
  3.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 (104 bytes) 
  2.78%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.58%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 548 (35 bytes) 
  2.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 537 (17 bytes) 
  1.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (102 bytes) 
  1.37%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 547 (27 bytes) 
  1.22%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 538 (20 bytes) 
  0.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 (15 bytes) 
  0.76%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 589 (106 bytes) 
  0.51%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 542 (8 bytes) 
  0.35%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.30%   [kernel.kallsyms]  schedule (28 bytes) 
  9.11%  <...other 108 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 
  9.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 557 
  6.38%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 538 
  6.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 
  6.13%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 542 
  4.00%         c2, level 4  java.lang.Object::&lt;init&gt;, version 28 
  2.78%   [kernel.kallsyms]  native_write_msr 
  2.58%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 548 
  2.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 537 
  1.37%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 547 
  0.76%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 589 
  0.61%        libc-2.31.so  malloc 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.35%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.35%        libc-2.31.so  _int_malloc 
  0.30%   [kernel.kallsyms]  schedule 
  0.30%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 559 
  0.30%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  5.42%  <...other 74 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.06%         c2, level 4
  5.97%   [kernel.kallsyms]
  2.28%        libc-2.31.so
  1.72%           libjvm.so
  0.51%    libfcml.so.0.0.0
  0.20%         interpreter
  0.10%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%              [vdso]
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.421          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
