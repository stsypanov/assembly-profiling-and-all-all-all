# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1201.916 ns/op
# Warmup Iteration   2: 626.726 ns/op
# Warmup Iteration   3: 617.518 ns/op
# Warmup Iteration   4: 617.268 ns/op
# Warmup Iteration   5: 617.178 ns/op
Iteration   1: 613.981 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.981 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 114197 total address lines.
Perf output processed (skipped 11.163 seconds):
 Column 1: cycles (1932 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (227 bytes) 

           0x00007fb49036afc5: movabs  $0x7fb4a88fc290,%r10
           0x00007fb49036afcf: callq   %r10
           0x00007fb49036afd2: nopw    0x0(%rax,%rax)
           0x00007fb49036afdc: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fb49036afe0: mov     0x108(%r15),%r11
           0x00007fb49036afe7: mov     (%rsp),%r10
           0x00007fb49036afeb: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.52%    0x00007fb49036afef: mov     0x10(%rsp),%r9d
           0x00007fb49036aff4: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
           0x00007fb49036aff7: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fb49036affc: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
  0.57%    0x00007fb49036afff: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007fb49036b5c4
           0x00007fb49036b003: cmp     %r11d,%r9d
           0x00007fb49036b006: jnl     0x7fb49036b2ae    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
           0x00007fb49036b00c: mov     0x8(%rsp),%ebp
           0x00007fb49036b010: mov     0x14(%rsp),%r9d
  0.62%    0x00007fb49036b015: mov     0x18(%rsp),%r8
  0.05%    0x00007fb49036b01a: mov     0x118(%r15),%rax
           0x00007fb49036b021: mov     %rax,%r11
           0x00007fb49036b024: add     $0x28,%r11
  0.57%    0x00007fb49036b028: cmp     0x128(%r15),%r11
           0x00007fb49036b02f: jnb     0x7fb49036b359    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fb49036b035: mov     %r11,0x118(%r15)
  0.16%    0x00007fb49036b03c: prefetchnta 0x100(%r11)
           0x00007fb49036b044: mov     0xb8(%r8),%r11
  0.83%    0x00007fb49036b04b: mov     %r11,(%rax)
           0x00007fb49036b04e: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007fb49036b055: movl    $0x0,0xc(%rax)
           0x00007fb49036b05c: movq    $0x0,0x10(%rax)
  0.62%    0x00007fb49036b064: movq    $0x0,0x18(%rax)
  0.05%    0x00007fb49036b06c: movl    $0x0,0x20(%rax)
           0x00007fb49036b073: mov     %ebp,0x8(%rsp)
           0x00007fb49036b077: mov     %r10d,0xc(%rsp)
  0.47%    0x00007fb49036b07c: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007fb49036b081: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007fb49036b085: mov     %r9d,0x14(%rsp)
           0x00007fb49036b08a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.52%    0x00007fb49036b08d: mov     %rbp,%rsi
  0.05%    0x00007fb49036b090: nop
  0.05%    0x00007fb49036b093: callq   0x7fb488ea6e80    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.57%    0x00007fb49036b098: movl    $0x0,0x14(%rbp)
           0x00007fb49036b09f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.96%    0x00007fb49036b0a5: mov     (%rsp),%rsi
  0.05%    0x00007fb49036b0a9: nop
           0x00007fb49036b0ab: callq   0x7fb49036b61e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fb49036b0b0: mov     %rax,%rbx
  0.67%    0x00007fb49036b0b3: cmpb    $0x0,0x30(%r15)
           0x00007fb49036b0b8: jne     0x7fb49036b2be
           0x00007fb49036b0be: mov     %rbx,%r11
           0x00007fb49036b0c1: mov     %r11d,0x1c(%rbp)
  0.83%    0x00007fb49036b0c5: mov     %rbp,%r10
           0x00007fb49036b0c8: mov     %rbx,%r11
           0x00007fb49036b0cb: xor     %r10,%r11
           0x00007fb49036b0ce: shr     $0x14,%r11
  0.62%    0x00007fb49036b0d2: test    %r11,%r11
           0x00007fb49036b0d5: je      0x7fb49036b12f
           0x00007fb49036b0d7: test    %rbx,%rbx
           0x00007fb49036b0da: je      0x7fb49036b12f
           0x00007fb49036b0dc: shr     $0x9,%r10
           0x00007fb49036b0e0: movabs  $0x7fb4a6765000,%rdi
           0x00007fb49036b0ea: add     %r10,%rdi
           0x00007fb49036b0ed: cmpb    $0x20,(%rdi)
           0x00007fb49036b0f0: je      0x7fb49036b12f
           0x00007fb49036b0f2: mov     0x80(%r15),%r10
           0x00007fb49036b0f9: mov     0x70(%r15),%r11
....................................................................................................
 25.83%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fb49036b1d4: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fb49036b1d8: mov     %r8,0x70(%r15)
            0x00007fb49036b1dc: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.02%     0x00007fb49036b1e2: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fb49036b1e6: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fb49036b5a8
            0x00007fb49036b1ea: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.67%     0x00007fb49036b1ef: mov     (%rsp),%r10
            0x00007fb49036b1f3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fb49036b1f9: vcvttss2si %xmm0,%r8d
  0.47%     0x00007fb49036b1fd: cmp     $0x80000000,%r8d
         â­  0x00007fb49036b204: jne     0x7fb49036b216
         â  0x00007fb49036b206: sub     $0x8,%rsp
         â  0x00007fb49036b20a: vmovss  %xmm0,(%rsp)
         â  0x00007fb49036b20f: callq   0x7fb4888b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fb49036b214: pop     %r8
         â  0x00007fb49036b216: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fb49036b21a: mov     0xc(%rsp),%ebx
  0.36%     0x00007fb49036b21e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007fb49036b5b4
            0x00007fb49036b222: mov     0x10(%rsp),%r9d
....................................................................................................
 12.16%  <total for region 2>

....[Hottest Regions]...............................................................................
 25.83%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (227 bytes) 
 12.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (27 bytes) 
  7.25%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 563 (167 bytes) 
  6.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 (191 bytes) 
  5.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 (146 bytes) 
  4.76%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 (141 bytes) 
  4.45%         c2, level 4  java.lang.Object::&lt;init&gt;, version 36 (27 bytes) 
  4.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (67 bytes) 
  3.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 (104 bytes) 
  2.59%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 572 (28 bytes) 
  2.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (53 bytes) 
  2.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 551 (17 bytes) 
  1.86%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 (23 bytes) 
  1.50%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (5 bytes) 
  1.04%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 571 (24 bytes) 
  0.83%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 563 (0 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 (7 bytes) 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 601 (61 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 (30 bytes) 
 10.35%  <...other 132 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 47.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 
  9.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 
  8.07%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 563 
  6.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 
  6.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 
  4.45%         c2, level 4  java.lang.Object::&lt;init&gt;, version 36 
  2.59%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 572 
  2.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 551 
  1.50%   [kernel.kallsyms]  native_write_msr 
  1.04%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 571 
  0.67%        libc-2.31.so  malloc 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 601 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 574 
  0.36%        libc-2.31.so  _int_malloc 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 570 
  0.26%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk 
  6.37%  <...other 94 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.80%         c2, level 4
  4.81%   [kernel.kallsyms]
  2.80%           libjvm.so
  1.81%        libc-2.31.so
  0.62%    libfcml.so.0.0.0
  0.05%      libz.so.1.2.11
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.981          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
