# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1168.150 ns/op
# Warmup Iteration   2: 674.931 ns/op
# Warmup Iteration   3: 615.454 ns/op
# Warmup Iteration   4: 617.467 ns/op
# Warmup Iteration   5: 617.869 ns/op
Iteration   1: 615.396 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  615.396 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 118489 total address lines.
Perf output processed (skipped 11.201 seconds):
 Column 1: cycles (1945 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (223 bytes) 

            0x00007fa8d436b8b4: lea     (%r9,%r10,8),%r9
         ╭  0x00007fa8d436b8b8: jmp     0x7fa8d436b900
         │  0x00007fa8d436b8ba: mov     %r15,%rsi
         │  0x00007fa8d436b8bd: movabs  $0x7fa8eb313290,%r10
         │  0x00007fa8d436b8c7: callq   %r10
         │  0x00007fa8d436b8ca: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fa8d436b8d0: mov     0x108(%r15),%r10
         │  0x00007fa8d436b8d7: mov     (%rsp),%r11
  0.36%  │  0x00007fa8d436b8db: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007fa8d436b8df: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fa8d436b8e1: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007fa8d436b8e4: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007fa8d436bea4
  0.62%  │  0x00007fa8d436b8e8: cmp     %r11d,%ebp
         │  0x00007fa8d436b8eb: jnl     0x7fa8d436bb99    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007fa8d436b8f1: mov     0x14(%rsp),%r11d
         │  0x00007fa8d436b8f6: mov     0x18(%rsp),%r9
         │  0x00007fa8d436b8fb: mov     0xc(%rsp),%r13d
  0.72%  ↘  0x00007fa8d436b900: mov     0x118(%r15),%rax
            0x00007fa8d436b907: mov     %rax,%r10
            0x00007fa8d436b90a: add     $0x28,%r10
            0x00007fa8d436b90e: cmp     0x128(%r15),%r10
            0x00007fa8d436b915: jnb     0x7fa8d436bc44    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.67%     0x00007fa8d436b91b: mov     %r10,0x118(%r15)
  0.10%     0x00007fa8d436b922: prefetchnta 0x100(%r10)
  0.05%     0x00007fa8d436b92a: mov     0xb8(%r9),%r10
  0.05%     0x00007fa8d436b931: mov     %r10,(%rax)
  0.51%     0x00007fa8d436b934: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.10%     0x00007fa8d436b93b: movl    $0x0,0xc(%rax)
            0x00007fa8d436b942: movq    $0x0,0x10(%rax)
            0x00007fa8d436b94a: movq    $0x0,0x18(%rax)
  0.57%     0x00007fa8d436b952: movl    $0x0,0x20(%rax)
            0x00007fa8d436b959: mov     %ebp,0x8(%rsp)
  0.05%     0x00007fa8d436b95d: mov     %r13d,0xc(%rsp)
            0x00007fa8d436b962: mov     %r8d,0x10(%rsp)
  0.41%     0x00007fa8d436b967: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fa8d436b96c: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007fa8d436b970: mov     %r11d,0x14(%rsp)
            0x00007fa8d436b975: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.67%     0x00007fa8d436b978: mov     %rbp,%rsi
            0x00007fa8d436b97b: callq   0x7fa8d436a4f0    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007fa8d436b980: movl    $0x0,0x14(%rbp)
  0.41%     0x00007fa8d436b987: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.18%     0x00007fa8d436b98d: mov     (%rsp),%rsi
  0.05%     0x00007fa8d436b991: nop
            0x00007fa8d436b993: callq   0x7fa8d436befe    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fa8d436b998: mov     %rax,%rbx
  0.77%     0x00007fa8d436b99b: cmpb    $0x0,0x30(%r15)
            0x00007fa8d436b9a0: jne     0x7fa8d436bba9
            0x00007fa8d436b9a6: mov     %rbx,%r10
            0x00007fa8d436b9a9: mov     %r10d,0x1c(%rbp)
  0.46%     0x00007fa8d436b9ad: mov     %rbp,%r10
  0.05%     0x00007fa8d436b9b0: mov     %rbx,%r11
            0x00007fa8d436b9b3: xor     %r10,%r11
            0x00007fa8d436b9b6: shr     $0x14,%r11
  0.41%     0x00007fa8d436b9ba: test    %r11,%r11
            0x00007fa8d436b9bd: je      0x7fa8d436ba17
            0x00007fa8d436b9bf: test    %rbx,%rbx
            0x00007fa8d436b9c2: je      0x7fa8d436ba17
            0x00007fa8d436b9c4: shr     $0x9,%r10
            0x00007fa8d436b9c8: movabs  $0x7fa8e917c000,%rdi
            0x00007fa8d436b9d2: add     %r10,%rdi
            0x00007fa8d436b9d5: cmpb    $0x20,(%rdi)
            0x00007fa8d436b9d8: je      0x7fa8d436ba17
            0x00007fa8d436b9da: mov     0x80(%r15),%r10
            0x00007fa8d436b9e1: mov     0x70(%r15),%r11
....................................................................................................
 26.32%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa8d436babc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa8d436bac0: mov     %r8,0x70(%r15)
            0x00007fa8d436bac4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.26%     0x00007fa8d436baca: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa8d436bace: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa8d436be88
            0x00007fa8d436bad2: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.31%     0x00007fa8d436bad7: mov     (%rsp),%r11
            0x00007fa8d436badb: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007fa8d436bae1: vcvttss2si %xmm1,%r11d
  0.72%     0x00007fa8d436bae5: cmp     $0x80000000,%r11d
         ╭  0x00007fa8d436baec: jne     0x7fa8d436bafe
         │  0x00007fa8d436baee: sub     $0x8,%rsp
         │  0x00007fa8d436baf2: vmovss  %xmm1,(%rsp)
         │  0x00007fa8d436baf7: callq   0x7fa8cc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fa8d436bafc: pop     %r11
         ↘  0x00007fa8d436bafe: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa8d436bb02: mov     0x10(%rsp),%r8d
  0.62%     0x00007fa8d436bb07: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007fa8d436be94
            0x00007fa8d436bb0b: mov     0x8(%rsp),%ebp
....................................................................................................
 14.29%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.32%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (223 bytes) 
 14.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (27 bytes) 
  8.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 553 (191 bytes) 
  5.45%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (163 bytes) 
  4.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 570 (146 bytes) 
  4.27%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 (151 bytes) 
  3.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (58 bytes) 
  3.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 570 (104 bytes) 
  3.39%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  2.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (51 bytes) 
  2.42%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 562 (27 bytes) 
  2.37%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 (23 bytes) 
  2.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 551 (17 bytes) 
  2.01%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 563 (25 bytes) 
  1.13%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.82%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 (5 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (72 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 570 (7 bytes) 
  0.51%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 (54 bytes) 
 10.39%  <...other 144 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 567 
  8.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 570 
  8.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 553 
  6.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 
  6.27%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 556 
  3.39%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  2.42%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 562 
  2.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 551 
  2.01%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 563 
  1.13%   [kernel.kallsyms]  native_write_msr 
  0.72%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 601 
  0.57%        libc-2.31.so  malloc 
  0.51%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.41%        libc-2.31.so  _int_malloc 
  0.36%        libc-2.31.so  _int_free 
  0.26%        libc-2.31.so  unlink_chunk.isra.0 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 571 
  0.21%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  5.96%  <...other 105 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.97%         c2, level 4
  4.27%   [kernel.kallsyms]
  2.62%        libc-2.31.so
  2.26%           libjvm.so
  0.62%    libfcml.so.0.0.0
  0.15%         interpreter
  0.05%        runtime stub
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       615.396          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
