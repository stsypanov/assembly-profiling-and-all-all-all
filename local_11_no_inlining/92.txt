# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1153.274 ns/op
# Warmup Iteration   2: 650.730 ns/op
# Warmup Iteration   3: 616.461 ns/op
# Warmup Iteration   4: 615.365 ns/op
# Warmup Iteration   5: 618.328 ns/op
Iteration   1: 616.190 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.190 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 112915 total address lines.
Perf output processed (skipped 11.019 seconds):
 Column 1: cycles (2032 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (218 bytes) 

           0x00007f073c36afc7: mov     %r15,%rsi
           0x00007f073c36afca: movabs  $0x7f0753de8290,%r10
           0x00007f073c36afd4: callq   %r10
           0x00007f073c36afd7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f073c36afe0: mov     0x108(%r15),%r10
           0x00007f073c36afe7: mov     0x10(%rsp),%r11
           0x00007f073c36afec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.54%    0x00007f073c36aff0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f073c36aff2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007f073c36aff5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007f073c36b5a8
           0x00007f073c36aff9: cmp     %r10d,%ebp
           0x00007f073c36affc: jnl     0x7f073c36b2a7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.44%    0x00007f073c36b002: mov     0xc(%rsp),%r10d
           0x00007f073c36b007: mov     0x18(%rsp),%r8
           0x00007f073c36b00c: mov     0x8(%rsp),%r13d
  0.05%    0x00007f073c36b011: mov     0x118(%r15),%rax
  0.59%    0x00007f073c36b018: mov     %rax,%r11
           0x00007f073c36b01b: add     $0x28,%r11
           0x00007f073c36b01f: cmp     0x128(%r15),%r11
           0x00007f073c36b026: jnb     0x7f073c36b353    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%    0x00007f073c36b02c: mov     %r11,0x118(%r15)
  0.69%    0x00007f073c36b033: prefetchnta 0x100(%r11)
  0.10%    0x00007f073c36b03b: mov     0xb8(%r8),%r11
           0x00007f073c36b042: mov     %r11,(%rax)
           0x00007f073c36b045: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.89%    0x00007f073c36b04c: movl    $0x0,0xc(%rax)
           0x00007f073c36b053: movq    $0x0,0x10(%rax)
           0x00007f073c36b05b: movq    $0x0,0x18(%rax)
           0x00007f073c36b063: movl    $0x0,0x20(%rax)
  0.64%    0x00007f073c36b06a: mov     %ebp,(%rsp)
           0x00007f073c36b06d: mov     %r13d,0x8(%rsp)
           0x00007f073c36b072: mov     %ecx,0x4(%rsp)
  0.10%    0x00007f073c36b076: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.64%    0x00007f073c36b07b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f073c36b07f: mov     %r10d,0xc(%rsp)
           0x00007f073c36b084: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%    0x00007f073c36b087: mov     %rbp,%rsi
  0.34%    0x00007f073c36b08a: nop
           0x00007f073c36b08b: callq   0x7f073c36a6f0    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.05%    0x00007f073c36b090: movl    $0x0,0x14(%rbp)
  0.44%    0x00007f073c36b097: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.01%    0x00007f073c36b09d: mov     0x10(%rsp),%rsi
  0.20%    0x00007f073c36b0a2: nop
           0x00007f073c36b0a3: callq   0x7f0734ea0020    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f073c36b0a8: mov     %rax,%rbx
  0.39%    0x00007f073c36b0ab: cmpb    $0x0,0x30(%r15)
  0.10%    0x00007f073c36b0b0: jne     0x7f073c36b2b7
           0x00007f073c36b0b6: mov     %rbx,%r11
           0x00007f073c36b0b9: mov     %r11d,0x1c(%rbp)
  0.84%    0x00007f073c36b0bd: mov     %rbp,%r10
           0x00007f073c36b0c0: mov     %rbx,%r11
           0x00007f073c36b0c3: xor     %r10,%r11
           0x00007f073c36b0c6: shr     $0x14,%r11
  0.49%    0x00007f073c36b0ca: test    %r11,%r11
           0x00007f073c36b0cd: je      0x7f073c36b127
           0x00007f073c36b0cf: test    %rbx,%rbx
           0x00007f073c36b0d2: je      0x7f073c36b127
           0x00007f073c36b0d4: shr     $0x9,%r10
           0x00007f073c36b0d8: movabs  $0x7f0751c51000,%rdi
           0x00007f073c36b0e2: add     %r10,%rdi
           0x00007f073c36b0e5: cmpb    $0x20,(%rdi)
           0x00007f073c36b0e8: je      0x7f073c36b127
           0x00007f073c36b0ea: mov     0x80(%r15),%r10
           0x00007f073c36b0f1: mov     0x70(%r15),%r11
....................................................................................................
 25.64%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (34 bytes) 

             0x00007f073c36b1c2: mov     %rbx,%r10
         ╭   0x00007f073c36b1c5: jmp     0x7f073c36b1d4
         │   0x00007f073c36b1c7: mov     %rdi,0xfffffffffffffff8(%r11,%r8)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │   0x00007f073c36b1cc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │   0x00007f073c36b1d0: mov     %r8,0x70(%r15)
  0.05%  ↘   0x00007f073c36b1d4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.11%      0x00007f073c36b1da: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f073c36b1de: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                           ; implicit exception: dispatches to 0x00007f073c36b588
             0x00007f073c36b1e2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.39%      0x00007f073c36b1e7: mov     0x10(%rsp),%r11
             0x00007f073c36b1ec: vmulss  0x14(%r11),%xmm1,%xmm0
  0.05%      0x00007f073c36b1f2: vcvttss2si %xmm0,%r8d
  0.59%      0x00007f073c36b1f6: cmp     $0x80000000,%r8d
          ╭  0x00007f073c36b1fd: jne     0x7f073c36b20f
          │  0x00007f073c36b1ff: sub     $0x8,%rsp
          │  0x00007f073c36b203: vmovss  %xmm0,(%rsp)
          │  0x00007f073c36b208: callq   0x7f07348b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007f073c36b20d: pop     %r8
          ↘  0x00007f073c36b20f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
             0x00007f073c36b213: mov     0x4(%rsp),%r9d
  0.84%      0x00007f073c36b218: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007f073c36b594
             0x00007f073c36b21c: mov     (%rsp),%ebp
....................................................................................................
 13.19%  <total for region 2>

....[Hottest Regions]...............................................................................
 25.64%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (218 bytes) 
 13.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (34 bytes) 
  5.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 (191 bytes) 
  4.82%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (141 bytes) 
  4.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (146 bytes) 
  4.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (58 bytes) 
  4.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 (104 bytes) 
  3.89%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  3.59%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (99 bytes) 
  3.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (52 bytes) 
  2.31%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.02%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 (23 bytes) 
  1.87%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 (27 bytes) 
  1.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 (24 bytes) 
  1.57%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 551 (25 bytes) 
  1.38%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (23 bytes) 
  1.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (32 bytes) 
  1.13%           libjvm.so  SpinPause (9 bytes) 
  0.79%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 (1 bytes) 
  0.74%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 583 (143 bytes) 
 12.45%  <...other 148 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 
  9.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 549 
  6.84%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 535 
  5.76%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 544 
  5.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 550 
  3.89%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  2.31%   [kernel.kallsyms]  native_write_msr 
  1.87%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 
  1.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 534 
  1.57%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 551 
  1.13%           libjvm.so  SpinPause 
  0.74%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 583 
  0.74%        libc-2.31.so  malloc 
  0.64%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.54%        libc-2.31.so  malloc_consolidate 
  0.44%        libc-2.31.so  _int_free 
  0.39%        libc-2.31.so  _int_malloc 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk 
  0.30%           libjvm.so  OtherRegionsTable::occupied 
  0.25%        libc-2.31.so  unlink_chunk.isra.0 
  7.04%  <...other 102 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 86.07%         c2, level 4
  6.00%   [kernel.kallsyms]
  4.38%           libjvm.so
  2.66%        libc-2.31.so
  0.54%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.10%         interpreter
  0.05%         c1, level 3
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.190          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
