# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1026.723 ns/op
# Warmup Iteration   2: 647.155 ns/op
# Warmup Iteration   3: 629.021 ns/op
# Warmup Iteration   4: 623.482 ns/op
# Warmup Iteration   5: 629.205 ns/op
Iteration   1: 625.480 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  625.480 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 113280 total address lines.
Perf output processed (skipped 11.022 seconds):
 Column 1: cycles (1934 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (227 bytes) 

            0x00007ff348369d3f: add     %r12,%r8
            0x00007ff348369d42: xor     %r12,%r12
         ╭  0x00007ff348369d45: jmp     0x7ff348369d91
         │  0x00007ff348369d47: mov     %r15,%rsi
         │  0x00007ff348369d4a: movabs  $0x7ff35ea13290,%r10
         │  0x00007ff348369d54: callq   %r10
         │  0x00007ff348369d57: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007ff348369d60: mov     0x108(%r15),%r10
  0.05%  │  0x00007ff348369d67: mov     0x10(%rsp),%r11
         │  0x00007ff348369d6c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.47%  │  0x00007ff348369d70: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007ff348369d72: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007ff348369d75: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007ff34836a328
         │  0x00007ff348369d79: cmp     %r10d,%ebp
         │  0x00007ff348369d7c: jnl     0x7ff34836a027    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.47%  │  0x00007ff348369d82: mov     0xc(%rsp),%r10d
         │  0x00007ff348369d87: mov     0x18(%rsp),%r8
         │  0x00007ff348369d8c: mov     0x8(%rsp),%r13d
  0.05%  ↘  0x00007ff348369d91: mov     0x118(%r15),%rax
  0.57%     0x00007ff348369d98: mov     %rax,%r11
            0x00007ff348369d9b: add     $0x28,%r11
            0x00007ff348369d9f: cmp     0x128(%r15),%r11
            0x00007ff348369da6: jnb     0x7ff34836a0d3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.21%     0x00007ff348369dac: mov     %r11,0x118(%r15)
  0.47%     0x00007ff348369db3: prefetchnta 0x100(%r11)
            0x00007ff348369dbb: mov     0xb8(%r8),%r11
            0x00007ff348369dc2: mov     %r11,(%rax)
  0.05%     0x00007ff348369dc5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.57%     0x00007ff348369dcc: movl    $0x0,0xc(%rax)
            0x00007ff348369dd3: movq    $0x0,0x10(%rax)
            0x00007ff348369ddb: movq    $0x0,0x18(%rax)
            0x00007ff348369de3: movl    $0x0,0x20(%rax)
  0.47%     0x00007ff348369dea: mov     %ebp,(%rsp)
            0x00007ff348369ded: mov     %r13d,0x8(%rsp)
            0x00007ff348369df2: mov     %ecx,0x4(%rsp)
            0x00007ff348369df6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.93%     0x00007ff348369dfb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff348369dff: mov     %r10d,0xc(%rsp)
            0x00007ff348369e04: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff348369e07: mov     %rbp,%rsi
  0.62%     0x00007ff348369e0a: nop
            0x00007ff348369e0b: callq   0x7ff348369470    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.16%     0x00007ff348369e10: movl    $0x0,0x14(%rbp)
  0.57%     0x00007ff348369e17: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.01%     0x00007ff348369e1d: mov     0x10(%rsp),%rsi
  0.21%     0x00007ff348369e22: nop
            0x00007ff348369e23: callq   0x7ff34836a37e    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007ff348369e28: mov     %rax,%rbx
  0.52%     0x00007ff348369e2b: cmpb    $0x0,0x30(%r15)
            0x00007ff348369e30: jne     0x7ff34836a037
            0x00007ff348369e36: mov     %rbx,%r11
            0x00007ff348369e39: mov     %r11d,0x1c(%rbp)
  0.52%     0x00007ff348369e3d: mov     %rbp,%r10
            0x00007ff348369e40: mov     %rbx,%r11
            0x00007ff348369e43: xor     %r10,%r11
            0x00007ff348369e46: shr     $0x14,%r11
  0.47%     0x00007ff348369e4a: test    %r11,%r11
            0x00007ff348369e4d: je      0x7ff348369ea7
            0x00007ff348369e4f: test    %rbx,%rbx
            0x00007ff348369e52: je      0x7ff348369ea7
            0x00007ff348369e54: shr     $0x9,%r10
            0x00007ff348369e58: movabs  $0x7ff35c87c000,%rdi
            0x00007ff348369e62: add     %r10,%rdi
            0x00007ff348369e65: cmpb    $0x20,(%rdi)
            0x00007ff348369e68: je      0x7ff348369ea7
            0x00007ff348369e6a: mov     0x80(%r15),%r10
            0x00007ff348369e71: mov     0x70(%r15),%r11
....................................................................................................
 27.35%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff348369f4c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff348369f50: mov     %r8,0x70(%r15)
            0x00007ff348369f54: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.32%     0x00007ff348369f5a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff348369f5e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff34836a308
            0x00007ff348369f62: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.52%     0x00007ff348369f67: mov     0x10(%rsp),%r11
            0x00007ff348369f6c: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007ff348369f72: vcvttss2si %xmm0,%r8d
  0.62%     0x00007ff348369f76: cmp     $0x80000000,%r8d
         ╭  0x00007ff348369f7d: jne     0x7ff348369f8f
         │  0x00007ff348369f7f: sub     $0x8,%rsp
         │  0x00007ff348369f83: vmovss  %xmm0,(%rsp)
         │  0x00007ff348369f88: callq   0x7ff3408b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007ff348369f8d: pop     %r8
         ↘  0x00007ff348369f8f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff348369f93: mov     0x4(%rsp),%r9d
  0.26%     0x00007ff348369f98: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007ff34836a314
  0.05%     0x00007ff348369f9c: mov     (%rsp),%ebp
....................................................................................................
 12.46%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (227 bytes) 
 12.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (28 bytes) 
  6.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 560 (180 bytes) 
  5.69%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 540 (141 bytes) 
  5.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 (146 bytes) 
  4.24%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 (27 bytes) 
  3.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (58 bytes) 
  3.72%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 (99 bytes) 
  3.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 (104 bytes) 
  2.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 539 (17 bytes) 
  2.28%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 (30 bytes) 
  2.22%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 540 (23 bytes) 
  1.96%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 (25 bytes) 
  1.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (52 bytes) 
  1.50%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 (27 bytes) 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (5 bytes) 
  1.14%           libjvm.so  SpinPause (9 bytes) 
  1.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 (16 bytes) 
  0.78%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 (11 bytes) 
  0.72%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  9.98%  <...other 124 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 
  9.93%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 555 
  7.91%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 540 
  6.77%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 
  6.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 560 
  4.24%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 
  2.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 539 
  1.96%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 
  1.50%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 
  1.14%           libjvm.so  SpinPause 
  0.72%   [kernel.kallsyms]  native_write_msr 
  0.52%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.52%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 559 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.21%        libc-2.31.so  malloc_consolidate 
  0.16%           libjvm.so  RSHashTableIter::has_next 
  0.16%        libc-2.31.so  malloc 
  6.26%  <...other 98 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.02%         c2, level 4
  4.29%           libjvm.so
  3.83%   [kernel.kallsyms]
  1.19%        libc-2.31.so
  0.52%    libfcml.so.0.0.0
  0.10%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       625.480          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
