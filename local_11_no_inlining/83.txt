# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1220.400 ns/op
# Warmup Iteration   2: 629.098 ns/op
# Warmup Iteration   3: 614.706 ns/op
# Warmup Iteration   4: 618.344 ns/op
# Warmup Iteration   5: 620.495 ns/op
Iteration   1: 616.130 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.130 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 115761 total address lines.
Perf output processed (skipped 11.113 seconds):
 Column 1: cycles (1945 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (218 bytes) 

           0x00007f3028369747: mov     %r15,%rsi
           0x00007f302836974a: movabs  $0x7f303d982290,%r10
           0x00007f3028369754: callq   %r10
           0x00007f3028369757: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f3028369760: mov     0x108(%r15),%r10
           0x00007f3028369767: mov     0x10(%rsp),%r11
           0x00007f302836976c: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.67%    0x00007f3028369770: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f3028369772: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
           0x00007f3028369775: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007f3028369d28
           0x00007f3028369779: cmp     %r10d,%ebp
           0x00007f302836977c: jnl     0x7f3028369a27    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.72%    0x00007f3028369782: mov     0xc(%rsp),%r10d
           0x00007f3028369787: mov     0x18(%rsp),%r8
           0x00007f302836978c: mov     0x8(%rsp),%r13d
  0.05%    0x00007f3028369791: mov     0x118(%r15),%rax
  0.82%    0x00007f3028369798: mov     %rax,%r11
  0.05%    0x00007f302836979b: add     $0x28,%r11
           0x00007f302836979f: cmp     0x128(%r15),%r11
           0x00007f30283697a6: jnb     0x7f3028369ad3    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f30283697ac: mov     %r11,0x118(%r15)
  0.67%    0x00007f30283697b3: prefetchnta 0x100(%r11)
           0x00007f30283697bb: mov     0xb8(%r8),%r11
           0x00007f30283697c2: mov     %r11,(%rax)
           0x00007f30283697c5: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.82%    0x00007f30283697cc: movl    $0x0,0xc(%rax)
           0x00007f30283697d3: movq    $0x0,0x10(%rax)
           0x00007f30283697db: movq    $0x0,0x18(%rax)
  0.05%    0x00007f30283697e3: movl    $0x0,0x20(%rax)
  0.36%    0x00007f30283697ea: mov     %ebp,(%rsp)
           0x00007f30283697ed: mov     %r13d,0x8(%rsp)
           0x00007f30283697f2: mov     %ecx,0x4(%rsp)
           0x00007f30283697f6: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.62%    0x00007f30283697fb: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f30283697ff: mov     %r10d,0xc(%rsp)
           0x00007f3028369804: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f3028369807: mov     %rbp,%rsi
  0.62%    0x00007f302836980a: nop
  0.05%    0x00007f302836980b: callq   0x7f3028368e70    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.05%    0x00007f3028369810: movl    $0x0,0x14(%rbp)
  0.67%    0x00007f3028369817: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.25%    0x00007f302836981d: mov     0x10(%rsp),%rsi
           0x00007f3028369822: nop
           0x00007f3028369823: callq   0x7f3020eaa120    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f3028369828: mov     %rax,%rbx
  0.51%    0x00007f302836982b: cmpb    $0x0,0x30(%r15)
           0x00007f3028369830: jne     0x7f3028369a37
           0x00007f3028369836: mov     %rbx,%r11
           0x00007f3028369839: mov     %r11d,0x1c(%rbp)
  0.62%    0x00007f302836983d: mov     %rbp,%r10
           0x00007f3028369840: mov     %rbx,%r11
           0x00007f3028369843: xor     %r10,%r11
           0x00007f3028369846: shr     $0x14,%r11
  0.57%    0x00007f302836984a: test    %r11,%r11
           0x00007f302836984d: je      0x7f30283698a7
           0x00007f302836984f: test    %rbx,%rbx
           0x00007f3028369852: je      0x7f30283698a7
           0x00007f3028369854: shr     $0x9,%r10
           0x00007f3028369858: movabs  $0x7f301fc9e000,%rdi
           0x00007f3028369862: add     %r10,%rdi
           0x00007f3028369865: cmpb    $0x20,(%rdi)
           0x00007f3028369868: je      0x7f30283698a7
           0x00007f302836986a: mov     0x80(%r15),%r10
           0x00007f3028369871: mov     0x70(%r15),%r11
....................................................................................................
 26.17%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f302836994c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f3028369950: mov     %r8,0x70(%r15)
            0x00007f3028369954: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.16%     0x00007f302836995a: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f302836995e: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f3028369d08
            0x00007f3028369962: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.67%     0x00007f3028369967: mov     0x10(%rsp),%r11
            0x00007f302836996c: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007f3028369972: vcvttss2si %xmm0,%r8d
  0.41%     0x00007f3028369976: cmp     $0x80000000,%r8d
         â­  0x00007f302836997d: jne     0x7f302836998f
         â  0x00007f302836997f: sub     $0x8,%rsp
         â  0x00007f3028369983: vmovss  %xmm0,(%rsp)
         â  0x00007f3028369988: callq   0x7f30208b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007f302836998d: pop     %r8
         â  0x00007f302836998f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f3028369993: mov     0x4(%rsp),%r9d
  0.51%     0x00007f3028369998: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007f3028369d14
            0x00007f302836999c: mov     (%rsp),%ebp
....................................................................................................
 14.24%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.17%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (218 bytes) 
 14.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (28 bytes) 
  6.22%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 (156 bytes) 
  6.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 (191 bytes) 
  5.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (146 bytes) 
  4.16%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 540 (144 bytes) 
  3.96%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 (27 bytes) 
  3.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (66 bytes) 
  3.14%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (104 bytes) 
  2.42%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 540 (20 bytes) 
  2.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (52 bytes) 
  2.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (103 bytes) 
  2.06%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 (35 bytes) 
  1.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 539 (17 bytes) 
  1.59%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.49%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 (27 bytes) 
  0.93%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (9 bytes) 
  0.82%           libjvm.so  SpinPause (7 bytes) 
  0.67%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 (1 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 (76 bytes) 
  9.92%  <...other 128 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 550 
  9.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 
  6.89%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 549 
  6.58%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 540 
  6.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 
  3.96%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 
  2.06%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 
  1.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 539 
  1.59%   [kernel.kallsyms]  native_write_msr 
  1.49%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 
  0.82%           libjvm.so  SpinPause 
  0.51%   [kernel.kallsyms]  finish_task_switch 
  0.51%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 587 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 560 
  0.21%           libjvm.so  OtherRegionsTable::occupied 
  5.86%  <...other 88 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.51%         c2, level 4
  5.55%   [kernel.kallsyms]
  3.44%           libjvm.so
  1.08%        libc-2.31.so
  0.15%         interpreter
  0.15%    libfcml.so.0.0.0
  0.05%         c1, level 3
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.130          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
