# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1218.824 ns/op
# Warmup Iteration   2: 645.075 ns/op
# Warmup Iteration   3: 616.356 ns/op
# Warmup Iteration   4: 613.292 ns/op
# Warmup Iteration   5: 617.426 ns/op
Iteration   1: 613.338 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  613.338 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114627 total address lines.
Perf output processed (skipped 11.066 seconds):
 Column 1: cycles (1949 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (135 bytes) 

           0x00007fe97836b11a: mov     0x118(%r15),%rax
  0.05%    0x00007fe97836b121: mov     %rax,%r11
           0x00007fe97836b124: add     $0x28,%r11
  0.56%    0x00007fe97836b128: cmp     0x128(%r15),%r11
           0x00007fe97836b12f: jnb     0x7fe97836b459    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fe97836b135: mov     %r11,0x118(%r15)
           0x00007fe97836b13c: prefetchnta 0x100(%r11)
           0x00007fe97836b144: mov     0xb8(%r8),%r11
  0.82%    0x00007fe97836b14b: mov     %r11,(%rax)
           0x00007fe97836b14e: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007fe97836b155: movl    $0x0,0xc(%rax)
           0x00007fe97836b15c: movq    $0x0,0x10(%rax)
  0.26%    0x00007fe97836b164: movq    $0x0,0x18(%rax)
           0x00007fe97836b16c: movl    $0x0,0x20(%rax)
  0.05%    0x00007fe97836b173: mov     %ebp,0x8(%rsp)
           0x00007fe97836b177: mov     %r10d,0xc(%rsp)
  0.77%    0x00007fe97836b17c: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007fe97836b181: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fe97836b185: mov     %r9d,0x14(%rsp)
           0x00007fe97836b18a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.72%    0x00007fe97836b18d: mov     %rbp,%rsi
           0x00007fe97836b190: nop
           0x00007fe97836b193: callq   0x7fe97836a7f0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.77%    0x00007fe97836b198: movl    $0x0,0x14(%rbp)
           0x00007fe97836b19f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.62%    0x00007fe97836b1a5: mov     (%rsp),%rsi
  0.05%    0x00007fe97836b1a9: nop
           0x00007fe97836b1ab: callq   0x7fe970ea6f20    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fe97836b1b0: mov     %rax,%rbx
  0.46%    0x00007fe97836b1b3: cmpb    $0x0,0x30(%r15)
           0x00007fe97836b1b8: jne     0x7fe97836b3be
           0x00007fe97836b1be: mov     %rbx,%r11
  0.05%    0x00007fe97836b1c1: mov     %r11d,0x1c(%rbp)
  0.77%    0x00007fe97836b1c5: mov     %rbp,%r10
           0x00007fe97836b1c8: mov     %rbx,%r11
           0x00007fe97836b1cb: xor     %r10,%r11
           0x00007fe97836b1ce: shr     $0x14,%r11
  1.18%    0x00007fe97836b1d2: test    %r11,%r11
           0x00007fe97836b1d5: je      0x7fe97836b22f
           0x00007fe97836b1d7: test    %rbx,%rbx
           0x00007fe97836b1da: je      0x7fe97836b22f
           0x00007fe97836b1dc: shr     $0x9,%r10
           0x00007fe97836b1e0: movabs  $0x7fe96b426000,%rdi
           0x00007fe97836b1ea: add     %r10,%rdi
           0x00007fe97836b1ed: cmpb    $0x20,(%rdi)
           0x00007fe97836b1f0: je      0x7fe97836b22f
           0x00007fe97836b1f2: mov     0x80(%r15),%r10
           0x00007fe97836b1f9: mov     0x70(%r15),%r11
....................................................................................................
 22.52%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe97836b2d4: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe97836b2d8: mov     %r8,0x70(%r15)
            0x00007fe97836b2dc: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.31%     0x00007fe97836b2e2: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe97836b2e6: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fe97836b6a8
            0x00007fe97836b2ea: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.67%     0x00007fe97836b2ef: mov     (%rsp),%r10
            0x00007fe97836b2f3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fe97836b2f9: vcvttss2si %xmm0,%r8d
  0.31%     0x00007fe97836b2fd: cmp     $0x80000000,%r8d
         ╭  0x00007fe97836b304: jne     0x7fe97836b316
         │  0x00007fe97836b306: sub     $0x8,%rsp
         │  0x00007fe97836b30a: vmovss  %xmm0,(%rsp)
         │  0x00007fe97836b30f: callq   0x7fe9708b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fe97836b314: pop     %r8
         ↘  0x00007fe97836b316: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fe97836b31a: mov     0xc(%rsp),%ebx
  0.56%     0x00007fe97836b31e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007fe97836b6b4
            0x00007fe97836b322: mov     0x10(%rsp),%r9d
....................................................................................................
 13.29%  <total for region 2>

....[Hottest Regions]...............................................................................
 22.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (135 bytes) 
 13.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 
  7.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 551 (191 bytes) 
  6.82%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (160 bytes) 
  5.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (146 bytes) 
  4.41%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (141 bytes) 
  4.21%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 (27 bytes) 
  3.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (104 bytes) 
  3.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (58 bytes) 
  2.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (53 bytes) 
  2.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (57 bytes) 
  2.26%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 553 (32 bytes) 
  1.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 (24 bytes) 
  1.69%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.64%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (54 bytes) 
  1.64%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 (24 bytes) 
  1.28%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (20 bytes) 
  0.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (160 bytes) 
  0.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 (7 bytes) 
  0.62%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 589 (121 bytes) 
 10.67%  <...other 130 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 
  9.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 550 
  7.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 551 
  7.23%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 
  5.70%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 
  4.21%         c2, level 4  java.lang.Object::&lt;init&gt;, version 27 
  2.26%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 553 
  1.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 
  1.69%   [kernel.kallsyms]  native_write_msr 
  1.64%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 
  0.62%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 589 
  0.51%        libc-2.31.so  malloc 
  0.41%        libc-2.31.so  _int_malloc 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 
  0.36%        libc-2.31.so  malloc_consolidate 
  0.26%           libjvm.so  fileStream::write 
  0.21%        libc-2.31.so  _int_free 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  6.16%  <...other 93 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.48%         c2, level 4
  5.34%   [kernel.kallsyms]
  2.31%           libjvm.so
  1.90%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.05%              kvm.ko
  0.05%    Unknown, level 0
  0.05%        libverify.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       613.338          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
