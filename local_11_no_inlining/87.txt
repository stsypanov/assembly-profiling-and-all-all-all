# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1027.985 ns/op
# Warmup Iteration   2: 652.164 ns/op
# Warmup Iteration   3: 624.375 ns/op
# Warmup Iteration   4: 621.438 ns/op
# Warmup Iteration   5: 624.867 ns/op
Iteration   1: 621.517 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  621.517 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115764 total address lines.
Perf output processed (skipped 11.122 seconds):
 Column 1: cycles (1996 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (135 bytes) 

           0x00007efca836b09a: mov     0x118(%r15),%rax
           0x00007efca836b0a1: mov     %rax,%r11
           0x00007efca836b0a4: add     $0x28,%r11
  0.70%    0x00007efca836b0a8: cmp     0x128(%r15),%r11
           0x00007efca836b0af: jnb     0x7efca836b3d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007efca836b0b5: mov     %r11,0x118(%r15)
           0x00007efca836b0bc: prefetchnta 0x100(%r11)
           0x00007efca836b0c4: mov     0xb8(%r8),%r11
  0.65%    0x00007efca836b0cb: mov     %r11,(%rax)
           0x00007efca836b0ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007efca836b0d5: movl    $0x0,0xc(%rax)
           0x00007efca836b0dc: movq    $0x0,0x10(%rax)
  0.60%    0x00007efca836b0e4: movq    $0x0,0x18(%rax)
           0x00007efca836b0ec: movl    $0x0,0x20(%rax)
           0x00007efca836b0f3: mov     %ebp,0x8(%rsp)
           0x00007efca836b0f7: mov     %r10d,0xc(%rsp)
  0.45%    0x00007efca836b0fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007efca836b101: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007efca836b105: mov     %r9d,0x14(%rsp)
           0x00007efca836b10a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.50%    0x00007efca836b10d: mov     %rbp,%rsi
           0x00007efca836b110: nop
           0x00007efca836b113: callq   0x7efca0ea7f00    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.60%    0x00007efca836b118: movl    $0x0,0x14(%rbp)
  0.05%    0x00007efca836b11f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.59%    0x00007efca836b125: mov     (%rsp),%rsi
           0x00007efca836b129: nop
           0x00007efca836b12b: callq   0x7efca836b69e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007efca836b130: mov     %rax,%rbx
  0.70%    0x00007efca836b133: cmpb    $0x0,0x30(%r15)
           0x00007efca836b138: jne     0x7efca836b33e
           0x00007efca836b13e: mov     %rbx,%r11
           0x00007efca836b141: mov     %r11d,0x1c(%rbp)
  0.55%    0x00007efca836b145: mov     %rbp,%r10
  0.05%    0x00007efca836b148: mov     %rbx,%r11
           0x00007efca836b14b: xor     %r10,%r11
           0x00007efca836b14e: shr     $0x14,%r11
  0.45%    0x00007efca836b152: test    %r11,%r11
           0x00007efca836b155: je      0x7efca836b1af
           0x00007efca836b157: test    %rbx,%rbx
           0x00007efca836b15a: je      0x7efca836b1af
           0x00007efca836b15c: shr     $0x9,%r10
           0x00007efca836b160: movabs  $0x7efcbc179000,%rdi
           0x00007efca836b16a: add     %r10,%rdi
           0x00007efca836b16d: cmpb    $0x20,(%rdi)
           0x00007efca836b170: je      0x7efca836b1af
           0x00007efca836b172: mov     0x80(%r15),%r10
           0x00007efca836b179: mov     0x70(%r15),%r11
....................................................................................................
 23.20%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efca836b254: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efca836b258: mov     %r8,0x70(%r15)
            0x00007efca836b25c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.37%     0x00007efca836b262: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efca836b266: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007efca836b628
  0.05%     0x00007efca836b26a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.65%     0x00007efca836b26f: mov     (%rsp),%r10
            0x00007efca836b273: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007efca836b279: vcvttss2si %xmm0,%r8d
  0.50%     0x00007efca836b27d: cmp     $0x80000000,%r8d
         ╭  0x00007efca836b284: jne     0x7efca836b296
         │  0x00007efca836b286: sub     $0x8,%rsp
         │  0x00007efca836b28a: vmovss  %xmm0,(%rsp)
         │  0x00007efca836b28f: callq   0x7efca08b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007efca836b294: pop     %r8
         ↘  0x00007efca836b296: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007efca836b29a: mov     0xc(%rsp),%ebx
  0.75%     0x00007efca836b29e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007efca836b634
            0x00007efca836b2a2: mov     0x10(%rsp),%r9d
....................................................................................................
 13.58%  <total for region 2>

....[Hottest Regions]...............................................................................
 23.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (135 bytes) 
 13.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (27 bytes) 
  7.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (284 bytes) 
  7.01%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 552 (160 bytes) 
  6.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 (191 bytes) 
  4.86%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 538 (141 bytes) 
  3.71%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 (27 bytes) 
  3.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (61 bytes) 
  2.86%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (57 bytes) 
  2.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (53 bytes) 
  2.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 537 (17 bytes) 
  2.10%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 538 (20 bytes) 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (54 bytes) 
  1.40%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 553 (35 bytes) 
  1.35%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 547 (20 bytes) 
  0.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (133 bytes) 
  0.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (0 bytes) 
  0.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (68 bytes) 
  0.40%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
 10.37%  <...other 143 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 
  8.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 
  7.31%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 552 
  6.96%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 538 
  6.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 
  3.71%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 
  2.86%   [kernel.kallsyms]  native_write_msr 
  2.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 537 
  1.40%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 553 
  1.35%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 547 
  0.55%        libc-2.31.so  malloc 
  0.55%        libc-2.31.so  _int_malloc 
  0.40%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.40%        libc-2.31.so  malloc_consolidate 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 584 
  0.25%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.25%        libc-2.31.so  _int_free 
  0.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 560 
  0.20%        libc-2.31.so  unlink_chunk.isra.0 
  0.20%           libjvm.so  SpinPause 
  6.61%  <...other 107 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.93%         c2, level 4
  5.46%   [kernel.kallsyms]
  3.21%           libjvm.so
  2.30%        libc-2.31.so
  0.90%    libfcml.so.0.0.0
  0.15%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       621.517          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
