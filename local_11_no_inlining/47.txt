# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1066.337 ns/op
# Warmup Iteration   2: 707.248 ns/op
# Warmup Iteration   3: 614.330 ns/op
# Warmup Iteration   4: 613.568 ns/op
# Warmup Iteration   5: 617.459 ns/op
Iteration   1: 614.091 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  614.091 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115884 total address lines.
Perf output processed (skipped 11.174 seconds):
 Column 1: cycles (1969 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (222 bytes) 

  0.05%     0x00007fdc0436b3c2: xor     %r12,%r12
         ╭  0x00007fdc0436b3c5: jmp     0x7fdc0436b411
         │  0x00007fdc0436b3c7: mov     %r15,%rsi
         │  0x00007fdc0436b3ca: movabs  $0x7fdc1b00e290,%r10
         │  0x00007fdc0436b3d4: callq   %r10
         │  0x00007fdc0436b3d7: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007fdc0436b3e0: mov     0x108(%r15),%r10
         │  0x00007fdc0436b3e7: mov     0x10(%rsp),%r11
  0.05%  │  0x00007fdc0436b3ec: mov     0x1c(%r11),%ecx   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.71%  │  0x00007fdc0436b3f0: incl    %ebp              ; ImmutableOopMap{rcx=NarrowOop [12]=NarrowOop [16]=Oop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007fdc0436b3f2: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007fdc0436b3f5: mov     0xc(%rcx),%r10d   ; implicit exception: dispatches to 0x00007fdc0436b9a8
         │  0x00007fdc0436b3f9: cmp     %r10d,%ebp
         │  0x00007fdc0436b3fc: jnl     0x7fdc0436b6a7    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.66%  │  0x00007fdc0436b402: mov     0xc(%rsp),%r10d
         │  0x00007fdc0436b407: mov     0x18(%rsp),%r8
         │  0x00007fdc0436b40c: mov     0x8(%rsp),%r13d
         ↘  0x00007fdc0436b411: mov     0x118(%r15),%rax
  0.56%     0x00007fdc0436b418: mov     %rax,%r11
  0.05%     0x00007fdc0436b41b: add     $0x28,%r11
            0x00007fdc0436b41f: cmp     0x128(%r15),%r11
            0x00007fdc0436b426: jnb     0x7fdc0436b753    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fdc0436b42c: mov     %r11,0x118(%r15)
  0.36%     0x00007fdc0436b433: prefetchnta 0x100(%r11)
            0x00007fdc0436b43b: mov     0xb8(%r8),%r11
            0x00007fdc0436b442: mov     %r11,(%rax)
  0.05%     0x00007fdc0436b445: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.51%     0x00007fdc0436b44c: movl    $0x0,0xc(%rax)
            0x00007fdc0436b453: movq    $0x0,0x10(%rax)
            0x00007fdc0436b45b: movq    $0x0,0x18(%rax)
            0x00007fdc0436b463: movl    $0x0,0x20(%rax)
  0.51%     0x00007fdc0436b46a: mov     %ebp,(%rsp)
  0.05%     0x00007fdc0436b46d: mov     %r13d,0x8(%rsp)
            0x00007fdc0436b472: mov     %ecx,0x4(%rsp)
            0x00007fdc0436b476: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.66%     0x00007fdc0436b47b: mov     %r10d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fdc0436b47f: mov     %r10d,0xc(%rsp)
            0x00007fdc0436b484: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fdc0436b487: mov     %rbp,%rsi
  0.66%     0x00007fdc0436b48a: nop
            0x00007fdc0436b48b: callq   0x7fdc0436b9ef    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fdc0436b490: movl    $0x0,0x14(%rbp)
  0.41%     0x00007fdc0436b497: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.50%     0x00007fdc0436b49d: mov     0x10(%rsp),%rsi
            0x00007fdc0436b4a2: nop
            0x00007fdc0436b4a3: callq   0x7fdc0436b9fe    ; ImmutableOopMap{rbp=Oop [4]=NarrowOop [12]=NarrowOop [16]=Oop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007fdc0436b4a8: mov     %rax,%rbx
  0.86%     0x00007fdc0436b4ab: cmpb    $0x0,0x30(%r15)
            0x00007fdc0436b4b0: jne     0x7fdc0436b6b7
            0x00007fdc0436b4b6: mov     %rbx,%r11
            0x00007fdc0436b4b9: mov     %r11d,0x1c(%rbp)
  0.61%     0x00007fdc0436b4bd: mov     %rbp,%r10
  0.05%     0x00007fdc0436b4c0: mov     %rbx,%r11
            0x00007fdc0436b4c3: xor     %r10,%r11
            0x00007fdc0436b4c6: shr     $0x14,%r11
  0.71%     0x00007fdc0436b4ca: test    %r11,%r11
            0x00007fdc0436b4cd: je      0x7fdc0436b527
            0x00007fdc0436b4cf: test    %rbx,%rbx
            0x00007fdc0436b4d2: je      0x7fdc0436b527
            0x00007fdc0436b4d4: shr     $0x9,%r10
            0x00007fdc0436b4d8: movabs  $0x7fdc18e77000,%rdi
            0x00007fdc0436b4e2: add     %r10,%rdi
            0x00007fdc0436b4e5: cmpb    $0x20,(%rdi)
            0x00007fdc0436b4e8: je      0x7fdc0436b527
            0x00007fdc0436b4ea: mov     0x80(%r15),%r10
            0x00007fdc0436b4f1: mov     0x70(%r15),%r11
....................................................................................................
 26.97%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (28 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fdc0436b5cc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fdc0436b5d0: mov     %r8,0x70(%r15)
            0x00007fdc0436b5d4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.54%     0x00007fdc0436b5da: mov     0x20(%r10),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fdc0436b5de: mov     0xc(%r8),%r11d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fdc0436b988
            0x00007fdc0436b5e2: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.56%     0x00007fdc0436b5e7: mov     0x10(%rsp),%r11
            0x00007fdc0436b5ec: vmulss  0x14(%r11),%xmm1,%xmm0
            0x00007fdc0436b5f2: vcvttss2si %xmm0,%r8d
  0.51%     0x00007fdc0436b5f6: cmp     $0x80000000,%r8d
         ╭  0x00007fdc0436b5fd: jne     0x7fdc0436b60f
         │  0x00007fdc0436b5ff: sub     $0x8,%rsp
         │  0x00007fdc0436b603: vmovss  %xmm0,(%rsp)
         │  0x00007fdc0436b608: callq   0x7fdbfc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fdc0436b60d: pop     %r8
         ↘  0x00007fdc0436b60f: mov     %r8d,0x18(%r10)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fdc0436b613: mov     0x4(%rsp),%r9d
  0.76%     0x00007fdc0436b618: mov     0xc(%r9),%r8d     ; implicit exception: dispatches to 0x00007fdc0436b994
            0x00007fdc0436b61c: mov     (%rsp),%ebp
....................................................................................................
 13.61%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (222 bytes) 
 13.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (28 bytes) 
  6.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 (180 bytes) 
  5.43%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 (156 bytes) 
  4.98%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 (146 bytes) 
  4.77%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (141 bytes) 
  4.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 (104 bytes) 
  4.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (58 bytes) 
  3.10%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  2.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (52 bytes) 
  2.08%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 (25 bytes) 
  1.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (126 bytes) 
  1.78%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 (27 bytes) 
  1.63%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.63%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (23 bytes) 
  1.17%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 554 (5 bytes) 
  0.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (205 bytes) 
  0.71%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 (7 bytes) 
  0.71%           libjvm.so  SpinPause (7 bytes) 
  0.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 (0 bytes) 
 10.77%  <...other 142 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 
 10.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 559 
  6.40%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 
  6.20%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 
  6.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 
  3.10%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  2.08%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 557 
  1.78%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 556 
  1.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 554 
  1.63%   [kernel.kallsyms]  native_write_msr 
  0.71%           libjvm.so  SpinPause 
  0.61%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 589 
  0.51%        libc-2.31.so  malloc 
  0.51%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.36%        libc-2.31.so  _int_malloc 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%        libc-2.31.so  unlink_chunk.isra.0 
  6.25%  <...other 99 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.83%         c2, level 4
  5.33%   [kernel.kallsyms]
  3.20%           libjvm.so
  1.93%        libc-2.31.so
  0.51%    libfcml.so.0.0.0
  0.15%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       614.091          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
