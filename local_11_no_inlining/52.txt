# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1016.921 ns/op
# Warmup Iteration   2: 650.793 ns/op
# Warmup Iteration   3: 627.094 ns/op
# Warmup Iteration   4: 622.497 ns/op
# Warmup Iteration   5: 629.867 ns/op
Iteration   1: 622.403 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  622.403 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 114146 total address lines.
Perf output processed (skipped 11.121 seconds):
 Column 1: cycles (1936 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (298 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f346836a10b: test    %r11d,%r11d
            0x00007f346836a10e: je      0x7f346836a710    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@124 (line 183)
            0x00007f346836a114: mov     %r11,%rbx         ;*putfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@112 (line 182)
            0x00007f346836a117: mov     0xc(%rbx),%r11d
            0x00007f346836a11b: test    %r11d,%r11d
            0x00007f346836a11e: jbe     0x7f346836a42d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.05%     0x00007f346836a124: mov     %rbx,%r11
            0x00007f346836a127: mov     (%rsp),%r10
            0x00007f346836a12b: mov     %r10,%rcx
            0x00007f346836a12e: mov     $0x8012575,%r8d   ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%     0x00007f346836a134: shl     $0x3,%r8
            0x00007f346836a138: movabs  $0x800000000,%r12
            0x00007f346836a142: add     %r12,%r8
            0x00007f346836a145: xor     %r12,%r12
  0.05%  ╭  0x00007f346836a148: jmp     0x7f346836a199
         │  0x00007f346836a14a: mov     %r15,%rsi
         │  0x00007f346836a14d: movabs  $0x7f347d94f290,%r10
         │  0x00007f346836a157: callq   %r10
         │  0x00007f346836a15a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%  │  0x00007f346836a160: mov     0x108(%r15),%r10
  0.72%  │  0x00007f346836a167: mov     (%rsp),%r11
  0.05%  │  0x00007f346836a16b: mov     0x1c(%r11),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f346836a16f: mov     0x10(%rsp),%r9d
         │  0x00007f346836a174: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.62%  │  0x00007f346836a177: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r11=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f346836a17c: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f346836a17f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f346836a738
         │  0x00007f346836a183: cmp     %r8d,%r9d
         │  0x00007f346836a186: jnl     0x7f346836a42d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.57%  │  0x00007f346836a18c: mov     0x8(%rsp),%ebp
         │  0x00007f346836a190: mov     0x14(%rsp),%ecx
         │  0x00007f346836a194: mov     0x18(%rsp),%r8
         ↘  0x00007f346836a199: mov     0x118(%r15),%rax
  0.46%     0x00007f346836a1a0: mov     %rax,%r10
            0x00007f346836a1a3: add     $0x28,%r10
            0x00007f346836a1a7: cmp     0x128(%r15),%r10
            0x00007f346836a1ae: jnb     0x7f346836a4d8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f346836a1b4: mov     %r10,0x118(%r15)
  0.31%     0x00007f346836a1bb: prefetchnta 0x100(%r10)
            0x00007f346836a1c3: mov     0xb8(%r8),%r10
  0.05%     0x00007f346836a1ca: mov     %r10,(%rax)
            0x00007f346836a1cd: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.77%     0x00007f346836a1d4: movl    $0x0,0xc(%rax)
            0x00007f346836a1db: movq    $0x0,0x10(%rax)
  0.05%     0x00007f346836a1e3: movq    $0x0,0x18(%rax)
            0x00007f346836a1eb: movl    $0x0,0x20(%rax)
  0.36%     0x00007f346836a1f2: mov     %ebp,0x8(%rsp)
            0x00007f346836a1f6: mov     %r11d,0xc(%rsp)
  0.10%     0x00007f346836a1fb: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f346836a200: mov     %ecx,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.62%     0x00007f346836a203: mov     %ecx,0x14(%rsp)
            0x00007f346836a207: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f346836a20a: mov     %rbp,%rsi
  0.05%     0x00007f346836a20d: nop
  0.41%     0x00007f346836a20f: callq   0x7f3460ea4580    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007f346836a214: movl    $0x0,0x14(%rbp)
            0x00007f346836a21b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.35%     0x00007f346836a221: mov     (%rsp),%rsi
  0.10%     0x00007f346836a225: nop
            0x00007f346836a227: callq   0x7f3460ea5da0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f346836a22c: mov     %rax,%rbx
  0.46%     0x00007f346836a22f: cmpb    $0x0,0x30(%r15)
            0x00007f346836a234: jne     0x7f346836a43d
            0x00007f346836a23a: mov     %rbx,%r10
            0x00007f346836a23d: mov     %r10d,0x1c(%rbp)
  0.41%     0x00007f346836a241: mov     %rbp,%r10
            0x00007f346836a244: mov     %rbx,%r11
            0x00007f346836a247: xor     %r10,%r11
            0x00007f346836a24a: shr     $0x14,%r11
  0.57%     0x00007f346836a24e: test    %r11,%r11
            0x00007f346836a251: je      0x7f346836a2ab
            0x00007f346836a253: test    %rbx,%rbx
            0x00007f346836a256: je      0x7f346836a2ab
            0x00007f346836a258: shr     $0x9,%r10
            0x00007f346836a25c: movabs  $0x7f345fc9e000,%rdi
            0x00007f346836a266: add     %r10,%rdi
            0x00007f346836a269: cmpb    $0x20,(%rdi)
            0x00007f346836a26c: je      0x7f346836a2ab
            0x00007f346836a26e: mov     0x80(%r15),%r10
            0x00007f346836a275: mov     0x70(%r15),%r11
....................................................................................................
 27.43%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (109 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f346836a350: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f346836a354: mov     %r8,0x70(%r15)
            0x00007f346836a358: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.71%     0x00007f346836a35e: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f346836a362: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f346836a71c
            0x00007f346836a366: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.41%     0x00007f346836a36b: mov     (%rsp),%r11
            0x00007f346836a36f: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f346836a375: vcvttss2si %xmm1,%r11d
  0.57%     0x00007f346836a379: cmp     $0x80000000,%r11d
         ╭  0x00007f346836a380: jne     0x7f346836a392
         │  0x00007f346836a382: sub     $0x8,%rsp
         │  0x00007f346836a386: vmovss  %xmm1,(%rsp)
         │  0x00007f346836a38b: callq   0x7f34608b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f346836a390: pop     %r11
         ↘  0x00007f346836a392: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.57%     0x00007f346836a396: mov     0xc(%rsp),%ebx
            0x00007f346836a39a: mov     0xc(%rbx),%r11d   ; implicit exception: dispatches to 0x00007f346836a728
            0x00007f346836a39e: mov     0x10(%rsp),%r9d
            0x00007f346836a3a3: cmp     %r11d,%r9d
            0x00007f346836a3a6: jnb     0x7f346836a590
  0.77%     0x00007f346836a3ac: mov     %rbx,%r11         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
            0x00007f346836a3af: lea     0x10(%rbx,%r9,4),%r14
            0x00007f346836a3b4: cmpb    $0x0,0x30(%r15)
            0x00007f346836a3b9: jne     0x7f346836a4a6
  0.52%     0x00007f346836a3bf: mov     %r10,%r11
            0x00007f346836a3c2: mov     %r10,%r8
            0x00007f346836a3c5: mov     %r8d,(%r14)
            0x00007f346836a3c8: mov     %r14,%r10
  0.93%     0x00007f346836a3cb: xor     %r10,%r11
            0x00007f346836a3ce: shr     $0x14,%r11
            0x00007f346836a3d2: test    %r11,%r11
            0x00007f346836a3d5: je      0x7f346836a160
            0x00007f346836a3db: shr     $0x9,%r10
            0x00007f346836a3df: movabs  $0x7f345fc9e000,%rdi
            0x00007f346836a3e9: add     %r10,%rdi
            0x00007f346836a3ec: cmpb    $0x20,(%rdi)
            0x00007f346836a3ef: je      0x7f346836a160
            0x00007f346836a3f5: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 16.53%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (298 bytes) 
 16.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (109 bytes) 
  9.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (284 bytes) 
  5.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 557 (191 bytes) 
  5.37%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 (167 bytes) 
  5.32%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 539 (141 bytes) 
  3.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (58 bytes) 
  3.77%         c2, level 4  java.lang.Object::&lt;init&gt;, version 29 (27 bytes) 
  2.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 541 (35 bytes) 
  1.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 538 (17 bytes) 
  1.81%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (71 bytes) 
  1.65%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 539 (23 bytes) 
  1.08%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 548 (27 bytes) 
  0.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (79 bytes) 
  0.57%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 (8 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (0 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (30 bytes) 
  0.31%        libc-2.31.so  malloc_consolidate (58 bytes) 
  9.19%  <...other 124 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 51.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 
  9.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 
  6.97%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 539 
  5.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 
  5.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 557 
  3.77%         c2, level 4  java.lang.Object::&lt;init&gt;, version 29 
  2.94%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 541 
  1.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 538 
  1.81%   [kernel.kallsyms]  native_write_msr 
  1.08%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 548 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.36%        libc-2.31.so  malloc 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 591 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 561 
  0.26%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.26%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.26%        libc-2.31.so  _int_free 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 559 
  0.21%        libc-2.31.so  _int_malloc 
  6.20%  <...other 94 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.88%         c2, level 4
  5.06%   [kernel.kallsyms]
  2.38%           libjvm.so
  1.76%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.05%        runtime stub
  0.05%          ld-2.31.so
  0.05%          libjava.so
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       622.403          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
