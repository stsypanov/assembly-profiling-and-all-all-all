# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1037.901 ns/op
# Warmup Iteration   2: 673.740 ns/op
# Warmup Iteration   3: 616.902 ns/op
# Warmup Iteration   4: 621.095 ns/op
# Warmup Iteration   5: 621.604 ns/op
Iteration   1: 615.046 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  615.046 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 116600 total address lines.
Perf output processed (skipped 11.222 seconds):
 Column 1: cycles (1955 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (135 bytes) 

           0x00007fc7cc36b79a: mov     0x118(%r15),%rax
           0x00007fc7cc36b7a1: mov     %rax,%r11
           0x00007fc7cc36b7a4: add     $0x28,%r11
  0.77%    0x00007fc7cc36b7a8: cmp     0x128(%r15),%r11
           0x00007fc7cc36b7af: jnb     0x7fc7cc36bad9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fc7cc36b7b5: mov     %r11,0x118(%r15)
           0x00007fc7cc36b7bc: prefetchnta 0x100(%r11)
           0x00007fc7cc36b7c4: mov     0xb8(%r8),%r11
  0.41%    0x00007fc7cc36b7cb: mov     %r11,(%rax)
           0x00007fc7cc36b7ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.15%    0x00007fc7cc36b7d5: movl    $0x0,0xc(%rax)
           0x00007fc7cc36b7dc: movq    $0x0,0x10(%rax)
  0.56%    0x00007fc7cc36b7e4: movq    $0x0,0x18(%rax)
           0x00007fc7cc36b7ec: movl    $0x0,0x20(%rax)
           0x00007fc7cc36b7f3: mov     %ebp,0x8(%rsp)
  0.05%    0x00007fc7cc36b7f7: mov     %r10d,0xc(%rsp)
  0.77%    0x00007fc7cc36b7fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007fc7cc36b801: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.20%    0x00007fc7cc36b805: mov     %r9d,0x14(%rsp)
  0.05%    0x00007fc7cc36b80a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.46%    0x00007fc7cc36b80d: mov     %rbp,%rsi
           0x00007fc7cc36b810: nop
  0.05%    0x00007fc7cc36b813: callq   0x7fc7c489d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.56%    0x00007fc7cc36b818: movl    $0x0,0x14(%rbp)
           0x00007fc7cc36b81f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.26%    0x00007fc7cc36b825: mov     (%rsp),%rsi
  0.05%    0x00007fc7cc36b829: nop
           0x00007fc7cc36b82b: callq   0x7fc7c489d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fc7cc36b830: mov     %rax,%rbx
  0.56%    0x00007fc7cc36b833: cmpb    $0x0,0x30(%r15)
           0x00007fc7cc36b838: jne     0x7fc7cc36ba3e
           0x00007fc7cc36b83e: mov     %rbx,%r11
           0x00007fc7cc36b841: mov     %r11d,0x1c(%rbp)
  0.51%    0x00007fc7cc36b845: mov     %rbp,%r10
  0.05%    0x00007fc7cc36b848: mov     %rbx,%r11
           0x00007fc7cc36b84b: xor     %r10,%r11
           0x00007fc7cc36b84e: shr     $0x14,%r11
  0.61%    0x00007fc7cc36b852: test    %r11,%r11
           0x00007fc7cc36b855: je      0x7fc7cc36b8af
           0x00007fc7cc36b857: test    %rbx,%rbx
           0x00007fc7cc36b85a: je      0x7fc7cc36b8af
           0x00007fc7cc36b85c: shr     $0x9,%r10
           0x00007fc7cc36b860: movabs  $0x7fc7bf800000,%rdi
           0x00007fc7cc36b86a: add     %r10,%rdi
           0x00007fc7cc36b86d: cmpb    $0x20,(%rdi)
           0x00007fc7cc36b870: je      0x7fc7cc36b8af
           0x00007fc7cc36b872: mov     0x80(%r15),%r10
           0x00007fc7cc36b879: mov     0x70(%r15),%r11
....................................................................................................
 23.32%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc7cc36b954: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fc7cc36b958: mov     %r8,0x70(%r15)
            0x00007fc7cc36b95c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.41%     0x00007fc7cc36b962: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc7cc36b966: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fc7cc36bd28
            0x00007fc7cc36b96a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.77%     0x00007fc7cc36b96f: mov     (%rsp),%r10
            0x00007fc7cc36b973: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fc7cc36b979: vcvttss2si %xmm0,%r8d
  0.51%     0x00007fc7cc36b97d: cmp     $0x80000000,%r8d
         ╭  0x00007fc7cc36b984: jne     0x7fc7cc36b996
         │  0x00007fc7cc36b986: sub     $0x8,%rsp
         │  0x00007fc7cc36b98a: vmovss  %xmm0,(%rsp)
         │  0x00007fc7cc36b98f: callq   0x7fc7c48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fc7cc36b994: pop     %r8
         ↘  0x00007fc7cc36b996: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fc7cc36b99a: mov     0xc(%rsp),%ebx
  0.51%     0x00007fc7cc36b99e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007fc7cc36bd34
            0x00007fc7cc36b9a2: mov     0x10(%rsp),%r9d
....................................................................................................
 12.69%  <total for region 2>

....[Hottest Regions]...............................................................................
 23.32%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (135 bytes) 
 12.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (27 bytes) 
  6.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 565 (180 bytes) 
  6.70%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 559 (160 bytes) 
  5.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 (146 bytes) 
  5.01%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 550 (141 bytes) 
  4.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (58 bytes) 
  3.94%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 (104 bytes) 
  3.79%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 (27 bytes) 
  2.92%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (57 bytes) 
  2.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (53 bytes) 
  1.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 549 (27 bytes) 
  1.64%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 567 (28 bytes) 
  1.59%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.53%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 550 (23 bytes) 
  1.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 (2 bytes) 
  1.23%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 566 (27 bytes) 
  1.02%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 559 (11 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 (0 bytes) 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
 10.95%  <...other 123 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 
  9.92%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 564 
  7.72%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 559 
  6.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 565 
  6.55%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 550 
  3.79%         c2, level 4  java.lang.Object::&lt;init&gt;, version 22 
  1.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 549 
  1.64%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 567 
  1.59%   [kernel.kallsyms]  native_write_msr 
  1.23%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 566 
  0.87%        libc-2.31.so  malloc 
  0.56%        libc-2.31.so  _int_malloc 
  0.51%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 598 
  0.51%        libc-2.31.so  malloc_consolidate 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 570 
  0.36%        libc-2.31.so  _int_free 
  0.31%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  5.47%  <...other 82 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.31%         c2, level 4
  4.50%   [kernel.kallsyms]
  2.92%        libc-2.31.so
  2.71%           libjvm.so
  0.36%    libfcml.so.0.0.0
  0.05%        runtime stub
  0.05%         classes.jsa
  0.05%      perf-52743.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       615.046          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
