# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1076.739 ns/op
# Warmup Iteration   2: 673.905 ns/op
# Warmup Iteration   3: 620.412 ns/op
# Warmup Iteration   4: 617.947 ns/op
# Warmup Iteration   5: 620.548 ns/op
Iteration   1: 616.774 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  616.774 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 115044 total address lines.
Perf output processed (skipped 11.152 seconds):
 Column 1: cycles (1956 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (230 bytes) 

           0x00007fea5c36a645: movabs  $0x7fea71125290,%r10
           0x00007fea5c36a64f: callq   %r10
           0x00007fea5c36a652: nopw    0x0(%rax,%rax)
           0x00007fea5c36a65c: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fea5c36a660: mov     0x108(%r15),%r11
           0x00007fea5c36a667: mov     (%rsp),%r10
           0x00007fea5c36a66b: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.20%    0x00007fea5c36a66f: mov     0x10(%rsp),%r9d
           0x00007fea5c36a674: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
           0x00007fea5c36a677: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007fea5c36a67c: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
  0.87%    0x00007fea5c36a67f: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007fea5c36ac44
           0x00007fea5c36a683: cmp     %r11d,%r9d
           0x00007fea5c36a686: jnl     0x7fea5c36a92e    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
           0x00007fea5c36a68c: mov     0x8(%rsp),%ebp
           0x00007fea5c36a690: mov     0x14(%rsp),%r9d
  0.31%    0x00007fea5c36a695: mov     0x18(%rsp),%r8
           0x00007fea5c36a69a: mov     0x118(%r15),%rax
           0x00007fea5c36a6a1: mov     %rax,%r11
           0x00007fea5c36a6a4: add     $0x28,%r11
  0.61%    0x00007fea5c36a6a8: cmp     0x128(%r15),%r11
           0x00007fea5c36a6af: jnb     0x7fea5c36a9d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007fea5c36a6b5: mov     %r11,0x118(%r15)
  0.05%    0x00007fea5c36a6bc: prefetchnta 0x100(%r11)
           0x00007fea5c36a6c4: mov     0xb8(%r8),%r11
  1.02%    0x00007fea5c36a6cb: mov     %r11,(%rax)
           0x00007fea5c36a6ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007fea5c36a6d5: movl    $0x0,0xc(%rax)
           0x00007fea5c36a6dc: movq    $0x0,0x10(%rax)
  0.61%    0x00007fea5c36a6e4: movq    $0x0,0x18(%rax)
  0.05%    0x00007fea5c36a6ec: movl    $0x0,0x20(%rax)
  0.10%    0x00007fea5c36a6f3: mov     %ebp,0x8(%rsp)
           0x00007fea5c36a6f7: mov     %r10d,0xc(%rsp)
  0.51%    0x00007fea5c36a6fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007fea5c36a701: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fea5c36a705: mov     %r9d,0x14(%rsp)
  0.05%    0x00007fea5c36a70a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.61%    0x00007fea5c36a70d: mov     %rbp,%rsi
           0x00007fea5c36a710: nop
           0x00007fea5c36a713: callq   0x7fea5c369af0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.72%    0x00007fea5c36a718: movl    $0x0,0x14(%rbp)
  0.05%    0x00007fea5c36a71f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 20.65%    0x00007fea5c36a725: mov     (%rsp),%rsi
  0.15%    0x00007fea5c36a729: nop
           0x00007fea5c36a72b: callq   0x7fea54ea8ba0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007fea5c36a730: mov     %rax,%rbx
  0.51%    0x00007fea5c36a733: cmpb    $0x0,0x30(%r15)
           0x00007fea5c36a738: jne     0x7fea5c36a93e
           0x00007fea5c36a73e: mov     %rbx,%r11
           0x00007fea5c36a741: mov     %r11d,0x1c(%rbp)
  0.41%    0x00007fea5c36a745: mov     %rbp,%r10
  0.05%    0x00007fea5c36a748: mov     %rbx,%r11
           0x00007fea5c36a74b: xor     %r10,%r11
           0x00007fea5c36a74e: shr     $0x14,%r11
  0.51%    0x00007fea5c36a752: test    %r11,%r11
  0.05%    0x00007fea5c36a755: je      0x7fea5c36a7af
           0x00007fea5c36a757: test    %rbx,%rbx
           0x00007fea5c36a75a: je      0x7fea5c36a7af
           0x00007fea5c36a75c: shr     $0x9,%r10
           0x00007fea5c36a760: movabs  $0x7fea4f426000,%rdi
           0x00007fea5c36a76a: add     %r10,%rdi
           0x00007fea5c36a76d: cmpb    $0x20,(%rdi)
           0x00007fea5c36a770: je      0x7fea5c36a7af
           0x00007fea5c36a772: mov     0x80(%r15),%r10
           0x00007fea5c36a779: mov     0x70(%r15),%r11
           0x00007fea5c36a77d: lock addl $0x0,0xffffffffffffffc0(%rsp)
....................................................................................................
 28.12%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fea5c36a854: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fea5c36a858: mov     %r8,0x70(%r15)
            0x00007fea5c36a85c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.83%     0x00007fea5c36a862: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fea5c36a866: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fea5c36ac28
            0x00007fea5c36a86a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.51%     0x00007fea5c36a86f: mov     (%rsp),%r10
            0x00007fea5c36a873: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fea5c36a879: vcvttss2si %xmm0,%r8d
  0.51%     0x00007fea5c36a87d: cmp     $0x80000000,%r8d
         â­  0x00007fea5c36a884: jne     0x7fea5c36a896
         â  0x00007fea5c36a886: sub     $0x8,%rsp
         â  0x00007fea5c36a88a: vmovss  %xmm0,(%rsp)
         â  0x00007fea5c36a88f: callq   0x7fea548b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fea5c36a894: pop     %r8
         â  0x00007fea5c36a896: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fea5c36a89a: mov     0xc(%rsp),%ebx
  0.51%     0x00007fea5c36a89e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007fea5c36ac34
            0x00007fea5c36a8a2: mov     0x10(%rsp),%r9d
....................................................................................................
 13.85%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (230 bytes) 
 13.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 
  5.93%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (160 bytes) 
  5.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 553 (191 bytes) 
  4.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (146 bytes) 
  4.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (104 bytes) 
  4.45%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (141 bytes) 
  4.14%         c2, level 4  java.lang.Object::&lt;init&gt;, version 20 (27 bytes) 
  3.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (70 bytes) 
  2.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (53 bytes) 
  2.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 (17 bytes) 
  2.04%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (23 bytes) 
  1.99%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.64%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 551 (35 bytes) 
  1.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (57 bytes) 
  1.43%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 (24 bytes) 
  0.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 (0 bytes) 
  0.72%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 (4 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (94 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (64 bytes) 
  9.41%  <...other 120 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 50.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 
 10.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 546 
  6.65%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 545 
  6.49%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 
  5.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 553 
  4.14%         c2, level 4  java.lang.Object::&lt;init&gt;, version 20 
  2.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 
  1.99%   [kernel.kallsyms]  native_write_msr 
  1.64%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 551 
  1.43%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 552 
  0.46%        libc-2.31.so  malloc 
  0.41%        libc-2.31.so  _int_malloc 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 585 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%        libc-2.31.so  unlink_chunk.isra.0 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%        libc-2.31.so  _int_free 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 
  0.26%        libc-2.31.so  malloc_consolidate 
  5.62%  <...other 90 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.67%         c2, level 4
  5.32%   [kernel.kallsyms]
  2.15%           libjvm.so
  2.04%        libc-2.31.so
  0.56%    libfcml.so.0.0.0
  0.20%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       616.774          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
