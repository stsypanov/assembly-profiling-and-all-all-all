# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1220.620 ns/op
# Warmup Iteration   2: 626.277 ns/op
# Warmup Iteration   3: 619.957 ns/op
# Warmup Iteration   4: 614.909 ns/op
# Warmup Iteration   5: 617.339 ns/op
Iteration   1: 612.797 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  612.797 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 113947 total address lines.
Perf output processed (skipped 11.129 seconds):
 Column 1: cycles (1986 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (223 bytes) 

            0x00007f676836b034: lea     (%r9,%r10,8),%r9
         ╭  0x00007f676836b038: jmp     0x7f676836b080
         │  0x00007f676836b03a: mov     %r15,%rsi
         │  0x00007f676836b03d: movabs  $0x7f677e125290,%r10
         │  0x00007f676836b047: callq   %r10
         │  0x00007f676836b04a: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f676836b050: mov     0x108(%r15),%r10
         │  0x00007f676836b057: mov     (%rsp),%r11
  0.81%  │  0x00007f676836b05b: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f676836b05f: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.05%  │  0x00007f676836b061: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f676836b064: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f676836b628
  0.70%  │  0x00007f676836b068: cmp     %r11d,%ebp
         │  0x00007f676836b06b: jnl     0x7f676836b319    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007f676836b071: mov     0x14(%rsp),%r11d
         │  0x00007f676836b076: mov     0x18(%rsp),%r9
         │  0x00007f676836b07b: mov     0xc(%rsp),%r13d
  0.35%  ↘  0x00007f676836b080: mov     0x118(%r15),%rax
            0x00007f676836b087: mov     %rax,%r10
  0.05%     0x00007f676836b08a: add     $0x28,%r10
  0.05%     0x00007f676836b08e: cmp     0x128(%r15),%r10
            0x00007f676836b095: jnb     0x7f676836b3c4    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.76%     0x00007f676836b09b: mov     %r10,0x118(%r15)
  0.05%     0x00007f676836b0a2: prefetchnta 0x100(%r10)
            0x00007f676836b0aa: mov     0xb8(%r9),%r10
  0.05%     0x00007f676836b0b1: mov     %r10,(%rax)
  0.35%     0x00007f676836b0b4: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f676836b0bb: movl    $0x0,0xc(%rax)
            0x00007f676836b0c2: movq    $0x0,0x10(%rax)
            0x00007f676836b0ca: movq    $0x0,0x18(%rax)
  0.60%     0x00007f676836b0d2: movl    $0x0,0x20(%rax)
            0x00007f676836b0d9: mov     %ebp,0x8(%rsp)
            0x00007f676836b0dd: mov     %r13d,0xc(%rsp)
            0x00007f676836b0e2: mov     %r8d,0x10(%rsp)
  0.35%     0x00007f676836b0e7: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.10%     0x00007f676836b0ec: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f676836b0f0: mov     %r11d,0x14(%rsp)
            0x00007f676836b0f5: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.81%     0x00007f676836b0f8: mov     %rbp,%rsi
  0.05%     0x00007f676836b0fb: callq   0x7f676089d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007f676836b100: movl    $0x0,0x14(%rbp)
  0.20%     0x00007f676836b107: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.59%     0x00007f676836b10d: mov     (%rsp),%rsi
            0x00007f676836b111: nop
            0x00007f676836b113: callq   0x7f676089d100    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f676836b118: mov     %rax,%rbx
  0.70%     0x00007f676836b11b: cmpb    $0x0,0x30(%r15)
            0x00007f676836b120: jne     0x7f676836b329
            0x00007f676836b126: mov     %rbx,%r10
            0x00007f676836b129: mov     %r10d,0x1c(%rbp)
  0.50%     0x00007f676836b12d: mov     %rbp,%r10
  0.05%     0x00007f676836b130: mov     %rbx,%r11
            0x00007f676836b133: xor     %r10,%r11
            0x00007f676836b136: shr     $0x14,%r11
  0.50%     0x00007f676836b13a: test    %r11,%r11
            0x00007f676836b13d: je      0x7f676836b197
            0x00007f676836b13f: test    %rbx,%rbx
            0x00007f676836b142: je      0x7f676836b197
            0x00007f676836b144: shr     $0x9,%r10
            0x00007f676836b148: movabs  $0x7f677bf8e000,%rdi
            0x00007f676836b152: add     %r10,%rdi
            0x00007f676836b155: cmpb    $0x20,(%rdi)
            0x00007f676836b158: je      0x7f676836b197
            0x00007f676836b15a: mov     0x80(%r15),%r10
            0x00007f676836b161: mov     0x70(%r15),%r11
....................................................................................................
 26.79%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f676836b23c: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f676836b240: mov     %r8,0x70(%r15)
            0x00007f676836b244: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.64%     0x00007f676836b24a: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f676836b24e: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f676836b60c
            0x00007f676836b252: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.65%     0x00007f676836b257: mov     (%rsp),%r11
            0x00007f676836b25b: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f676836b261: vcvttss2si %xmm1,%r11d
  0.50%     0x00007f676836b265: cmp     $0x80000000,%r11d
         ╭  0x00007f676836b26c: jne     0x7f676836b27e
         │  0x00007f676836b26e: sub     $0x8,%rsp
         │  0x00007f676836b272: vmovss  %xmm1,(%rsp)
         │  0x00007f676836b277: callq   0x7f67608b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f676836b27c: pop     %r11
         ↘  0x00007f676836b27e: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f676836b282: mov     0x10(%rsp),%r8d
  0.60%     0x00007f676836b287: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f676836b618
            0x00007f676836b28b: mov     0x8(%rsp),%ebp
....................................................................................................
 13.90%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.79%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (223 bytes) 
 13.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 
  6.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 (191 bytes) 
  5.74%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 540 (163 bytes) 
  5.24%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (141 bytes) 
  4.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (146 bytes) 
  3.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (58 bytes) 
  2.87%         c2, level 4  java.lang.Object::&lt;init&gt;, version 29 (27 bytes) 
  2.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (104 bytes) 
  2.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (51 bytes) 
  2.27%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 (20 bytes) 
  1.96%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 545 (27 bytes) 
  1.81%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 546 (32 bytes) 
  1.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (0 bytes) 
  1.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 (17 bytes) 
  1.21%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.91%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 540 (1 bytes) 
  0.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 (5 bytes) 
  0.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (144 bytes) 
  0.40%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 582 (76 bytes) 
 12.39%  <...other 167 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 
  8.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 554 
  7.50%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 536 
  6.65%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 540 
  6.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 555 
  2.87%         c2, level 4  java.lang.Object::&lt;init&gt;, version 29 
  1.96%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 545 
  1.81%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 546 
  1.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 535 
  1.21%   [kernel.kallsyms]  native_write_msr 
  0.70%        libc-2.31.so  _int_malloc 
  0.50%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 582 
  0.45%        libc-2.31.so  malloc 
  0.40%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.35%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.35%   [kernel.kallsyms]  release_pages 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%           libjvm.so  OtherRegionsTable::occupied 
  0.25%        libc-2.31.so  _int_free 
  0.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 558 
  8.11%  <...other 128 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.66%         c2, level 4
  5.84%   [kernel.kallsyms]
  3.22%           libjvm.so
  2.27%        libc-2.31.so
  0.55%    libfcml.so.0.0.0
  0.20%         interpreter
  0.05%        runtime stub
  0.05%         classes.jsa
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       612.797          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
