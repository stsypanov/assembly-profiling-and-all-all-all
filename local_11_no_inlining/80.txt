# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1017.325 ns/op
# Warmup Iteration   2: 647.958 ns/op
# Warmup Iteration   3: 623.244 ns/op
# Warmup Iteration   4: 626.987 ns/op
# Warmup Iteration   5: 624.481 ns/op
Iteration   1: 633.469 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  633.469 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 113864 total address lines.
Perf output processed (skipped 11.163 seconds):
 Column 1: cycles (1945 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (235 bytes) 

            0x00007f4d7036a83c: lea     (%r8,%r11,8),%r8
         ╭  0x00007f4d7036a840: jmp     0x7f4d7036a89a
         │  0x00007f4d7036a842: mov     %r15,%rsi
         │  0x00007f4d7036a845: movabs  $0x7f4d884a4290,%r10
         │  0x00007f4d7036a84f: callq   %r10
         │  0x00007f4d7036a852: nopw    0x0(%rax,%rax)
         │  0x00007f4d7036a85c: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f4d7036a860: mov     0x108(%r15),%r11
  0.05%  │  0x00007f4d7036a867: mov     (%rsp),%r10
         │  0x00007f4d7036a86b: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.46%  │  0x00007f4d7036a86f: mov     0x10(%rsp),%r9d
         │  0x00007f4d7036a874: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
         │  0x00007f4d7036a877: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f4d7036a87c: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
  0.31%  │  0x00007f4d7036a87f: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007f4d7036ae44
         │  0x00007f4d7036a883: cmp     %r11d,%r9d
         │  0x00007f4d7036a886: jnl     0x7f4d7036ab2e    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007f4d7036a88c: mov     0x8(%rsp),%ebp
         │  0x00007f4d7036a890: mov     0x14(%rsp),%r9d
  0.51%  │  0x00007f4d7036a895: mov     0x18(%rsp),%r8
         ↘  0x00007f4d7036a89a: mov     0x118(%r15),%rax
            0x00007f4d7036a8a1: mov     %rax,%r11
            0x00007f4d7036a8a4: add     $0x28,%r11
  0.67%     0x00007f4d7036a8a8: cmp     0x128(%r15),%r11
            0x00007f4d7036a8af: jnb     0x7f4d7036abd9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f4d7036a8b5: mov     %r11,0x118(%r15)
  0.05%     0x00007f4d7036a8bc: prefetchnta 0x100(%r11)
            0x00007f4d7036a8c4: mov     0xb8(%r8),%r11
  1.08%     0x00007f4d7036a8cb: mov     %r11,(%rax)
            0x00007f4d7036a8ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%     0x00007f4d7036a8d5: movl    $0x0,0xc(%rax)
            0x00007f4d7036a8dc: movq    $0x0,0x10(%rax)
  0.62%     0x00007f4d7036a8e4: movq    $0x0,0x18(%rax)
            0x00007f4d7036a8ec: movl    $0x0,0x20(%rax)
            0x00007f4d7036a8f3: mov     %ebp,0x8(%rsp)
            0x00007f4d7036a8f7: mov     %r10d,0xc(%rsp)
  0.57%     0x00007f4d7036a8fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f4d7036a901: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f4d7036a905: mov     %r9d,0x14(%rsp)
            0x00007f4d7036a90a: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.51%     0x00007f4d7036a90d: mov     %rbp,%rsi
            0x00007f4d7036a910: nop
  0.05%     0x00007f4d7036a913: callq   0x7f4d68ea7580    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.62%     0x00007f4d7036a918: movl    $0x0,0x14(%rbp)
  0.05%     0x00007f4d7036a91f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.94%     0x00007f4d7036a925: mov     (%rsp),%rsi
  0.05%     0x00007f4d7036a929: nop
            0x00007f4d7036a92b: callq   0x7f4d7036ae9e    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f4d7036a930: mov     %rax,%rbx
  0.41%     0x00007f4d7036a933: cmpb    $0x0,0x30(%r15)
            0x00007f4d7036a938: jne     0x7f4d7036ab3e
            0x00007f4d7036a93e: mov     %rbx,%r11
            0x00007f4d7036a941: mov     %r11d,0x1c(%rbp)
  0.67%     0x00007f4d7036a945: mov     %rbp,%r10
            0x00007f4d7036a948: mov     %rbx,%r11
            0x00007f4d7036a94b: xor     %r10,%r11
            0x00007f4d7036a94e: shr     $0x14,%r11
  0.67%     0x00007f4d7036a952: test    %r11,%r11
            0x00007f4d7036a955: je      0x7f4d7036a9af
            0x00007f4d7036a957: test    %rbx,%rbx
            0x00007f4d7036a95a: je      0x7f4d7036a9af
            0x00007f4d7036a95c: shr     $0x9,%r10
            0x00007f4d7036a960: movabs  $0x7f4d8630d000,%rdi
            0x00007f4d7036a96a: add     %r10,%rdi
            0x00007f4d7036a96d: cmpb    $0x20,(%rdi)
            0x00007f4d7036a970: je      0x7f4d7036a9af
            0x00007f4d7036a972: mov     0x80(%r15),%r10
            0x00007f4d7036a979: mov     0x70(%r15),%r11
....................................................................................................
 25.45%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4d7036aa54: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f4d7036aa58: mov     %r8,0x70(%r15)
            0x00007f4d7036aa5c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.93%     0x00007f4d7036aa62: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4d7036aa66: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f4d7036ae28
            0x00007f4d7036aa6a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.87%     0x00007f4d7036aa6f: mov     (%rsp),%r10
            0x00007f4d7036aa73: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f4d7036aa79: vcvttss2si %xmm0,%r8d
  0.46%     0x00007f4d7036aa7d: cmp     $0x80000000,%r8d
         ╭  0x00007f4d7036aa84: jne     0x7f4d7036aa96
         │  0x00007f4d7036aa86: sub     $0x8,%rsp
         │  0x00007f4d7036aa8a: vmovss  %xmm0,(%rsp)
         │  0x00007f4d7036aa8f: callq   0x7f4d688b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f4d7036aa94: pop     %r8
         ↘  0x00007f4d7036aa96: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4d7036aa9a: mov     0xc(%rsp),%ebx
  0.41%     0x00007f4d7036aa9e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007f4d7036ae34
            0x00007f4d7036aaa2: mov     0x10(%rsp),%r9d
....................................................................................................
 13.26%  <total for region 2>

....[Hottest Regions]...............................................................................
 25.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (235 bytes) 
 13.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 
  7.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 557 (191 bytes) 
  6.43%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (160 bytes) 
  4.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (146 bytes) 
  4.37%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (147 bytes) 
  3.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (58 bytes) 
  3.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (104 bytes) 
  3.24%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 (27 bytes) 
  2.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (53 bytes) 
  2.31%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 555 (24 bytes) 
  1.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 540 (24 bytes) 
  1.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (2 bytes) 
  1.54%           libjvm.so  SpinPause (9 bytes) 
  1.23%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (23 bytes) 
  1.13%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (7 bytes) 
  0.72%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 550 (17 bytes) 
  0.67%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 (11 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (70 bytes) 
 11.31%  <...other 136 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 48.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 
  9.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 
  7.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 557 
  7.10%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 554 
  5.60%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 
  3.24%         c2, level 4  java.lang.Object::&lt;init&gt;, version 21 
  2.31%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 555 
  1.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 540 
  1.54%           libjvm.so  SpinPause 
  1.13%   [kernel.kallsyms]  native_write_msr 
  0.77%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 589 
  0.72%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 550 
  0.57%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 560 
  0.31%        libc-2.31.so  _int_malloc 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%        libc-2.31.so  malloc 
  0.26%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.26%   [kernel.kallsyms]  irqentry_exit_to_user_mode 
  0.21%   [kernel.kallsyms]  clear_page_erms 
  6.89%  <...other 99 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.38%         c2, level 4
  4.94%   [kernel.kallsyms]
  4.11%           libjvm.so
  1.65%        libc-2.31.so
  0.62%    libfcml.so.0.0.0
  0.21%         interpreter
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       633.469          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
