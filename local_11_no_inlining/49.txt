# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1022.586 ns/op
# Warmup Iteration   2: 642.056 ns/op
# Warmup Iteration   3: 647.937 ns/op
# Warmup Iteration   4: 628.132 ns/op
# Warmup Iteration   5: 625.811 ns/op
Iteration   1: 623.199 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  623.199 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 115091 total address lines.
Perf output processed (skipped 11.107 seconds):
 Column 1: cycles (1944 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (223 bytes) 

            0x00007f539836c2b4: lea     (%r9,%r10,8),%r9
         ╭  0x00007f539836c2b8: jmp     0x7f539836c300
         │  0x00007f539836c2ba: mov     %r15,%rsi
         │  0x00007f539836c2bd: movabs  $0x7f53af480290,%r10
         │  0x00007f539836c2c7: callq   %r10
         │  0x00007f539836c2ca: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         │  0x00007f539836c2d0: mov     0x108(%r15),%r10
         │  0x00007f539836c2d7: mov     (%rsp),%r11
  0.77%  │  0x00007f539836c2db: mov     0x1c(%r11),%r8d   ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         │  0x00007f539836c2df: incl    %ebp              ; ImmutableOopMap{r8=NarrowOop [0]=Oop [20]=NarrowOop }
         │                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │  0x00007f539836c2e1: test    %eax,(%r10)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         │                                                ;   {poll}
         │  0x00007f539836c2e4: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f539836c8a8
  0.36%  │  0x00007f539836c2e8: cmp     %r11d,%ebp
         │  0x00007f539836c2eb: jnl     0x7f539836c599    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         │  0x00007f539836c2f1: mov     0x14(%rsp),%r11d
         │  0x00007f539836c2f6: mov     0x18(%rsp),%r9
         │  0x00007f539836c2fb: mov     0xc(%rsp),%r13d
  0.77%  ↘  0x00007f539836c300: mov     0x118(%r15),%rax
            0x00007f539836c307: mov     %rax,%r10
  0.05%     0x00007f539836c30a: add     $0x28,%r10
            0x00007f539836c30e: cmp     0x128(%r15),%r10
            0x00007f539836c315: jnb     0x7f539836c644    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.57%     0x00007f539836c31b: mov     %r10,0x118(%r15)
  0.05%     0x00007f539836c322: prefetchnta 0x100(%r10)
  0.05%     0x00007f539836c32a: mov     0xb8(%r9),%r10
            0x00007f539836c331: mov     %r10,(%rax)
  0.62%     0x00007f539836c334: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f539836c33b: movl    $0x0,0xc(%rax)
            0x00007f539836c342: movq    $0x0,0x10(%rax)
            0x00007f539836c34a: movq    $0x0,0x18(%rax)
  0.57%     0x00007f539836c352: movl    $0x0,0x20(%rax)
            0x00007f539836c359: mov     %ebp,0x8(%rsp)
            0x00007f539836c35d: mov     %r13d,0xc(%rsp)
            0x00007f539836c362: mov     %r8d,0x10(%rsp)
  0.46%     0x00007f539836c367: mov     %r9,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f539836c36c: mov     %r11d,0x24(%rax)  ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f539836c370: mov     %r11d,0x14(%rsp)
  0.05%     0x00007f539836c375: mov     %rax,%rbp         ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.31%     0x00007f539836c378: mov     %rbp,%rsi
  0.05%     0x00007f539836c37b: callq   0x7f5390ea4300    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
  0.05%     0x00007f539836c380: movl    $0x0,0x14(%rbp)
  0.31%     0x00007f539836c387: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.14%     0x00007f539836c38d: mov     (%rsp),%rsi
  0.21%     0x00007f539836c391: nop
            0x00007f539836c393: callq   0x7f5390ea5b20    ; ImmutableOopMap{rbp=Oop [0]=Oop [16]=NarrowOop [20]=NarrowOop }
                                                          ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ;   {optimized virtual_call}
            0x00007f539836c398: mov     %rax,%rbx
  0.72%     0x00007f539836c39b: cmpb    $0x0,0x30(%r15)
            0x00007f539836c3a0: jne     0x7f539836c5a9
            0x00007f539836c3a6: mov     %rbx,%r10
            0x00007f539836c3a9: mov     %r10d,0x1c(%rbp)
  0.51%     0x00007f539836c3ad: mov     %rbp,%r10
            0x00007f539836c3b0: mov     %rbx,%r11
            0x00007f539836c3b3: xor     %r10,%r11
            0x00007f539836c3b6: shr     $0x14,%r11
  0.82%     0x00007f539836c3ba: test    %r11,%r11
            0x00007f539836c3bd: je      0x7f539836c417
            0x00007f539836c3bf: test    %rbx,%rbx
            0x00007f539836c3c2: je      0x7f539836c417
            0x00007f539836c3c4: shr     $0x9,%r10
            0x00007f539836c3c8: movabs  $0x7f53ad2e9000,%rdi
            0x00007f539836c3d2: add     %r10,%rdi
            0x00007f539836c3d5: cmpb    $0x20,(%rdi)
            0x00007f539836c3d8: je      0x7f539836c417
            0x00007f539836c3da: mov     0x80(%r15),%r10
            0x00007f539836c3e1: mov     0x70(%r15),%r11
....................................................................................................
 26.44%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f539836c4bc: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f539836c4c0: mov     %r8,0x70(%r15)
            0x00007f539836c4c4: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.24%     0x00007f539836c4ca: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f539836c4ce: mov     0xc(%r11),%r8d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f539836c88c
  0.05%     0x00007f539836c4d2: vcvtsi2ssl %r8d,%xmm0,%xmm0
  0.41%     0x00007f539836c4d7: mov     (%rsp),%r11
            0x00007f539836c4db: vmulss  0x14(%r11),%xmm0,%xmm1
            0x00007f539836c4e1: vcvttss2si %xmm1,%r11d
  0.51%     0x00007f539836c4e5: cmp     $0x80000000,%r11d
         ╭  0x00007f539836c4ec: jne     0x7f539836c4fe
         │  0x00007f539836c4ee: sub     $0x8,%rsp
         │  0x00007f539836c4f2: vmovss  %xmm1,(%rsp)
         │  0x00007f539836c4f7: callq   0x7f53908b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f539836c4fc: pop     %r11
         ↘  0x00007f539836c4fe: mov     %r11d,0x18(%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f539836c502: mov     0x10(%rsp),%r8d
  0.62%     0x00007f539836c507: mov     0xc(%r8),%r11d    ; implicit exception: dispatches to 0x00007f539836c898
            0x00007f539836c50b: mov     0x8(%rsp),%ebp
....................................................................................................
 13.22%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (223 bytes) 
 13.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (27 bytes) 
  6.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 (181 bytes) 
  6.33%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 (156 bytes) 
  6.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (146 bytes) 
  5.56%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (141 bytes) 
  4.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (67 bytes) 
  3.96%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 (27 bytes) 
  3.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (104 bytes) 
  2.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (51 bytes) 
  2.21%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 (23 bytes) 
  1.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 540 (17 bytes) 
  1.44%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 559 (27 bytes) 
  1.39%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (44 bytes) 
  1.23%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 (32 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 (16 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (29 bytes) 
  0.41%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 (15 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 (48 bytes) 
 10.60%  <...other 145 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 552 
  9.98%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 556 
  7.77%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 541 
  6.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 558 
  6.74%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 555 
  3.96%         c2, level 4  java.lang.Object::&lt;init&gt;, version 23 
  1.44%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 559 
  1.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 540 
  1.39%   [kernel.kallsyms]  native_write_msr 
  1.23%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 560 
  0.51%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  _int_malloc 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.41%        libc-2.31.so  _int_free 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 588 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 562 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 557 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.21%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.21%         interpreter  method entry point (kind = zerolocals)  
  6.48%  <...other 106 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.61%         c2, level 4
  3.45%   [kernel.kallsyms]
  3.03%           libjvm.so
  2.47%        libc-2.31.so
  0.82%    libfcml.so.0.0.0
  0.31%         interpreter
  0.15%              [vdso]
  0.05%        runtime stub
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       623.199          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
