# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:MaxInlineLevel=0
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1168.138 ns/op
# Warmup Iteration   2: 630.708 ns/op
# Warmup Iteration   3: 620.427 ns/op
# Warmup Iteration   4: 632.960 ns/op
# Warmup Iteration   5: 651.795 ns/op
Iteration   1: 640.587 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  640.587 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 119707 total address lines.
Perf output processed (skipped 11.194 seconds):
 Column 1: cycles (1961 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (227 bytes) 

           0x00007f8dfc36b645: movabs  $0x7f8e1252a290,%r10
           0x00007f8dfc36b64f: callq   %r10
           0x00007f8dfc36b652: nopw    0x0(%rax,%rax)
           0x00007f8dfc36b65c: nop                       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
           0x00007f8dfc36b660: mov     0x108(%r15),%r11
           0x00007f8dfc36b667: mov     (%rsp),%r10
           0x00007f8dfc36b66b: mov     0x1c(%r10),%r10d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.61%    0x00007f8dfc36b66f: mov     0x10(%rsp),%r9d
           0x00007f8dfc36b674: incl    %r9d              ;*iinc {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
           0x00007f8dfc36b677: mov     %r9d,0x10(%rsp)   ; ImmutableOopMap{r10=NarrowOop [0]=Oop [20]=NarrowOop }
                                                         ;*goto {reexecute=1 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
           0x00007f8dfc36b67c: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                         ;   {poll}
  0.66%    0x00007f8dfc36b67f: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007f8dfc36bc44
           0x00007f8dfc36b683: cmp     %r11d,%r9d
           0x00007f8dfc36b686: jnl     0x7f8dfc36b92e    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
           0x00007f8dfc36b68c: mov     0x8(%rsp),%ebp
           0x00007f8dfc36b690: mov     0x14(%rsp),%r9d
  0.36%    0x00007f8dfc36b695: mov     0x18(%rsp),%r8
           0x00007f8dfc36b69a: mov     0x118(%r15),%rax
           0x00007f8dfc36b6a1: mov     %rax,%r11
           0x00007f8dfc36b6a4: add     $0x28,%r11
  0.51%    0x00007f8dfc36b6a8: cmp     0x128(%r15),%r11
           0x00007f8dfc36b6af: jnb     0x7f8dfc36b9d9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%    0x00007f8dfc36b6b5: mov     %r11,0x118(%r15)
           0x00007f8dfc36b6bc: prefetchnta 0x100(%r11)
           0x00007f8dfc36b6c4: mov     0xb8(%r8),%r11
  0.87%    0x00007f8dfc36b6cb: mov     %r11,(%rax)
           0x00007f8dfc36b6ce: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
           0x00007f8dfc36b6d5: movl    $0x0,0xc(%rax)
           0x00007f8dfc36b6dc: movq    $0x0,0x10(%rax)
  0.51%    0x00007f8dfc36b6e4: movq    $0x0,0x18(%rax)
           0x00007f8dfc36b6ec: movl    $0x0,0x20(%rax)
           0x00007f8dfc36b6f3: mov     %ebp,0x8(%rsp)
           0x00007f8dfc36b6f7: mov     %r10d,0xc(%rsp)
  0.46%    0x00007f8dfc36b6fc: mov     %r8,0x18(%rsp)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007f8dfc36b701: mov     %r9d,0x24(%rax)   ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8dfc36b705: mov     %r9d,0x14(%rsp)
           0x00007f8dfc36b70a: mov     %rax,%rbp         ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@-1 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.51%    0x00007f8dfc36b70d: mov     %rbp,%rsi
           0x00007f8dfc36b710: nop
           0x00007f8dfc36b713: callq   0x7f8dfc36aa70    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
  0.56%    0x00007f8dfc36b718: movl    $0x0,0x14(%rbp)
           0x00007f8dfc36b71f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.53%    0x00007f8dfc36b725: mov     (%rsp),%rsi
  0.05%    0x00007f8dfc36b729: nop
           0x00007f8dfc36b72b: callq   0x7f8df4eb13a0    ; ImmutableOopMap{rbp=Oop [0]=Oop [12]=NarrowOop [20]=NarrowOop }
                                                         ;*invokevirtual createReferenceManager {reexecute=0 rethrow=0 return_oop=1}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                         ;   {optimized virtual_call}
           0x00007f8dfc36b730: mov     %rax,%rbx
  0.46%    0x00007f8dfc36b733: cmpb    $0x0,0x30(%r15)
           0x00007f8dfc36b738: jne     0x7f8dfc36b93e
           0x00007f8dfc36b73e: mov     %rbx,%r11
           0x00007f8dfc36b741: mov     %r11d,0x1c(%rbp)
  0.61%    0x00007f8dfc36b745: mov     %rbp,%r10
           0x00007f8dfc36b748: mov     %rbx,%r11
           0x00007f8dfc36b74b: xor     %r10,%r11
           0x00007f8dfc36b74e: shr     $0x14,%r11
  0.61%    0x00007f8dfc36b752: test    %r11,%r11
           0x00007f8dfc36b755: je      0x7f8dfc36b7af
           0x00007f8dfc36b757: test    %rbx,%rbx
           0x00007f8dfc36b75a: je      0x7f8dfc36b7af
           0x00007f8dfc36b75c: shr     $0x9,%r10
           0x00007f8dfc36b760: movabs  $0x7f8e10393000,%rdi
           0x00007f8dfc36b76a: add     %r10,%rdi
           0x00007f8dfc36b76d: cmpb    $0x20,(%rdi)
           0x00007f8dfc36b770: je      0x7f8dfc36b7af
           0x00007f8dfc36b772: mov     0x80(%r15),%r10
           0x00007f8dfc36b779: mov     0x70(%r15),%r11
....................................................................................................
 26.36%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8dfc36b854: add     $0xfffffffffffffff8,%r8  ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f8dfc36b858: mov     %r8,0x70(%r15)
            0x00007f8dfc36b85c: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.85%     0x00007f8dfc36b862: mov     0x20(%r11),%r8d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f8dfc36b866: mov     0xc(%r8),%r10d    ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f8dfc36bc28
            0x00007f8dfc36b86a: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.36%     0x00007f8dfc36b86f: mov     (%rsp),%r10
            0x00007f8dfc36b873: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f8dfc36b879: vcvttss2si %xmm0,%r8d
  0.71%     0x00007f8dfc36b87d: cmp     $0x80000000,%r8d
         â­  0x00007f8dfc36b884: jne     0x7f8dfc36b896
         â  0x00007f8dfc36b886: sub     $0x8,%rsp
         â  0x00007f8dfc36b88a: vmovss  %xmm0,(%rsp)
         â  0x00007f8dfc36b88f: callq   0x7f8df48b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007f8dfc36b894: pop     %r8
  0.05%  â  0x00007f8dfc36b896: mov     %r8d,0x18(%r11)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8dfc36b89a: mov     0xc(%rsp),%ebx
  0.51%     0x00007f8dfc36b89e: mov     0xc(%rbx),%r8d    ; implicit exception: dispatches to 0x00007f8dfc36bc34
            0x00007f8dfc36b8a2: mov     0x10(%rsp),%r9d
            0x00007f8dfc36b8a7: cmp     %r8d,%r9d
            0x00007f8dfc36b8aa: jnb     0x7f8dfc36ba90
            0x00007f8dfc36b8b0: mov     %rbx,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.36%     0x00007f8dfc36b8b3: lea     0x10(%rbx,%r9,4),%r14
            0x00007f8dfc36b8b8: cmpb    $0x0,0x30(%r15)
            0x00007f8dfc36b8bd: jne     0x7f8dfc36b9a7
            0x00007f8dfc36b8c3: mov     %r11,%r10
  0.76%     0x00007f8dfc36b8c6: mov     %r11d,(%r14)
            0x00007f8dfc36b8c9: mov     %r14,%r11
            0x00007f8dfc36b8cc: xor     %r11,%r10
            0x00007f8dfc36b8cf: shr     $0x14,%r10
  0.61%     0x00007f8dfc36b8d3: test    %r10,%r10
            0x00007f8dfc36b8d6: je      0x7f8dfc36b660
            0x00007f8dfc36b8dc: shr     $0x9,%r11
            0x00007f8dfc36b8e0: movabs  $0x7f8e10393000,%rdi
            0x00007f8dfc36b8ea: add     %r11,%rdi
            0x00007f8dfc36b8ed: cmpb    $0x20,(%rdi)
            0x00007f8dfc36b8f0: je      0x7f8dfc36b660
            0x00007f8dfc36b8f6: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f8dfc36b8fd: mov     0x70(%r15),%r11
....................................................................................................
 16.32%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (227 bytes) 
 16.32%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (113 bytes) 
  8.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 (284 bytes) 
  5.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 568 (191 bytes) 
  5.76%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 557 (160 bytes) 
  4.84%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 (141 bytes) 
  3.93%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 (27 bytes) 
  3.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (58 bytes) 
  2.45%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 562 (28 bytes) 
  2.19%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 (20 bytes) 
  1.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 551 (17 bytes) 
  1.58%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.53%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 572 (20 bytes) 
  1.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (5 bytes) 
  0.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (31 bytes) 
  0.51%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 557 (0 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 (0 bytes) 
  0.41%           libjvm.so  SpinPause (9 bytes) 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 (3 bytes) 
 10.56%  <...other 141 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 49.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 563 
  9.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager, version 567 
  7.04%         c2, level 4  java.lang.ref.ReferenceQueue::&lt;init&gt;, version 552 
  6.27%         c2, level 4  java.util.concurrent.locks.ReentrantLock::&lt;init&gt;, version 557 
  5.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray, version 568 
  3.93%         c2, level 4  java.lang.Object::&lt;init&gt;, version 31 
  2.45%         c2, level 4  java.util.concurrent.locks.ReentrantLock$Sync::&lt;init&gt;, version 562 
  1.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::calculateShift, version 551 
  1.58%   [kernel.kallsyms]  native_write_msr 
  1.53%         c2, level 4  java.util.concurrent.locks.AbstractOwnableSynchronizer::&lt;init&gt;, version 572 
  0.82%        libc-2.31.so  malloc 
  0.61%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 598 
  0.56%        libc-2.31.so  malloc_consolidate 
  0.41%           libjvm.so  SpinPause 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%        libc-2.31.so  _int_malloc 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%        libc-2.31.so  unlink_chunk.isra.0 
  6.27%  <...other 99 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 88.83%         c2, level 4
  4.84%   [kernel.kallsyms]
  2.60%           libjvm.so
  2.50%        libc-2.31.so
  0.97%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%  libpthread-2.31.so
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       640.587          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
