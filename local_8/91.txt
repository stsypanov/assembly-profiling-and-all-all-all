# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1424.935 ns/op
# Warmup Iteration   2: 694.575 ns/op
# Warmup Iteration   3: 636.352 ns/op
# Warmup Iteration   4: 643.480 ns/op
# Warmup Iteration   5: 644.275 ns/op
Iteration   1: 649.126 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  649.126 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 142302 total address lines.
Perf output processed (skipped 11.986 seconds):
 Column 1: cycles (934 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (569 bytes) 

            0x00007f1c89225f39: vcvttss2si %xmm0,%r10d
  0.86%     0x00007f1c89225f3d: cmp     $0x80000000,%r10d
         ╭  0x00007f1c89225f44: jne     0x7f1c89225f56
         │  0x00007f1c89225f46: sub     $0x8,%rsp
         │  0x00007f1c89225f4a: vmovss  %xmm0,(%rsp)
         │  0x00007f1c89225f4f: callq   0x7f1c890520a0    ;   {runtime_call}
         │  0x00007f1c89225f54: pop     %r10
         ↘  0x00007f1c89225f56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1c89225f5a: mov     0x58(%rsp),%r11
  0.43%     0x00007f1c89225f5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1c89226691
            0x00007f1c89225f63: mov     0x90(%rsp),%ebp
            0x00007f1c89225f6a: cmp     %r10d,%ebp
            0x00007f1c89225f6d: jnb     0x7f1c8922652d
            0x00007f1c89225f73: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.32%     0x00007f1c89225f78: mov     0x28(%rsp),%r10
            0x00007f1c89225f7d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f1c89225f81: mov     %r9,%r10
            0x00007f1c89225f84: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.21%     0x00007f1c89225f86: shr     $0x9,%r10
            0x00007f1c89225f8a: movabs  $0x7f1c9d395000,%rcx
            0x00007f1c89225f94: mov     %r12l,(%rcx,%r10)
            0x00007f1c89225f98: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.43%     0x00007f1c89225f9b: test    %eax,0x1658405f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f1c89225fa1: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1c892266ad
            0x00007f1c89225fa5: cmp     %r10d,%ebp
            0x00007f1c89225fa8: jnl     0x7f1c892261d3    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f1c89225fae: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.54%     0x00007f1c89225fb1: mov     0x8(%rsp),%r8d
            0x00007f1c89225fb6: mov     (%rsp),%edi
  3.10%     0x00007f1c89225fb9: mov     0x18(%rsp),%r14
            0x00007f1c89225fbe: mov     0x20(%rsp),%r11
            0x00007f1c89225fc3: mov     0x30(%rsp),%r9
            0x00007f1c89225fc8: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.43%     0x00007f1c89225fcd: mov     0x60(%r15),%rbx
            0x00007f1c89225fd1: mov     %rbx,%r10
            0x00007f1c89225fd4: add     $0x28,%r10
            0x00007f1c89225fd8: cmp     0x70(%r15),%r10
            0x00007f1c89225fdc: jnb     0x7f1c892261e2
  0.64%     0x00007f1c89225fe2: mov     %r10,0x60(%r15)
            0x00007f1c89225fe6: prefetchnta 0x100(%r10)
            0x00007f1c89225fee: mov     0xa8(%r11),%r10
            0x00007f1c89225ff5: mov     %r10,(%rbx)
  0.64%     0x00007f1c89225ff8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.11%     0x00007f1c89225fff: mov     %r12d,0xc(%rbx)
  0.11%     0x00007f1c89226003: mov     %r12,0x10(%rbx)
            0x00007f1c89226007: mov     %r12,0x18(%rbx)
  0.64%     0x00007f1c8922600b: mov     %r12d,0x20(%rbx)
            0x00007f1c8922600f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f1c89226012: mov     0x60(%r15),%rax
            0x00007f1c89226016: mov     %rax,%r10
  0.64%     0x00007f1c89226019: add     $0x20,%r10
            0x00007f1c8922601d: cmp     0x70(%r15),%r10
            0x00007f1c89226021: jnb     0x7f1c89226268
            0x00007f1c89226027: mov     %r10,0x60(%r15)
            0x00007f1c8922602b: prefetchnta 0x100(%r10)
  0.32%     0x00007f1c89226033: mov     0xa8(%r14),%r10
            0x00007f1c8922603a: mov     %r10,(%rax)
            0x00007f1c8922603d: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f1c89226044: mov     %r12d,0xc(%rax)
  0.43%     0x00007f1c89226048: mov     %r12,0x10(%rax)
            0x00007f1c8922604c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89226050: mov     %rbx,%rcx
            0x00007f1c89226053: mov     %rax,%r10
  0.54%     0x00007f1c89226056: mov     %r10d,0xc(%rbx)
            0x00007f1c8922605a: shr     $0x9,%rcx
            0x00007f1c8922605e: movabs  $0x7f1c9d395000,%r10
            0x00007f1c89226068: mov     %r12l,(%r10,%rcx)
  0.64%     0x00007f1c8922606c: mov     %r12d,0x14(%rbx)
            0x00007f1c89226070: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.24%     0x00007f1c89226075: mov     0x60(%r15),%rdx
            0x00007f1c89226079: mov     %rdx,%r10
            0x00007f1c8922607c: add     $0x18,%r10
  0.11%     0x00007f1c89226080: cmp     0x70(%r15),%r10
            0x00007f1c89226084: jnb     0x7f1c892262f6
            0x00007f1c8922608a: mov     %r10,0x60(%r15)
            0x00007f1c8922608e: prefetchnta 0x100(%r10)
            0x00007f1c89226096: mov     0xa8(%rsi),%r10
  0.32%     0x00007f1c8922609d: mov     %r10,(%rdx)
            0x00007f1c892260a0: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f1c892260a7: mov     %r12d,0xc(%rdx)
            0x00007f1c892260ab: mov     %r12d,0x14(%rdx)
  0.75%     0x00007f1c892260af: mov     %r13,0x58(%rsp)
            0x00007f1c892260b4: mov     %ebp,0x90(%rsp)
            0x00007f1c892260bb: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c892260be: mov     0x60(%r15),%rbp
  0.64%     0x00007f1c892260c2: mov     %rbp,%r10
            0x00007f1c892260c5: add     $0x20,%r10
            0x00007f1c892260c9: cmp     0x70(%r15),%r10
            0x00007f1c892260cd: jnb     0x7f1c89226387
            0x00007f1c892260d3: mov     %r10,0x60(%r15)
  0.32%     0x00007f1c892260d7: prefetchnta 0x100(%r10)
            0x00007f1c892260df: mov     0xa8(%r9),%r10
            0x00007f1c892260e6: mov     %r10,0x0(%rbp)
            0x00007f1c892260ea: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.75%     0x00007f1c892260f1: mov     %r12d,0xc(%rbp)
  0.11%     0x00007f1c892260f5: mov     %r12,0x10(%rbp)
            0x00007f1c892260f9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c892260fd: mov     0x60(%r15),%rax
  0.32%     0x00007f1c89226101: mov     %rax,%r10
            0x00007f1c89226104: add     $0x10,%r10
            0x00007f1c89226108: cmp     0x70(%r15),%r10
            0x00007f1c8922610c: jnb     0x7f1c8922641d
            0x00007f1c89226112: mov     %r10,0x60(%r15)
  0.43%     0x00007f1c89226116: prefetchnta 0x100(%r10)
  0.11%     0x00007f1c8922611e: mov     0x10(%rsp),%r10
            0x00007f1c89226123: mov     0xa8(%r10),%r10
            0x00007f1c8922612a: mov     %r10,(%rax)
  0.32%     0x00007f1c8922612d: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f1c89226134: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89226138: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c8922613b: mov     %rax,%rcx
  0.54%     0x00007f1c8922613e: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89226141: mov     %rbp,%rax
            0x00007f1c89226144: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89226147: shr     $0x9,%rax
  0.54%     0x00007f1c8922614b: movabs  $0x7f1c9d395000,%r13
            0x00007f1c89226155: mov     %r12l,0x0(%r13,%rax)
            0x00007f1c8922615a: mov     %r12d,0x18(%rbp)
            0x00007f1c8922615e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.34%     0x00007f1c89226163: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89226167: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c8922616b: mov     %rdx,%r10
  0.43%     0x00007f1c8922616e: shr     $0x9,%r10
            0x00007f1c89226172: movabs  $0x7f1c9d395000,%rdx
            0x00007f1c8922617c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89226180: mov     %ecx,0x1c(%rbx)
  0.54%     0x00007f1c89226183: mov     %rbx,%r10
            0x00007f1c89226186: shr     $0x9,%r10
            0x00007f1c8922618a: movabs  $0x7f1c9d395000,%rcx
            0x00007f1c89226194: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.64%     0x00007f1c89226198: cmp     $0x1,%r8d
            0x00007f1c8922619c: jle     0x7f1c89225e50    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c892261a2: mov     $0x1,%r10d
            0x00007f1c892261a8: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 51.61%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (217 bytes) 

            0x00007f1c89225e4b: jmpq    0x7f1c89225fcd
            0x00007f1c89225e50: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89225e55: cmp     $0x40000,%edx
            0x00007f1c89225e5b: jnbe    0x7f1c89226525
            0x00007f1c89225e61: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.54%     0x00007f1c89225e64: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1c89225e67: cmp     $0x40000,%edx
            0x00007f1c89225e6d: jnbe    0x7f1c892264a7
            0x00007f1c89225e73: mov     %rbx,%rbp
            0x00007f1c89225e76: mov     %rsi,0x38(%rsp)
  0.54%     0x00007f1c89225e7b: mov     %r9,0x30(%rsp)
            0x00007f1c89225e80: mov     %r11,0x20(%rsp)
            0x00007f1c89225e85: mov     %r14,0x18(%rsp)
            0x00007f1c89225e8a: mov     %edi,(%rsp)
  0.64%     0x00007f1c89225e8d: mov     %r8d,0x8(%rsp)
            0x00007f1c89225e92: mov     0x60(%r15),%r10
            0x00007f1c89225e96: shl     $0x2,%rcx
            0x00007f1c89225e9a: add     $0x17,%rcx
  0.64%     0x00007f1c89225e9e: mov     %rcx,%r11
            0x00007f1c89225ea1: and     $0xfffffffffffffff8,%r11
            0x00007f1c89225ea5: mov     %r10,%r8
            0x00007f1c89225ea8: add     %r11,%r8
  0.86%     0x00007f1c89225eab: cmp     0x70(%r15),%r8
            0x00007f1c89225eaf: jnb     0x7f1c892264c6
            0x00007f1c89225eb5: mov     %r8,0x60(%r15)
            0x00007f1c89225eb9: prefetchnta 0x100(%r8)
            0x00007f1c89225ec1: movq    $0x1,(%r10)
  0.43%     0x00007f1c89225ec8: prefetchnta 0x140(%r8)
            0x00007f1c89225ed0: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f1c89225ed8: mov     %edx,0xc(%r10)
            0x00007f1c89225edc: prefetchnta 0x180(%r8)
  0.54%     0x00007f1c89225ee4: mov     %r10,%rdi
            0x00007f1c89225ee7: add     $0x10,%rdi
            0x00007f1c89225eeb: shr     $0x3,%rcx
            0x00007f1c89225eef: add     $0xfffffffffffffffe,%rcx
  0.32%     0x00007f1c89225ef3: xor     %rax,%rax
            0x00007f1c89225ef6: shl     $0x3,%rcx
            0x00007f1c89225efa: rep stosb (%rdi)
 10.39%     0x00007f1c89225efd: mov     %r10,%r11
            0x00007f1c89225f00: mov     %rbp,%r8
            0x00007f1c89225f03: mov     %r11d,0x20(%rbp)
  0.21%     0x00007f1c89225f07: mov     %rbp,%r10
            0x00007f1c89225f0a: shr     $0x9,%r10
            0x00007f1c89225f0e: movabs  $0x7f1c9d395000,%r11
            0x00007f1c89225f18: mov     %r12l,(%r11,%r10)
  0.64%     0x00007f1c89225f1c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.28%     0x00007f1c89225f21: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f1c89225f25: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f1c89226681
            0x00007f1c89225f29: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.64%     0x00007f1c89225f2e: mov     0x28(%rsp),%r10
            0x00007f1c89225f33: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f1c89225f39: vcvttss2si %xmm0,%r10d
  0.86%     0x00007f1c89225f3d: cmp     $0x80000000,%r10d
         ╭  0x00007f1c89225f44: jne     0x7f1c89225f56
         │  0x00007f1c89225f46: sub     $0x8,%rsp
         │  0x00007f1c89225f4a: vmovss  %xmm0,(%rsp)
         │  0x00007f1c89225f4f: callq   0x7f1c890520a0    ;   {runtime_call}
         │  0x00007f1c89225f54: pop     %r10
         ↘  0x00007f1c89225f56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1c89225f5a: mov     0x58(%rsp),%r11
  0.43%     0x00007f1c89225f5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1c89226691
            0x00007f1c89225f63: mov     0x90(%rsp),%ebp
....................................................................................................
 27.62%  <total for region 2>

....[Hottest Regions]...............................................................................
 51.61%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (569 bytes) 
 27.62%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (217 bytes) 
  2.14%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.96%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (16 bytes) 
  0.64%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (0 bytes) 
  0.43%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.32%   [kernel.kallsyms]  rcu_all_qs (0 bytes) 
  0.32%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.32%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.32%   [kernel.kallsyms]  __mod_memcg_lruvec_state (25 bytes) 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.32%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (44 bytes) 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do (0 bytes) 
  0.32%           libjvm.so  ParallelTaskTerminator::offer_termination (0 bytes) 
  0.32%        libc-2.31.so  _int_malloc (32 bytes) 
  0.32%        libc-2.31.so  _int_malloc (0 bytes) 
  0.21%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 (1 bytes) 
  0.21%   [kernel.kallsyms]  smp_call_function_single (4 bytes) 
  0.21%   [kernel.kallsyms]  __mod_node_page_state (27 bytes) 
  0.21%   [kernel.kallsyms]  __mod_lruvec_state (25 bytes) 
 12.42%  <...other 106 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 81.48%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 
  2.14%   [kernel.kallsyms]  native_write_msr 
  0.86%        libc-2.31.so  _int_malloc 
  0.54%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  0.54%   [kernel.kallsyms]  free_pcppages_bulk 
  0.43%        libc-2.31.so  malloc 
  0.43%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.43%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.43%        libc-2.31.so  _int_free 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.32%   [kernel.kallsyms]  __mod_node_page_state 
  0.32%        libc-2.31.so  unlink_chunk.isra.0 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.32%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.32%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.32%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.32%   [kernel.kallsyms]  rcu_all_qs 
  0.32%        libc-2.31.so  malloc_consolidate 
  0.21%   [kernel.kallsyms]  psi_group_change 
  0.21%           libjvm.so  SpinPause 
  9.31%  <...other 79 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 82.01%         C2, level 4
  9.21%   [kernel.kallsyms]
  3.43%           libjvm.so
  3.10%        libc-2.31.so
  1.82%    libfcml.so.0.0.0
  0.21%         interpreter
  0.11%      perf-51317.map
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (934). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       649.126          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
