# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1334.331 ns/op
# Warmup Iteration   2: 698.542 ns/op
# Warmup Iteration   3: 636.439 ns/op
# Warmup Iteration   4: 638.861 ns/op
# Warmup Iteration   5: 642.459 ns/op
Iteration   1: 647.841 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  647.841 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 139611 total address lines.
Perf output processed (skipped 11.945 seconds):
 Column 1: cycles (919 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (569 bytes) 

            0x00007f4f19221df9: vcvttss2si %xmm0,%r10d
  0.11%     0x00007f4f19221dfd: cmp     $0x80000000,%r10d
         ╭  0x00007f4f19221e04: jne     0x7f4f19221e16
         │  0x00007f4f19221e06: sub     $0x8,%rsp
         │  0x00007f4f19221e0a: vmovss  %xmm0,(%rsp)
         │  0x00007f4f19221e0f: callq   0x7f4f190520a0    ;   {runtime_call}
         │  0x00007f4f19221e14: pop     %r10
         ↘  0x00007f4f19221e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4f19221e1a: mov     0x58(%rsp),%r11
  0.33%     0x00007f4f19221e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4f19222551
            0x00007f4f19221e23: mov     0x90(%rsp),%ebp
            0x00007f4f19221e2a: cmp     %r10d,%ebp
            0x00007f4f19221e2d: jnb     0x7f4f192223ed
            0x00007f4f19221e33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.76%     0x00007f4f19221e38: mov     0x28(%rsp),%r10
            0x00007f4f19221e3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f4f19221e41: mov     %r9,%r10
            0x00007f4f19221e44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.65%     0x00007f4f19221e46: shr     $0x9,%r10
            0x00007f4f19221e4a: movabs  $0x7f4f2d6ef000,%rcx
            0x00007f4f19221e54: mov     %r12l,(%rcx,%r10)
            0x00007f4f19221e58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.33%     0x00007f4f19221e5b: test    %eax,0x168e219f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f4f19221e61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4f1922256d
            0x00007f4f19221e65: cmp     %r10d,%ebp
            0x00007f4f19221e68: jnl     0x7f4f19222093    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f4f19221e6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.22%     0x00007f4f19221e71: mov     0x8(%rsp),%r8d
            0x00007f4f19221e76: mov     (%rsp),%edi
  3.16%     0x00007f4f19221e79: mov     0x18(%rsp),%r14
            0x00007f4f19221e7e: mov     0x20(%rsp),%r11
            0x00007f4f19221e83: mov     0x30(%rsp),%r9
            0x00007f4f19221e88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.54%     0x00007f4f19221e8d: mov     0x60(%r15),%rbx
            0x00007f4f19221e91: mov     %rbx,%r10
            0x00007f4f19221e94: add     $0x28,%r10
            0x00007f4f19221e98: cmp     0x70(%r15),%r10
            0x00007f4f19221e9c: jnb     0x7f4f192220a2
  0.65%     0x00007f4f19221ea2: mov     %r10,0x60(%r15)
            0x00007f4f19221ea6: prefetchnta 0x100(%r10)
            0x00007f4f19221eae: mov     0xa8(%r11),%r10
            0x00007f4f19221eb5: mov     %r10,(%rbx)
  0.54%     0x00007f4f19221eb8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f4f19221ebf: mov     %r12d,0xc(%rbx)
            0x00007f4f19221ec3: mov     %r12,0x10(%rbx)
            0x00007f4f19221ec7: mov     %r12,0x18(%rbx)
  0.98%     0x00007f4f19221ecb: mov     %r12d,0x20(%rbx)
            0x00007f4f19221ecf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f4f19221ed2: mov     0x60(%r15),%rax
            0x00007f4f19221ed6: mov     %rax,%r10
  0.22%     0x00007f4f19221ed9: add     $0x20,%r10
            0x00007f4f19221edd: cmp     0x70(%r15),%r10
            0x00007f4f19221ee1: jnb     0x7f4f19222128
            0x00007f4f19221ee7: mov     %r10,0x60(%r15)
            0x00007f4f19221eeb: prefetchnta 0x100(%r10)
  0.54%     0x00007f4f19221ef3: mov     0xa8(%r14),%r10
            0x00007f4f19221efa: mov     %r10,(%rax)
  0.22%     0x00007f4f19221efd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f4f19221f04: mov     %r12d,0xc(%rax)
  0.54%     0x00007f4f19221f08: mov     %r12,0x10(%rax)
  0.22%     0x00007f4f19221f0c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221f10: mov     %rbx,%rcx
            0x00007f4f19221f13: mov     %rax,%r10
  0.22%     0x00007f4f19221f16: mov     %r10d,0xc(%rbx)
            0x00007f4f19221f1a: shr     $0x9,%rcx
  0.11%     0x00007f4f19221f1e: movabs  $0x7f4f2d6ef000,%r10
            0x00007f4f19221f28: mov     %r12l,(%r10,%rcx)
  0.76%     0x00007f4f19221f2c: mov     %r12d,0x14(%rbx)
            0x00007f4f19221f30: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.41%     0x00007f4f19221f35: mov     0x60(%r15),%rdx
            0x00007f4f19221f39: mov     %rdx,%r10
            0x00007f4f19221f3c: add     $0x18,%r10
  0.54%     0x00007f4f19221f40: cmp     0x70(%r15),%r10
            0x00007f4f19221f44: jnb     0x7f4f192221b6
            0x00007f4f19221f4a: mov     %r10,0x60(%r15)
            0x00007f4f19221f4e: prefetchnta 0x100(%r10)
            0x00007f4f19221f56: mov     0xa8(%rsi),%r10
  0.76%     0x00007f4f19221f5d: mov     %r10,(%rdx)
            0x00007f4f19221f60: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f4f19221f67: mov     %r12d,0xc(%rdx)
            0x00007f4f19221f6b: mov     %r12d,0x14(%rdx)
  0.54%     0x00007f4f19221f6f: mov     %r13,0x58(%rsp)
            0x00007f4f19221f74: mov     %ebp,0x90(%rsp)
            0x00007f4f19221f7b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221f7e: mov     0x60(%r15),%rbp
  0.33%     0x00007f4f19221f82: mov     %rbp,%r10
            0x00007f4f19221f85: add     $0x20,%r10
            0x00007f4f19221f89: cmp     0x70(%r15),%r10
            0x00007f4f19221f8d: jnb     0x7f4f19222247
            0x00007f4f19221f93: mov     %r10,0x60(%r15)
  0.87%     0x00007f4f19221f97: prefetchnta 0x100(%r10)
            0x00007f4f19221f9f: mov     0xa8(%r9),%r10
            0x00007f4f19221fa6: mov     %r10,0x0(%rbp)
            0x00007f4f19221faa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  1.09%     0x00007f4f19221fb1: mov     %r12d,0xc(%rbp)
            0x00007f4f19221fb5: mov     %r12,0x10(%rbp)
            0x00007f4f19221fb9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221fbd: mov     0x60(%r15),%rax
  0.11%     0x00007f4f19221fc1: mov     %rax,%r10
            0x00007f4f19221fc4: add     $0x10,%r10
            0x00007f4f19221fc8: cmp     0x70(%r15),%r10
            0x00007f4f19221fcc: jnb     0x7f4f192222dd
            0x00007f4f19221fd2: mov     %r10,0x60(%r15)
  0.54%     0x00007f4f19221fd6: prefetchnta 0x100(%r10)
            0x00007f4f19221fde: mov     0x10(%rsp),%r10
            0x00007f4f19221fe3: mov     0xa8(%r10),%r10
            0x00007f4f19221fea: mov     %r10,(%rax)
  0.65%     0x00007f4f19221fed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.22%     0x00007f4f19221ff4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221ff8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221ffb: mov     %rax,%rcx
  0.22%     0x00007f4f19221ffe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19222001: mov     %rbp,%rax
            0x00007f4f19222004: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19222007: shr     $0x9,%rax
  0.65%     0x00007f4f1922200b: movabs  $0x7f4f2d6ef000,%r13
            0x00007f4f19222015: mov     %r12l,0x0(%r13,%rax)
            0x00007f4f1922201a: mov     %r12d,0x18(%rbp)
            0x00007f4f1922201e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.08%     0x00007f4f19222023: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19222027: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f1922202b: mov     %rdx,%r10
  0.33%     0x00007f4f1922202e: shr     $0x9,%r10
            0x00007f4f19222032: movabs  $0x7f4f2d6ef000,%rdx
            0x00007f4f1922203c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19222040: mov     %ecx,0x1c(%rbx)
  0.44%     0x00007f4f19222043: mov     %rbx,%r10
            0x00007f4f19222046: shr     $0x9,%r10
            0x00007f4f1922204a: movabs  $0x7f4f2d6ef000,%rcx
            0x00007f4f19222054: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.33%     0x00007f4f19222058: cmp     $0x1,%r8d
            0x00007f4f1922205c: jle     0x7f4f19221d10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19222062: mov     $0x1,%r10d
            0x00007f4f19222068: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 53.10%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (244 bytes) 

            0x00007f4f19221cce: mov     $0x2001833d,%r11d  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f4f19221cd4: movabs  $0x0,%r14
            0x00007f4f19221cde: lea     (%r14,%r11,8),%r14
            0x00007f4f19221ce2: mov     $0x2001959f,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.11%     0x00007f4f19221ce8: shl     $0x3,%r11
            0x00007f4f19221cec: mov     $0x20000d06,%r9d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f4f19221cf2: shl     $0x3,%r9
            0x00007f4f19221cf6: mov     $0x200196b2,%ecx  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f4f19221cfb: movabs  $0x0,%rsi
            0x00007f4f19221d05: lea     (%rsi,%rcx,8),%rsi
  0.11%     0x00007f4f19221d09: xor     %ebp,%ebp
            0x00007f4f19221d0b: jmpq    0x7f4f19221e8d
            0x00007f4f19221d10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221d15: cmp     $0x40000,%edx
            0x00007f4f19221d1b: jnbe    0x7f4f192223e5
            0x00007f4f19221d21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.33%     0x00007f4f19221d24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4f19221d27: cmp     $0x40000,%edx
            0x00007f4f19221d2d: jnbe    0x7f4f19222367
            0x00007f4f19221d33: mov     %rbx,%rbp
            0x00007f4f19221d36: mov     %rsi,0x38(%rsp)
  0.65%     0x00007f4f19221d3b: mov     %r9,0x30(%rsp)
            0x00007f4f19221d40: mov     %r11,0x20(%rsp)
            0x00007f4f19221d45: mov     %r14,0x18(%rsp)
            0x00007f4f19221d4a: mov     %edi,(%rsp)
  0.76%     0x00007f4f19221d4d: mov     %r8d,0x8(%rsp)
            0x00007f4f19221d52: mov     0x60(%r15),%r10
            0x00007f4f19221d56: shl     $0x2,%rcx
            0x00007f4f19221d5a: add     $0x17,%rcx
  0.22%     0x00007f4f19221d5e: mov     %rcx,%r11
            0x00007f4f19221d61: and     $0xfffffffffffffff8,%r11
            0x00007f4f19221d65: mov     %r10,%r8
            0x00007f4f19221d68: add     %r11,%r8
  0.65%     0x00007f4f19221d6b: cmp     0x70(%r15),%r8
            0x00007f4f19221d6f: jnb     0x7f4f19222386
            0x00007f4f19221d75: mov     %r8,0x60(%r15)
            0x00007f4f19221d79: prefetchnta 0x100(%r8)
            0x00007f4f19221d81: movq    $0x1,(%r10)
  0.54%     0x00007f4f19221d88: prefetchnta 0x140(%r8)
            0x00007f4f19221d90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f4f19221d98: mov     %edx,0xc(%r10)
            0x00007f4f19221d9c: prefetchnta 0x180(%r8)
  0.54%     0x00007f4f19221da4: mov     %r10,%rdi
            0x00007f4f19221da7: add     $0x10,%rdi
            0x00007f4f19221dab: shr     $0x3,%rcx
            0x00007f4f19221daf: add     $0xfffffffffffffffe,%rcx
  0.76%     0x00007f4f19221db3: xor     %rax,%rax
            0x00007f4f19221db6: shl     $0x3,%rcx
            0x00007f4f19221dba: rep stosb (%rdi)
  9.79%     0x00007f4f19221dbd: mov     %r10,%r11
  0.11%     0x00007f4f19221dc0: mov     %rbp,%r8
            0x00007f4f19221dc3: mov     %r11d,0x20(%rbp)
  0.54%     0x00007f4f19221dc7: mov     %rbp,%r10
            0x00007f4f19221dca: shr     $0x9,%r10
            0x00007f4f19221dce: movabs  $0x7f4f2d6ef000,%r11
            0x00007f4f19221dd8: mov     %r12l,(%r11,%r10)
  0.76%     0x00007f4f19221ddc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.64%     0x00007f4f19221de1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f4f19221de5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f4f19222541
            0x00007f4f19221de9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.22%     0x00007f4f19221dee: mov     0x28(%rsp),%r10
            0x00007f4f19221df3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f4f19221df9: vcvttss2si %xmm0,%r10d
  0.11%     0x00007f4f19221dfd: cmp     $0x80000000,%r10d
         ╭  0x00007f4f19221e04: jne     0x7f4f19221e16
         │  0x00007f4f19221e06: sub     $0x8,%rsp
         │  0x00007f4f19221e0a: vmovss  %xmm0,(%rsp)
         │  0x00007f4f19221e0f: callq   0x7f4f190520a0    ;   {runtime_call}
         │  0x00007f4f19221e14: pop     %r10
         ↘  0x00007f4f19221e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4f19221e1a: mov     0x58(%rsp),%r11
  0.33%     0x00007f4f19221e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4f19222551
            0x00007f4f19221e23: mov     0x90(%rsp),%ebp
....................................................................................................
 27.86%  <total for region 2>

....[Hottest Regions]...............................................................................
 53.10%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (569 bytes) 
 27.86%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (244 bytes) 
  1.41%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.20%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (28 bytes) 
  0.98%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (39 bytes) 
  0.54%        libc-2.31.so  malloc (0 bytes) 
  0.44%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (16 bytes) 
  0.44%           libjvm.so  SpinPause (9 bytes) 
  0.33%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.33%   [kernel.kallsyms]  page_remove_rmap (15 bytes) 
  0.33%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.33%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (32 bytes) 
  0.33%        libc-2.31.so  _int_malloc (10 bytes) 
  0.22%   [kernel.kallsyms]  x86_pmu_enable (0 bytes) 
  0.22%   [kernel.kallsyms]  __mod_memcg_lruvec_state (30 bytes) 
  0.22%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.22%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 554 (24 bytes) 
  0.22%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 554 (0 bytes) 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_is_alpha (0 bytes) 
  0.22%        libc-2.31.so  malloc_consolidate (0 bytes) 
 10.77%  <...other 95 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.79%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 
  1.41%   [kernel.kallsyms]  native_write_msr 
  1.09%        libc-2.31.so  malloc 
  0.87%        libc-2.31.so  _int_malloc 
  0.76%   [kernel.kallsyms]  free_pcppages_bulk 
  0.54%        libc-2.31.so  _int_free 
  0.44%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.44%           libjvm.so  SpinPause 
  0.44%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 554 
  0.33%   [kernel.kallsyms]  page_remove_rmap 
  0.33%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.33%        libc-2.31.so  malloc_consolidate 
  0.33%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.22%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_is_alpha 
  0.22%        libc-2.31.so  __strchr_avx2 
  0.22%   [kernel.kallsyms]  lock_page_memcg 
  0.22%   [kernel.kallsyms]  psi_group_change 
  0.22%   [kernel.kallsyms]  ext4_do_update_inode 
  0.22%   [kernel.kallsyms]  __mod_lruvec_page_state 
  7.29%  <...other 65 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 84.22%         C2, level 4
  7.40%   [kernel.kallsyms]
  3.92%        libc-2.31.so
  2.50%           libjvm.so
  1.63%    libfcml.so.0.0.0
  0.11%         interpreter
  0.11%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (919). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       647.841          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
