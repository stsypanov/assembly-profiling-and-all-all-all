# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1181.868 ns/op
# Warmup Iteration   2: 673.584 ns/op
# Warmup Iteration   3: 635.687 ns/op
# Warmup Iteration   4: 639.538 ns/op
# Warmup Iteration   5: 644.161 ns/op
Iteration   1: 657.448 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  657.448 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140802 total address lines.
Perf output processed (skipped 12.038 seconds):
 Column 1: cycles (928 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (553 bytes) 

            0x00007fe7fd226188: vcvttss2si %xmm1,%r11d
  0.11%     0x00007fe7fd22618c: cmp     $0x80000000,%r11d
         ╭  0x00007fe7fd226193: jne     0x7fe7fd2261a5
         │  0x00007fe7fd226195: sub     $0x8,%rsp
         │  0x00007fe7fd226199: vmovss  %xmm1,(%rsp)
         │  0x00007fe7fd22619e: callq   0x7fe7fd0520a0    ;   {runtime_call}
         │  0x00007fe7fd2261a3: pop     %r11
         ↘  0x00007fe7fd2261a5: mov     %r11d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fe7fd2261a9: mov     0x58(%rsp),%r10
  0.11%     0x00007fe7fd2261ae: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007fe7fd2268e5
            0x00007fe7fd2261b2: mov     0x90(%rsp),%ebp
            0x00007fe7fd2261b9: cmp     %r11d,%ebp
            0x00007fe7fd2261bc: jnb     0x7fe7fd226781
            0x00007fe7fd2261c2: lea     0x10(%r10,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  1.40%     0x00007fe7fd2261c7: mov     0x28(%rsp),%r10
            0x00007fe7fd2261cc: mov     0x1c(%r10),%r10d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fe7fd2261d0: mov     %r9,%r11
            0x00007fe7fd2261d3: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.32%     0x00007fe7fd2261d5: shr     $0x9,%r11
            0x00007fe7fd2261d9: movabs  $0x7fe811a60000,%rcx
            0x00007fe7fd2261e3: mov     %r12l,(%rcx,%r11)
            0x00007fe7fd2261e7: mov     %r8,%r11
  0.22%     0x00007fe7fd2261ea: mov     %r11d,(%r9)       ; OopMap{r10=NarrowOop [0]=NarrowOop [40]=Oop off=877}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
            0x00007fe7fd2261ed: test    %eax,0x16c4ee0d(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fe7fd2261f3: mov     0xc(%r10),%r8d    ; implicit exception: dispatches to 0x00007fe7fd226901
            0x00007fe7fd2261f7: cmp     %r8d,%ebp
            0x00007fe7fd2261fa: jnl     0x7fe7fd22641d    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.54%     0x00007fe7fd226200: mov     %r10,%rdx         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fe7fd226203: mov     0x8(%rsp),%r13d
            0x00007fe7fd226208: mov     (%rsp),%r9d
  3.02%     0x00007fe7fd22620c: mov     0x18(%rsp),%rsi
            0x00007fe7fd226211: mov     0x20(%rsp),%r11
  0.11%     0x00007fe7fd226216: mov     0x30(%rsp),%r8
            0x00007fe7fd22621b: mov     0x38(%rsp),%rdi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.43%     0x00007fe7fd226220: mov     0x60(%r15),%rbx
            0x00007fe7fd226224: mov     %rbx,%r10
            0x00007fe7fd226227: add     $0x28,%r10
            0x00007fe7fd22622b: cmp     0x70(%r15),%r10
            0x00007fe7fd22622f: jnb     0x7fe7fd22642c
  0.65%     0x00007fe7fd226235: mov     %r10,0x60(%r15)
            0x00007fe7fd226239: prefetchnta 0x100(%r10)
            0x00007fe7fd226241: mov     0xa8(%r11),%r10
            0x00007fe7fd226248: mov     %r10,(%rbx)
  0.43%     0x00007fe7fd22624b: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fe7fd226252: mov     %r12d,0xc(%rbx)
            0x00007fe7fd226256: mov     %r12,0x10(%rbx)
            0x00007fe7fd22625a: mov     %r12,0x18(%rbx)
  0.54%     0x00007fe7fd22625e: mov     %r12d,0x20(%rbx)
            0x00007fe7fd226262: mov     %r9d,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fe7fd226266: mov     0x60(%r15),%rax
            0x00007fe7fd22626a: mov     %rax,%r10
  1.08%     0x00007fe7fd22626d: add     $0x20,%r10
            0x00007fe7fd226271: cmp     0x70(%r15),%r10
            0x00007fe7fd226275: jnb     0x7fe7fd2264b5
            0x00007fe7fd22627b: mov     %r10,0x60(%r15)
            0x00007fe7fd22627f: prefetchnta 0x100(%r10)
  0.43%     0x00007fe7fd226287: mov     0xa8(%rsi),%r10
            0x00007fe7fd22628e: mov     %r10,(%rax)
            0x00007fe7fd226291: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fe7fd226298: mov     %r12d,0xc(%rax)
  0.43%     0x00007fe7fd22629c: mov     %r12,0x10(%rax)
            0x00007fe7fd2262a0: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2262a4: mov     %rbx,%rcx
            0x00007fe7fd2262a7: mov     %rax,%r10
  0.54%     0x00007fe7fd2262aa: mov     %r10d,0xc(%rbx)
            0x00007fe7fd2262ae: shr     $0x9,%rcx
            0x00007fe7fd2262b2: movabs  $0x7fe811a60000,%r10
            0x00007fe7fd2262bc: mov     %r12l,(%r10,%rcx)
  0.54%     0x00007fe7fd2262c0: mov     %r12d,0x14(%rbx)
            0x00007fe7fd2262c4: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.30%     0x00007fe7fd2262c9: mov     0x60(%r15),%rcx
            0x00007fe7fd2262cd: mov     %rcx,%r10
            0x00007fe7fd2262d0: add     $0x18,%r10
  0.54%     0x00007fe7fd2262d4: cmp     0x70(%r15),%r10
            0x00007fe7fd2262d8: jnb     0x7fe7fd226543
  0.11%     0x00007fe7fd2262de: mov     %r10,0x60(%r15)
            0x00007fe7fd2262e2: prefetchnta 0x100(%r10)
            0x00007fe7fd2262ea: mov     0xa8(%rdi),%r10
  0.65%     0x00007fe7fd2262f1: mov     %r10,(%rcx)
            0x00007fe7fd2262f4: movl    $0x200196b2,0x8(%rcx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fe7fd2262fb: mov     %r12d,0xc(%rcx)
            0x00007fe7fd2262ff: mov     %r12d,0x14(%rcx)
  0.54%     0x00007fe7fd226303: mov     %rdx,0x58(%rsp)
            0x00007fe7fd226308: mov     %ebp,0x90(%rsp)
            0x00007fe7fd22630f: mov     %r9d,0x10(%rcx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd226313: mov     0x60(%r15),%rbp
  1.08%     0x00007fe7fd226317: mov     %rbp,%r10
            0x00007fe7fd22631a: add     $0x20,%r10
            0x00007fe7fd22631e: cmp     0x70(%r15),%r10
            0x00007fe7fd226322: jnb     0x7fe7fd2265d8
            0x00007fe7fd226328: mov     %r10,0x60(%r15)
  0.54%     0x00007fe7fd22632c: prefetchnta 0x100(%r10)
            0x00007fe7fd226334: mov     0xa8(%r8),%r10
            0x00007fe7fd22633b: mov     %r10,0x0(%rbp)
            0x00007fe7fd22633f: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.54%     0x00007fe7fd226346: mov     %r12d,0xc(%rbp)
            0x00007fe7fd22634a: mov     %r12,0x10(%rbp)
            0x00007fe7fd22634e: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd226352: mov     0x60(%r15),%rax
  0.75%     0x00007fe7fd226356: mov     %rax,%r10
            0x00007fe7fd226359: add     $0x10,%r10
            0x00007fe7fd22635d: cmp     0x70(%r15),%r10
            0x00007fe7fd226361: jnb     0x7fe7fd226672
  0.11%     0x00007fe7fd226367: mov     %r10,0x60(%r15)
  0.75%     0x00007fe7fd22636b: prefetchnta 0x100(%r10)
            0x00007fe7fd226373: mov     0x10(%rsp),%r10
            0x00007fe7fd226378: mov     0xa8(%r10),%r10
            0x00007fe7fd22637f: mov     %r10,(%rax)
  0.75%     0x00007fe7fd226382: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fe7fd226389: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd22638d: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd226390: mov     %rax,%rdx
  0.65%     0x00007fe7fd226393: mov     %edx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd226396: mov     %rbp,%rax
            0x00007fe7fd226399: mov     %rcx,%rdx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd22639c: shr     $0x9,%rax
  0.65%     0x00007fe7fd2263a0: movabs  $0x7fe811a60000,%r14
            0x00007fe7fd2263aa: mov     %r12l,(%r14,%rax)
            0x00007fe7fd2263ae: mov     %r12d,0x18(%rbp)
            0x00007fe7fd2263b2: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.64%     0x00007fe7fd2263b7: mov     %r10d,0xc(%rcx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2263bb: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2263bf: mov     %rcx,%r10
  0.97%     0x00007fe7fd2263c2: shr     $0x9,%r10
            0x00007fe7fd2263c6: movabs  $0x7fe811a60000,%rcx
            0x00007fe7fd2263d0: mov     %r12l,(%rcx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2263d4: mov     %edx,0x1c(%rbx)
  0.11%     0x00007fe7fd2263d7: mov     %rbx,%r10
            0x00007fe7fd2263da: shr     $0x9,%r10
            0x00007fe7fd2263de: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2263e2: cmp     $0x1,%r13d
            0x00007fe7fd2263e6: jle     0x7fe7fd2260a1    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2263ec: mov     $0x1,%r10d
....................................................................................................
 53.45%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (235 bytes) 

            0x00007fe7fd226064: movabs  $0x0,%r11
            0x00007fe7fd22606e: lea     (%r11,%r10,8),%r11
  0.22%     0x00007fe7fd226072: mov     $0x20000d06,%r10d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fe7fd226078: movabs  $0x0,%r8
            0x00007fe7fd226082: lea     (%r8,%r10,8),%r8
            0x00007fe7fd226086: mov     $0x200196b2,%r10d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fe7fd22608c: movabs  $0x0,%rdi
            0x00007fe7fd226096: lea     (%rdi,%r10,8),%rdi
            0x00007fe7fd22609a: xor     %ebp,%ebp
            0x00007fe7fd22609c: jmpq    0x7fe7fd226220
  0.32%     0x00007fe7fd2260a1: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2260a6: cmp     $0x40000,%edx
            0x00007fe7fd2260ac: jnbe    0x7fe7fd226779
            0x00007fe7fd2260b2: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe7fd2260b5: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007fe7fd2260b8: cmp     $0x40000,%edx
            0x00007fe7fd2260be: jnbe    0x7fe7fd2266fc
            0x00007fe7fd2260c4: mov     %rbx,%rbp
            0x00007fe7fd2260c7: mov     %rdi,0x38(%rsp)
            0x00007fe7fd2260cc: mov     %r8,0x30(%rsp)
  0.65%     0x00007fe7fd2260d1: mov     %r11,0x20(%rsp)
            0x00007fe7fd2260d6: mov     %rsi,0x18(%rsp)
            0x00007fe7fd2260db: mov     %r9d,(%rsp)
            0x00007fe7fd2260df: mov     %r13d,0x8(%rsp)
  0.54%     0x00007fe7fd2260e4: mov     0x60(%r15),%r10
            0x00007fe7fd2260e8: shl     $0x2,%rcx
            0x00007fe7fd2260ec: add     $0x17,%rcx
            0x00007fe7fd2260f0: mov     %rcx,%r11
  0.43%     0x00007fe7fd2260f3: and     $0xfffffffffffffff8,%r11
            0x00007fe7fd2260f7: mov     %r10,%r8
            0x00007fe7fd2260fa: add     %r11,%r8
            0x00007fe7fd2260fd: cmp     0x70(%r15),%r8
            0x00007fe7fd226101: jnb     0x7fe7fd22671c
  0.65%     0x00007fe7fd226107: mov     %r8,0x60(%r15)
            0x00007fe7fd22610b: prefetchnta 0x100(%r8)
            0x00007fe7fd226113: movq    $0x1,(%r10)
            0x00007fe7fd22611a: prefetchnta 0x140(%r8)
  0.97%     0x00007fe7fd226122: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fe7fd22612a: mov     %edx,0xc(%r10)
            0x00007fe7fd22612e: prefetchnta 0x180(%r8)
            0x00007fe7fd226136: mov     %r10,%rdi
  0.65%     0x00007fe7fd226139: add     $0x10,%rdi
            0x00007fe7fd22613d: shr     $0x3,%rcx
            0x00007fe7fd226141: add     $0xfffffffffffffffe,%rcx
            0x00007fe7fd226145: xor     %rax,%rax
  0.22%     0x00007fe7fd226148: shl     $0x3,%rcx
            0x00007fe7fd22614c: rep stosb (%rdi)
  8.73%     0x00007fe7fd22614f: mov     %rbp,%r8
  0.65%     0x00007fe7fd226152: mov     %r10d,0x20(%rbp)
  0.11%     0x00007fe7fd226156: mov     %rbp,%r10
            0x00007fe7fd226159: shr     $0x9,%r10
            0x00007fe7fd22615d: movabs  $0x7fe811a60000,%r11
  0.43%     0x00007fe7fd226167: mov     %r12l,(%r11,%r10)
            0x00007fe7fd22616b: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.07%     0x00007fe7fd226170: mov     0x20(%rbp),%r11d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007fe7fd226174: mov     0xc(%r11),%r10d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fe7fd2268d5
            0x00007fe7fd226178: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.75%     0x00007fe7fd22617d: mov     0x28(%rsp),%r10
            0x00007fe7fd226182: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007fe7fd226188: vcvttss2si %xmm1,%r11d
  0.11%     0x00007fe7fd22618c: cmp     $0x80000000,%r11d
         ╭  0x00007fe7fd226193: jne     0x7fe7fd2261a5
         │  0x00007fe7fd226195: sub     $0x8,%rsp
         │  0x00007fe7fd226199: vmovss  %xmm1,(%rsp)
         │  0x00007fe7fd22619e: callq   0x7fe7fd0520a0    ;   {runtime_call}
         │  0x00007fe7fd2261a3: pop     %r11
         ↘  0x00007fe7fd2261a5: mov     %r11d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fe7fd2261a9: mov     0x58(%rsp),%r10
  0.11%     0x00007fe7fd2261ae: mov     0xc(%r10),%r11d   ; implicit exception: dispatches to 0x00007fe7fd2268e5
            0x00007fe7fd2261b2: mov     0x90(%rsp),%ebp
....................................................................................................
 27.91%  <total for region 2>

....[Hottest Regions]...............................................................................
 53.45%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (553 bytes) 
 27.91%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (235 bytes) 
  1.94%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.86%   [kernel.kallsyms]  syscall_exit_to_user_mode (23 bytes) 
  0.75%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (86 bytes) 
  0.54%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (14 bytes) 
  0.54%           libjvm.so  SpinPause (9 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (24 bytes) 
  0.43%        libc-2.31.so  malloc (0 bytes) 
  0.32%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.32%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  0.32%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  0.32%        libc-2.31.so  unlink_chunk.isra.0 (41 bytes) 
  0.22%   [kernel.kallsyms]  __mod_zone_page_state (15 bytes) 
  0.22%   [kernel.kallsyms]  uncharge_page (16 bytes) 
  0.22%   [kernel.kallsyms]  pipe_write (21 bytes) 
  0.22%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.22%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (0 bytes) 
  0.22%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 557 (21 bytes) 
 10.13%  <...other 88 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.41%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 
  1.94%   [kernel.kallsyms]  native_write_msr 
  0.86%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.75%        libc-2.31.so  _int_malloc 
  0.65%        libc-2.31.so  malloc 
  0.54%        libc-2.31.so  _int_free 
  0.54%           libjvm.so  SpinPause 
  0.43%   [kernel.kallsyms]  page_remove_rmap 
  0.43%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 557 
  0.43%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.32%   [kernel.kallsyms]  free_pcppages_bulk 
  0.32%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.32%        libc-2.31.so  unlink_chunk.isra.0 
  0.32%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.32%   [kernel.kallsyms]  uncharge_page 
  0.22%   [kernel.kallsyms]  __mod_zone_page_state 
  0.22%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.22%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  7.00%  <...other 60 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 83.94%         C2, level 4
  8.51%   [kernel.kallsyms]
  3.13%           libjvm.so
  3.02%        libc-2.31.so
  1.08%    libfcml.so.0.0.0
  0.11%      perf-50087.map
  0.11%         interpreter
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (928). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       657.448          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
