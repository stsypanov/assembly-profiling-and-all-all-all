# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1184.492 ns/op
# Warmup Iteration   2: 669.287 ns/op
# Warmup Iteration   3: 648.469 ns/op
# Warmup Iteration   4: 643.593 ns/op
# Warmup Iteration   5: 644.648 ns/op
Iteration   1: 645.747 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  645.747 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140606 total address lines.
Perf output processed (skipped 12.082 seconds):
 Column 1: cycles (872 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (527 bytes) 

            0x00007f4611228ef9: vcvttss2si %xmm0,%r10d
  0.69%     0x00007f4611228efd: cmp     $0x80000000,%r10d
         ╭  0x00007f4611228f04: jne     0x7f4611228f16
         │  0x00007f4611228f06: sub     $0x8,%rsp
         │  0x00007f4611228f0a: vmovss  %xmm0,(%rsp)
         │  0x00007f4611228f0f: callq   0x7f46110520a0    ;   {runtime_call}
         │  0x00007f4611228f14: pop     %r10
         ↘  0x00007f4611228f16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4611228f1a: mov     0x58(%rsp),%r11
  0.34%     0x00007f4611228f1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4611229651
            0x00007f4611228f23: mov     0x90(%rsp),%ebp
            0x00007f4611228f2a: cmp     %r10d,%ebp
            0x00007f4611228f2d: jnb     0x7f46112294ed
            0x00007f4611228f33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.57%     0x00007f4611228f38: mov     0x28(%rsp),%r10
            0x00007f4611228f3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f4611228f41: mov     %r9,%r10
            0x00007f4611228f44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.34%     0x00007f4611228f46: shr     $0x9,%r10
            0x00007f4611228f4a: movabs  $0x7f462474c000,%rcx
            0x00007f4611228f54: mov     %r12l,(%rcx,%r10)
            0x00007f4611228f58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.57%     0x00007f4611228f5b: test    %eax,0x1593809f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f4611228f61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f461122966d
            0x00007f4611228f65: cmp     %r10d,%ebp
            0x00007f4611228f68: jnl     0x7f4611229193    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f4611228f6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.57%     0x00007f4611228f71: mov     0x8(%rsp),%r8d
            0x00007f4611228f76: mov     (%rsp),%edi
  3.44%     0x00007f4611228f79: mov     0x18(%rsp),%r14
            0x00007f4611228f7e: mov     0x20(%rsp),%r11
            0x00007f4611228f83: mov     0x30(%rsp),%r9
            0x00007f4611228f88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.57%     0x00007f4611228f8d: mov     0x60(%r15),%rbx
            0x00007f4611228f91: mov     %rbx,%r10
            0x00007f4611228f94: add     $0x28,%r10
            0x00007f4611228f98: cmp     0x70(%r15),%r10
            0x00007f4611228f9c: jnb     0x7f46112291a2
  0.34%     0x00007f4611228fa2: mov     %r10,0x60(%r15)
            0x00007f4611228fa6: prefetchnta 0x100(%r10)
            0x00007f4611228fae: mov     0xa8(%r11),%r10
            0x00007f4611228fb5: mov     %r10,(%rbx)
  0.34%     0x00007f4611228fb8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f4611228fbf: mov     %r12d,0xc(%rbx)
            0x00007f4611228fc3: mov     %r12,0x10(%rbx)
            0x00007f4611228fc7: mov     %r12,0x18(%rbx)
  0.46%     0x00007f4611228fcb: mov     %r12d,0x20(%rbx)
            0x00007f4611228fcf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f4611228fd2: mov     0x60(%r15),%rax
            0x00007f4611228fd6: mov     %rax,%r10
            0x00007f4611228fd9: add     $0x20,%r10
            0x00007f4611228fdd: cmp     0x70(%r15),%r10
            0x00007f4611228fe1: jnb     0x7f4611229228
  0.11%     0x00007f4611228fe7: mov     %r10,0x60(%r15)
            0x00007f4611228feb: prefetchnta 0x100(%r10)
  0.46%     0x00007f4611228ff3: mov     0xa8(%r14),%r10
  0.11%     0x00007f4611228ffa: mov     %r10,(%rax)
            0x00007f4611228ffd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f4611229004: mov     %r12d,0xc(%rax)
  0.80%     0x00007f4611229008: mov     %r12,0x10(%rax)
            0x00007f461122900c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611229010: mov     %rbx,%rcx
            0x00007f4611229013: mov     %rax,%r10
  0.34%     0x00007f4611229016: mov     %r10d,0xc(%rbx)
            0x00007f461122901a: shr     $0x9,%rcx
            0x00007f461122901e: movabs  $0x7f462474c000,%r10
            0x00007f4611229028: mov     %r12l,(%r10,%rcx)
  0.80%     0x00007f461122902c: mov     %r12d,0x14(%rbx)
            0x00007f4611229030: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.55%     0x00007f4611229035: mov     0x60(%r15),%rdx
            0x00007f4611229039: mov     %rdx,%r10
            0x00007f461122903c: add     $0x18,%r10
  0.69%     0x00007f4611229040: cmp     0x70(%r15),%r10
            0x00007f4611229044: jnb     0x7f46112292b6
            0x00007f461122904a: mov     %r10,0x60(%r15)
            0x00007f461122904e: prefetchnta 0x100(%r10)
            0x00007f4611229056: mov     0xa8(%rsi),%r10
  0.57%     0x00007f461122905d: mov     %r10,(%rdx)
            0x00007f4611229060: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f4611229067: mov     %r12d,0xc(%rdx)
            0x00007f461122906b: mov     %r12d,0x14(%rdx)
  0.69%     0x00007f461122906f: mov     %r13,0x58(%rsp)
            0x00007f4611229074: mov     %ebp,0x90(%rsp)
            0x00007f461122907b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f461122907e: mov     0x60(%r15),%rbp
  0.46%     0x00007f4611229082: mov     %rbp,%r10
            0x00007f4611229085: add     $0x20,%r10
            0x00007f4611229089: cmp     0x70(%r15),%r10
            0x00007f461122908d: jnb     0x7f4611229347
            0x00007f4611229093: mov     %r10,0x60(%r15)
  0.46%     0x00007f4611229097: prefetchnta 0x100(%r10)
            0x00007f461122909f: mov     0xa8(%r9),%r10
            0x00007f46112290a6: mov     %r10,0x0(%rbp)
            0x00007f46112290aa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.34%     0x00007f46112290b1: mov     %r12d,0xc(%rbp)
            0x00007f46112290b5: mov     %r12,0x10(%rbp)
            0x00007f46112290b9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f46112290bd: mov     0x60(%r15),%rax
  0.46%     0x00007f46112290c1: mov     %rax,%r10
            0x00007f46112290c4: add     $0x10,%r10
            0x00007f46112290c8: cmp     0x70(%r15),%r10
            0x00007f46112290cc: jnb     0x7f46112293dd
            0x00007f46112290d2: mov     %r10,0x60(%r15)
  0.57%     0x00007f46112290d6: prefetchnta 0x100(%r10)
            0x00007f46112290de: mov     0x10(%rsp),%r10
            0x00007f46112290e3: mov     0xa8(%r10),%r10
  0.11%     0x00007f46112290ea: mov     %r10,(%rax)
  0.57%     0x00007f46112290ed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f46112290f4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f46112290f8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f46112290fb: mov     %rax,%rcx
  0.80%     0x00007f46112290fe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611229101: mov     %rbp,%rax
            0x00007f4611229104: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611229107: shr     $0x9,%rax
  0.46%     0x00007f461122910b: movabs  $0x7f462474c000,%r13
            0x00007f4611229115: mov     %r12l,0x0(%r13,%rax)
            0x00007f461122911a: mov     %r12d,0x18(%rbp)
            0x00007f461122911e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.69%     0x00007f4611229123: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f4611229127: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f461122912b: mov     %rdx,%r10
  0.34%     0x00007f461122912e: shr     $0x9,%r10
            0x00007f4611229132: movabs  $0x7f462474c000,%rdx
            0x00007f461122913c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611229140: mov     %ecx,0x1c(%rbx)
            0x00007f4611229143: mov     %rbx,%r10
            0x00007f4611229146: shr     $0x9,%r10
            0x00007f461122914a: movabs  $0x7f462474c000,%rcx
            0x00007f4611229154: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
....................................................................................................
 53.10%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (244 bytes) 

            0x00007f4611228dce: mov     $0x2001833d,%r11d  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f4611228dd4: movabs  $0x0,%r14
            0x00007f4611228dde: lea     (%r14,%r11,8),%r14
            0x00007f4611228de2: mov     $0x2001959f,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f4611228de8: shl     $0x3,%r11
            0x00007f4611228dec: mov     $0x20000d06,%r9d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f4611228df2: shl     $0x3,%r9
            0x00007f4611228df6: mov     $0x200196b2,%ecx  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f4611228dfb: movabs  $0x0,%rsi
            0x00007f4611228e05: lea     (%rsi,%rcx,8),%rsi
  0.11%     0x00007f4611228e09: xor     %ebp,%ebp
            0x00007f4611228e0b: jmpq    0x7f4611228f8d
            0x00007f4611228e10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611228e15: cmp     $0x40000,%edx
            0x00007f4611228e1b: jnbe    0x7f46112294e5
            0x00007f4611228e21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  1.03%     0x00007f4611228e24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611228e27: cmp     $0x40000,%edx
            0x00007f4611228e2d: jnbe    0x7f4611229467
            0x00007f4611228e33: mov     %rbx,%rbp
            0x00007f4611228e36: mov     %rsi,0x38(%rsp)
  0.46%     0x00007f4611228e3b: mov     %r9,0x30(%rsp)
            0x00007f4611228e40: mov     %r11,0x20(%rsp)
            0x00007f4611228e45: mov     %r14,0x18(%rsp)
            0x00007f4611228e4a: mov     %edi,(%rsp)
  0.46%     0x00007f4611228e4d: mov     %r8d,0x8(%rsp)
            0x00007f4611228e52: mov     0x60(%r15),%r10
            0x00007f4611228e56: shl     $0x2,%rcx
            0x00007f4611228e5a: add     $0x17,%rcx
  0.34%     0x00007f4611228e5e: mov     %rcx,%r11
            0x00007f4611228e61: and     $0xfffffffffffffff8,%r11
            0x00007f4611228e65: mov     %r10,%r8
            0x00007f4611228e68: add     %r11,%r8
  0.23%     0x00007f4611228e6b: cmp     0x70(%r15),%r8
            0x00007f4611228e6f: jnb     0x7f4611229486
            0x00007f4611228e75: mov     %r8,0x60(%r15)
            0x00007f4611228e79: prefetchnta 0x100(%r8)
            0x00007f4611228e81: movq    $0x1,(%r10)
  0.34%     0x00007f4611228e88: prefetchnta 0x140(%r8)
            0x00007f4611228e90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f4611228e98: mov     %edx,0xc(%r10)
            0x00007f4611228e9c: prefetchnta 0x180(%r8)
  0.80%     0x00007f4611228ea4: mov     %r10,%rdi
            0x00007f4611228ea7: add     $0x10,%rdi
            0x00007f4611228eab: shr     $0x3,%rcx
            0x00007f4611228eaf: add     $0xfffffffffffffffe,%rcx
  0.57%     0x00007f4611228eb3: xor     %rax,%rax
            0x00007f4611228eb6: shl     $0x3,%rcx
            0x00007f4611228eba: rep stosb (%rdi)
 10.44%     0x00007f4611228ebd: mov     %r10,%r11
  0.11%     0x00007f4611228ec0: mov     %rbp,%r8
            0x00007f4611228ec3: mov     %r11d,0x20(%rbp)
  0.23%     0x00007f4611228ec7: mov     %rbp,%r10
            0x00007f4611228eca: shr     $0x9,%r10
            0x00007f4611228ece: movabs  $0x7f462474c000,%r11
            0x00007f4611228ed8: mov     %r12l,(%r11,%r10)
  0.23%     0x00007f4611228edc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.01%     0x00007f4611228ee1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4611228ee5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f4611229641
            0x00007f4611228ee9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.23%     0x00007f4611228eee: mov     0x28(%rsp),%r10
            0x00007f4611228ef3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f4611228ef9: vcvttss2si %xmm0,%r10d
  0.69%     0x00007f4611228efd: cmp     $0x80000000,%r10d
         ╭  0x00007f4611228f04: jne     0x7f4611228f16
         │  0x00007f4611228f06: sub     $0x8,%rsp
         │  0x00007f4611228f0a: vmovss  %xmm0,(%rsp)
         │  0x00007f4611228f0f: callq   0x7f46110520a0    ;   {runtime_call}
         │  0x00007f4611228f14: pop     %r10
         ↘  0x00007f4611228f16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4611228f1a: mov     0x58(%rsp),%r11
  0.34%     0x00007f4611228f1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4611229651
            0x00007f4611228f23: mov     0x90(%rsp),%ebp
....................................................................................................
 27.29%  <total for region 2>

....[Hottest Regions]...............................................................................
 53.10%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (527 bytes) 
 27.29%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (244 bytes) 
  2.06%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.15%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (0 bytes) 
  0.92%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.69%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (63 bytes) 
  0.69%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (0 bytes) 
  0.46%   [kernel.kallsyms]  syscall_return_via_sysret (33 bytes) 
  0.46%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.46%        libc-2.31.so  malloc (0 bytes) 
  0.34%   [kernel.kallsyms]  free_pcppages_bulk (11 bytes) 
  0.34%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.34%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (30 bytes) 
  0.34%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 571 (42 bytes) 
  0.34%           libjvm.so  SpinPause (7 bytes) 
  0.23%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.23%   [kernel.kallsyms]  free_unref_page_prepare.part.0 (29 bytes) 
  0.23%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.23%   [kernel.kallsyms]  mem_cgroup_update_lru_size (18 bytes) 
  0.23%   [kernel.kallsyms]  unlock_page_memcg (12 bytes) 
  9.75%  <...other 77 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.60%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 
  2.06%   [kernel.kallsyms]  native_write_msr 
  0.92%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.80%        libc-2.31.so  _int_malloc 
  0.69%        libc-2.31.so  malloc 
  0.69%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.57%   [kernel.kallsyms]  free_pcppages_bulk 
  0.57%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 571 
  0.46%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.34%   [kernel.kallsyms]  mutex_unlock 
  0.34%           libjvm.so  SpinPause 
  0.34%   [kernel.kallsyms]  release_pages 
  0.23%   [kernel.kallsyms]  page_remove_rmap 
  0.23%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.23%   [kernel.kallsyms]  vfs_write 
  0.23%   [kernel.kallsyms]  mem_cgroup_update_lru_size 
  0.23%   [kernel.kallsyms]  __mod_node_page_state 
  0.23%        libc-2.31.so  _int_free 
  0.23%   [kernel.kallsyms]  unlock_page_memcg 
  0.23%        libc-2.31.so  unlink_chunk.isra.0 
  6.65%  <...other 52 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 84.40%         C2, level 4
  8.72%   [kernel.kallsyms]
  2.75%           libjvm.so
  2.64%        libc-2.31.so
  1.26%    libfcml.so.0.0.0
  0.11%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (872). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       645.747          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
