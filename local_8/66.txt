# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1204.262 ns/op
# Warmup Iteration   2: 670.129 ns/op
# Warmup Iteration   3: 638.350 ns/op
# Warmup Iteration   4: 640.326 ns/op
# Warmup Iteration   5: 644.974 ns/op
Iteration   1: 640.781 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  640.781 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 141332 total address lines.
Perf output processed (skipped 12.003 seconds):
 Column 1: cycles (962 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (569 bytes) 

            0x00007f1149227df9: vcvttss2si %xmm0,%r10d
  0.62%     0x00007f1149227dfd: cmp     $0x80000000,%r10d
         ╭  0x00007f1149227e04: jne     0x7f1149227e16
         │  0x00007f1149227e06: sub     $0x8,%rsp
         │  0x00007f1149227e0a: vmovss  %xmm0,(%rsp)
         │  0x00007f1149227e0f: callq   0x7f11490520a0    ;   {runtime_call}
         │  0x00007f1149227e14: pop     %r10
         ↘  0x00007f1149227e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1149227e1a: mov     0x58(%rsp),%r11
  0.52%     0x00007f1149227e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1149228551
            0x00007f1149227e23: mov     0x90(%rsp),%ebp
            0x00007f1149227e2a: cmp     %r10d,%ebp
            0x00007f1149227e2d: jnb     0x7f11492283ed
            0x00007f1149227e33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.94%     0x00007f1149227e38: mov     0x28(%rsp),%r10
            0x00007f1149227e3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f1149227e41: mov     %r9,%r10
            0x00007f1149227e44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.52%     0x00007f1149227e46: shr     $0x9,%r10
            0x00007f1149227e4a: movabs  $0x7f115e828000,%rcx
            0x00007f1149227e54: mov     %r12l,(%rcx,%r10)
  0.10%     0x00007f1149227e58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.31%     0x00007f1149227e5b: test    %eax,0x17a1519f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f1149227e61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f114922856d
            0x00007f1149227e65: cmp     %r10d,%ebp
            0x00007f1149227e68: jnl     0x7f1149228093    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f1149227e6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.73%     0x00007f1149227e71: mov     0x8(%rsp),%r8d
            0x00007f1149227e76: mov     (%rsp),%edi
  3.22%     0x00007f1149227e79: mov     0x18(%rsp),%r14
            0x00007f1149227e7e: mov     0x20(%rsp),%r11
  0.10%     0x00007f1149227e83: mov     0x30(%rsp),%r9
            0x00007f1149227e88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.62%     0x00007f1149227e8d: mov     0x60(%r15),%rbx
            0x00007f1149227e91: mov     %rbx,%r10
            0x00007f1149227e94: add     $0x28,%r10
            0x00007f1149227e98: cmp     0x70(%r15),%r10
            0x00007f1149227e9c: jnb     0x7f11492280a2
  0.42%     0x00007f1149227ea2: mov     %r10,0x60(%r15)
            0x00007f1149227ea6: prefetchnta 0x100(%r10)
  0.10%     0x00007f1149227eae: mov     0xa8(%r11),%r10
            0x00007f1149227eb5: mov     %r10,(%rbx)
  0.31%     0x00007f1149227eb8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f1149227ebf: mov     %r12d,0xc(%rbx)
            0x00007f1149227ec3: mov     %r12,0x10(%rbx)
            0x00007f1149227ec7: mov     %r12,0x18(%rbx)
  0.31%     0x00007f1149227ecb: mov     %r12d,0x20(%rbx)
            0x00007f1149227ecf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.10%     0x00007f1149227ed2: mov     0x60(%r15),%rax
            0x00007f1149227ed6: mov     %rax,%r10
  0.73%     0x00007f1149227ed9: add     $0x20,%r10
            0x00007f1149227edd: cmp     0x70(%r15),%r10
            0x00007f1149227ee1: jnb     0x7f1149228128
            0x00007f1149227ee7: mov     %r10,0x60(%r15)
            0x00007f1149227eeb: prefetchnta 0x100(%r10)
  0.21%     0x00007f1149227ef3: mov     0xa8(%r14),%r10
            0x00007f1149227efa: mov     %r10,(%rax)
            0x00007f1149227efd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.52%     0x00007f1149227f04: mov     %r12d,0xc(%rax)
  0.73%     0x00007f1149227f08: mov     %r12,0x10(%rax)
            0x00007f1149227f0c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f1149227f10: mov     %rbx,%rcx
            0x00007f1149227f13: mov     %rax,%r10
  0.73%     0x00007f1149227f16: mov     %r10d,0xc(%rbx)
  0.10%     0x00007f1149227f1a: shr     $0x9,%rcx
  0.10%     0x00007f1149227f1e: movabs  $0x7f115e828000,%r10
            0x00007f1149227f28: mov     %r12l,(%r10,%rcx)
  0.62%     0x00007f1149227f2c: mov     %r12d,0x14(%rbx)
            0x00007f1149227f30: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 14.55%     0x00007f1149227f35: mov     0x60(%r15),%rdx
            0x00007f1149227f39: mov     %rdx,%r10
            0x00007f1149227f3c: add     $0x18,%r10
  0.42%     0x00007f1149227f40: cmp     0x70(%r15),%r10
            0x00007f1149227f44: jnb     0x7f11492281b6
            0x00007f1149227f4a: mov     %r10,0x60(%r15)
            0x00007f1149227f4e: prefetchnta 0x100(%r10)
            0x00007f1149227f56: mov     0xa8(%rsi),%r10
  0.73%     0x00007f1149227f5d: mov     %r10,(%rdx)
            0x00007f1149227f60: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f1149227f67: mov     %r12d,0xc(%rdx)
            0x00007f1149227f6b: mov     %r12d,0x14(%rdx)
  0.73%     0x00007f1149227f6f: mov     %r13,0x58(%rsp)
            0x00007f1149227f74: mov     %ebp,0x90(%rsp)
            0x00007f1149227f7b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149227f7e: mov     0x60(%r15),%rbp
  0.42%     0x00007f1149227f82: mov     %rbp,%r10
            0x00007f1149227f85: add     $0x20,%r10
            0x00007f1149227f89: cmp     0x70(%r15),%r10
            0x00007f1149227f8d: jnb     0x7f1149228247
            0x00007f1149227f93: mov     %r10,0x60(%r15)
  0.31%     0x00007f1149227f97: prefetchnta 0x100(%r10)
            0x00007f1149227f9f: mov     0xa8(%r9),%r10
            0x00007f1149227fa6: mov     %r10,0x0(%rbp)
            0x00007f1149227faa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.62%     0x00007f1149227fb1: mov     %r12d,0xc(%rbp)
            0x00007f1149227fb5: mov     %r12,0x10(%rbp)
            0x00007f1149227fb9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149227fbd: mov     0x60(%r15),%rax
  1.04%     0x00007f1149227fc1: mov     %rax,%r10
            0x00007f1149227fc4: add     $0x10,%r10
            0x00007f1149227fc8: cmp     0x70(%r15),%r10
            0x00007f1149227fcc: jnb     0x7f11492282dd
            0x00007f1149227fd2: mov     %r10,0x60(%r15)
  1.14%     0x00007f1149227fd6: prefetchnta 0x100(%r10)
            0x00007f1149227fde: mov     0x10(%rsp),%r10
            0x00007f1149227fe3: mov     0xa8(%r10),%r10
            0x00007f1149227fea: mov     %r10,(%rax)
  0.42%     0x00007f1149227fed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.10%     0x00007f1149227ff4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149227ff8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149227ffb: mov     %rax,%rcx
  0.52%     0x00007f1149227ffe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149228001: mov     %rbp,%rax
            0x00007f1149228004: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149228007: shr     $0x9,%rax
  0.73%     0x00007f114922800b: movabs  $0x7f115e828000,%r13
            0x00007f1149228015: mov     %r12l,0x0(%r13,%rax)
  0.10%     0x00007f114922801a: mov     %r12d,0x18(%rbp)
            0x00007f114922801e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.42%     0x00007f1149228023: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149228027: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f114922802b: mov     %rdx,%r10
  0.83%     0x00007f114922802e: shr     $0x9,%r10
  0.10%     0x00007f1149228032: movabs  $0x7f115e828000,%rdx
            0x00007f114922803c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149228040: mov     %ecx,0x1c(%rbx)
  0.52%     0x00007f1149228043: mov     %rbx,%r10
            0x00007f1149228046: shr     $0x9,%r10
            0x00007f114922804a: movabs  $0x7f115e828000,%rcx
            0x00007f1149228054: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.42%     0x00007f1149228058: cmp     $0x1,%r8d
            0x00007f114922805c: jle     0x7f1149227d10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149228062: mov     $0x1,%r10d
            0x00007f1149228068: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 52.29%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (217 bytes) 

            0x00007f1149227d0b: jmpq    0x7f1149227e8d
            0x00007f1149227d10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149227d15: cmp     $0x40000,%edx
            0x00007f1149227d1b: jnbe    0x7f11492283e5
            0x00007f1149227d21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.42%     0x00007f1149227d24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1149227d27: cmp     $0x40000,%edx
            0x00007f1149227d2d: jnbe    0x7f1149228367
            0x00007f1149227d33: mov     %rbx,%rbp
            0x00007f1149227d36: mov     %rsi,0x38(%rsp)
  0.62%     0x00007f1149227d3b: mov     %r9,0x30(%rsp)
            0x00007f1149227d40: mov     %r11,0x20(%rsp)
            0x00007f1149227d45: mov     %r14,0x18(%rsp)
            0x00007f1149227d4a: mov     %edi,(%rsp)
  0.52%     0x00007f1149227d4d: mov     %r8d,0x8(%rsp)
            0x00007f1149227d52: mov     0x60(%r15),%r10
            0x00007f1149227d56: shl     $0x2,%rcx
            0x00007f1149227d5a: add     $0x17,%rcx
  0.52%     0x00007f1149227d5e: mov     %rcx,%r11
            0x00007f1149227d61: and     $0xfffffffffffffff8,%r11
            0x00007f1149227d65: mov     %r10,%r8
            0x00007f1149227d68: add     %r11,%r8
  0.83%     0x00007f1149227d6b: cmp     0x70(%r15),%r8
            0x00007f1149227d6f: jnb     0x7f1149228386
            0x00007f1149227d75: mov     %r8,0x60(%r15)
            0x00007f1149227d79: prefetchnta 0x100(%r8)
            0x00007f1149227d81: movq    $0x1,(%r10)
  0.42%     0x00007f1149227d88: prefetchnta 0x140(%r8)
            0x00007f1149227d90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f1149227d98: mov     %edx,0xc(%r10)
            0x00007f1149227d9c: prefetchnta 0x180(%r8)
  0.83%     0x00007f1149227da4: mov     %r10,%rdi
            0x00007f1149227da7: add     $0x10,%rdi
            0x00007f1149227dab: shr     $0x3,%rcx
            0x00007f1149227daf: add     $0xfffffffffffffffe,%rcx
  0.52%     0x00007f1149227db3: xor     %rax,%rax
            0x00007f1149227db6: shl     $0x3,%rcx
            0x00007f1149227dba: rep stosb (%rdi)
  9.04%     0x00007f1149227dbd: mov     %r10,%r11
            0x00007f1149227dc0: mov     %rbp,%r8
            0x00007f1149227dc3: mov     %r11d,0x20(%rbp)
  0.42%     0x00007f1149227dc7: mov     %rbp,%r10
            0x00007f1149227dca: shr     $0x9,%r10
  0.10%     0x00007f1149227dce: movabs  $0x7f115e828000,%r11
            0x00007f1149227dd8: mov     %r12l,(%r11,%r10)
  0.42%     0x00007f1149227ddc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  9.25%     0x00007f1149227de1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f1149227de5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f1149228541
            0x00007f1149227de9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.31%     0x00007f1149227dee: mov     0x28(%rsp),%r10
            0x00007f1149227df3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f1149227df9: vcvttss2si %xmm0,%r10d
  0.62%     0x00007f1149227dfd: cmp     $0x80000000,%r10d
         ╭  0x00007f1149227e04: jne     0x7f1149227e16
         │  0x00007f1149227e06: sub     $0x8,%rsp
         │  0x00007f1149227e0a: vmovss  %xmm0,(%rsp)
         │  0x00007f1149227e0f: callq   0x7f11490520a0    ;   {runtime_call}
         │  0x00007f1149227e14: pop     %r10
         ↘  0x00007f1149227e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1149227e1a: mov     0x58(%rsp),%r11
  0.52%     0x00007f1149227e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1149228551
            0x00007f1149227e23: mov     0x90(%rsp),%ebp
....................................................................................................
 24.95%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.29%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (569 bytes) 
 24.95%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (217 bytes) 
  1.25%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.83%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.83%   [kernel.kallsyms]  syscall_exit_to_user_mode (23 bytes) 
  0.83%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 (24 bytes) 
  0.62%           libjvm.so  SpinPause (9 bytes) 
  0.52%   [kernel.kallsyms]  entry_SYSCALL_64 (41 bytes) 
  0.52%        libc-2.31.so  malloc (0 bytes) 
  0.42%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.42%           libjvm.so  fileStream::write (23 bytes) 
  0.42%           libjvm.so  ParallelTaskTerminator::offer_termination (5 bytes) 
  0.42%        libc-2.31.so  malloc_consolidate (0 bytes) 
  0.42%        libc-2.31.so  malloc_consolidate (11 bytes) 
  0.31%   [kernel.kallsyms]  syscall_return_via_sysret (1 bytes) 
  0.31%        libc-2.31.so  _int_free (0 bytes) 
  0.31%        libc-2.31.so  malloc (0 bytes) 
  0.21%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_state (6 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_state (0 bytes) 
 13.62%  <...other 119 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 78.69%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 532 
  1.25%        libc-2.31.so  malloc 
  1.25%   [kernel.kallsyms]  native_write_msr 
  1.04%        libc-2.31.so  malloc_consolidate 
  0.94%   [kernel.kallsyms]  free_pcppages_bulk 
  0.94%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.83%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.62%        libc-2.31.so  _int_malloc 
  0.62%           libjvm.so  SpinPause 
  0.52%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.42%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.42%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 538 
  0.42%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.42%        libc-2.31.so  _int_free 
  0.42%           libjvm.so  fileStream::write 
  0.42%   [kernel.kallsyms]  __mod_memcg_state 
  0.31%   [kernel.kallsyms]  page_remove_rmap 
  0.31%        libc-2.31.so  unlink_chunk.isra.0 
  0.31%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.31%   [kernel.kallsyms]  release_pages 
  9.46%  <...other 82 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 79.31%         C2, level 4
 10.29%   [kernel.kallsyms]
  4.26%        libc-2.31.so
  3.95%           libjvm.so
  1.77%    libfcml.so.0.0.0
  0.10%   libhsdis.so.0.0.0
  0.10%              kvm.ko
  0.10%         interpreter
....................................................................................................
 99.90%  <totals>

WARNING: The perf event count is suspiciously low (962). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       640.781          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
