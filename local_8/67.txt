# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1385.189 ns/op
# Warmup Iteration   2: 733.943 ns/op
# Warmup Iteration   3: 681.284 ns/op
# Warmup Iteration   4: 684.061 ns/op
# Warmup Iteration   5: 688.477 ns/op
Iteration   1: 689.647 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  689.647 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140362 total address lines.
Perf output processed (skipped 11.903 seconds):
 Column 1: cycles (890 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (566 bytes) 

            0x00007f8d4d2273fa: vcvttss2si %xmm0,%r11d
  0.79%     0x00007f8d4d2273fe: cmp     $0x80000000,%r11d
         ╭  0x00007f8d4d227405: jne     0x7f8d4d227417
         │  0x00007f8d4d227407: sub     $0x8,%rsp
         │  0x00007f8d4d22740b: vmovss  %xmm0,(%rsp)
         │  0x00007f8d4d227410: callq   0x7f8d4d0520a0    ;   {runtime_call}
         │  0x00007f8d4d227415: pop     %r11
         ↘  0x00007f8d4d227417: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8d4d22741b: mov     (%rsp),%r11
  6.29%     0x00007f8d4d22741f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f8d4d227b3d
  1.01%     0x00007f8d4d227423: mov     0x88(%rsp),%ebp
            0x00007f8d4d22742a: cmp     %r10d,%ebp
            0x00007f8d4d22742d: jnb     0x7f8d4d2279c8
  0.90%     0x00007f8d4d227433: lea     0x10(%r11,%rbp,4),%rcx  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
            0x00007f8d4d227438: mov     0x1c(%r9),%r11d   ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f8d4d22743c: mov     %rcx,%r10
            0x00007f8d4d22743f: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.45%     0x00007f8d4d227441: shr     $0x9,%r10
            0x00007f8d4d227445: movabs  $0x7f8d60a3b000,%rbx
            0x00007f8d4d22744f: mov     %r12l,(%rbx,%r10)
  3.26%     0x00007f8d4d227453: mov     %r8,%r10
            0x00007f8d4d227456: mov     %r10d,(%rcx)      ; OopMap{r11=NarrowOop r9=Oop [12]=NarrowOop off=857}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
            0x00007f8d4d227459: test    %eax,0x15c28ba1(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f8d4d22745f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f8d4d227b55
  1.12%     0x00007f8d4d227463: cmp     %r8d,%ebp
            0x00007f8d4d227466: jnl     0x7f8d4d227692    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f8d4d22746c: mov     %r11,%rbx         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f8d4d22746f: mov     0x8(%rsp),%r11d
            0x00007f8d4d227474: mov     0xc(%rsp),%r14d
  0.56%     0x00007f8d4d227479: mov     0x28(%rsp),%r8
            0x00007f8d4d22747e: mov     0x30(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
            0x00007f8d4d227483: mov     0x60(%r15),%rdi
            0x00007f8d4d227487: mov     %rdi,%r10
  0.67%     0x00007f8d4d22748a: add     $0x28,%r10
            0x00007f8d4d22748e: cmp     0x70(%r15),%r10
            0x00007f8d4d227492: jnb     0x7f8d4d2276a1
            0x00007f8d4d227498: mov     %r10,0x60(%r15)
            0x00007f8d4d22749c: prefetchnta 0x100(%r10)
  0.22%     0x00007f8d4d2274a4: mov     0x20(%rsp),%r10
            0x00007f8d4d2274a9: mov     0xa8(%r10),%r10
            0x00007f8d4d2274b0: mov     %r10,(%rdi)
  0.22%     0x00007f8d4d2274b3: movl    $0x2001959f,0x8(%rdi)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.45%     0x00007f8d4d2274ba: mov     %r12d,0xc(%rdi)
            0x00007f8d4d2274be: mov     %r12,0x10(%rdi)
            0x00007f8d4d2274c2: mov     %r12,0x18(%rdi)
  0.11%     0x00007f8d4d2274c6: mov     %r12d,0x20(%rdi)
  0.45%     0x00007f8d4d2274ca: mov     %r14d,0x24(%rdi)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f8d4d2274ce: mov     0x60(%r15),%rax
            0x00007f8d4d2274d2: mov     %rax,%r10
            0x00007f8d4d2274d5: add     $0x20,%r10
  0.34%     0x00007f8d4d2274d9: cmp     0x70(%r15),%r10
            0x00007f8d4d2274dd: jnb     0x7f8d4d22772f
  0.11%     0x00007f8d4d2274e3: mov     %r10,0x60(%r15)
  0.11%     0x00007f8d4d2274e7: prefetchnta 0x100(%r10)
            0x00007f8d4d2274ef: mov     0x18(%rsp),%r10
  0.67%     0x00007f8d4d2274f4: mov     0xa8(%r10),%r10
            0x00007f8d4d2274fb: mov     %r10,(%rax)
            0x00007f8d4d2274fe: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.11%     0x00007f8d4d227505: mov     %r12d,0xc(%rax)
  0.56%     0x00007f8d4d227509: mov     %r12,0x10(%rax)
            0x00007f8d4d22750d: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d227511: mov     %rdi,%rcx
  0.11%     0x00007f8d4d227514: mov     %rax,%r10
  0.79%     0x00007f8d4d227517: mov     %r10d,0xc(%rdi)
            0x00007f8d4d22751b: shr     $0x9,%rcx
  0.11%     0x00007f8d4d22751f: movabs  $0x7f8d60a3b000,%r10
  0.11%     0x00007f8d4d227529: mov     %r12l,(%r10,%rcx)
  0.79%     0x00007f8d4d22752d: mov     %r12d,0x14(%rdi)
            0x00007f8d4d227531: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.37%     0x00007f8d4d227536: mov     0x60(%r15),%rdx
            0x00007f8d4d22753a: mov     %rdx,%r10
            0x00007f8d4d22753d: add     $0x18,%r10
  0.56%     0x00007f8d4d227541: cmp     0x70(%r15),%r10
            0x00007f8d4d227545: jnb     0x7f8d4d2277c5
            0x00007f8d4d22754b: mov     %r10,0x60(%r15)
            0x00007f8d4d22754f: prefetchnta 0x100(%r10)
            0x00007f8d4d227557: mov     0xa8(%rsi),%r10
  0.22%     0x00007f8d4d22755e: mov     %r10,(%rdx)
  0.11%     0x00007f8d4d227561: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f8d4d227568: mov     %r12d,0xc(%rdx)
            0x00007f8d4d22756c: mov     %r12d,0x14(%rdx)
  0.22%     0x00007f8d4d227570: mov     %ebp,0x88(%rsp)
            0x00007f8d4d227577: mov     %r14d,0x10(%rdx)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d22757b: mov     0x60(%r15),%rbp
            0x00007f8d4d22757f: mov     %rbp,%r10
  0.56%     0x00007f8d4d227582: add     $0x20,%r10
            0x00007f8d4d227586: cmp     0x70(%r15),%r10
            0x00007f8d4d22758a: jnb     0x7f8d4d22785c
            0x00007f8d4d227590: mov     %r10,0x60(%r15)
            0x00007f8d4d227594: prefetchnta 0x100(%r10)
  0.90%     0x00007f8d4d22759c: mov     0xa8(%r8),%r10
            0x00007f8d4d2275a3: mov     %r10,0x0(%rbp)
            0x00007f8d4d2275a7: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f8d4d2275ae: mov     %r12d,0xc(%rbp)
  0.45%     0x00007f8d4d2275b2: mov     %r12,0x10(%rbp)
            0x00007f8d4d2275b6: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d2275ba: mov     0x60(%r15),%rax
            0x00007f8d4d2275be: mov     %rax,%r10
  0.90%     0x00007f8d4d2275c1: add     $0x10,%r10
            0x00007f8d4d2275c5: cmp     0x70(%r15),%r10
            0x00007f8d4d2275c9: jnb     0x7f8d4d2278d5
            0x00007f8d4d2275cf: mov     %r10,0x60(%r15)
            0x00007f8d4d2275d3: prefetchnta 0x100(%r10)
  0.67%     0x00007f8d4d2275db: mov     0x10(%rsp),%r10
            0x00007f8d4d2275e0: mov     0xa8(%r10),%r10
            0x00007f8d4d2275e7: mov     %r10,(%rax)
            0x00007f8d4d2275ea: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.56%     0x00007f8d4d2275f1: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d2275f5: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d2275f8: mov     %rax,%rcx
            0x00007f8d4d2275fb: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.45%     0x00007f8d4d2275fe: mov     %rbp,%rax
            0x00007f8d4d227601: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d227604: shr     $0x9,%rax
            0x00007f8d4d227608: movabs  $0x7f8d60a3b000,%r13
  0.90%     0x00007f8d4d227612: mov     %r12l,0x0(%r13,%rax)
            0x00007f8d4d227617: mov     %r12d,0x18(%rbp)
            0x00007f8d4d22761b: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.19%     0x00007f8d4d227620: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d227624: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d227628: mov     %rdx,%r10
  0.67%     0x00007f8d4d22762b: shr     $0x9,%r10
            0x00007f8d4d22762f: movabs  $0x7f8d60a3b000,%rdx
            0x00007f8d4d227639: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d22763d: mov     %ecx,0x1c(%rdi)
  0.22%     0x00007f8d4d227640: mov     %rdi,%r10
            0x00007f8d4d227643: shr     $0x9,%r10
            0x00007f8d4d227647: movabs  $0x7f8d60a3b000,%rcx
            0x00007f8d4d227651: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.56%     0x00007f8d4d227655: cmp     $0x1,%r11d
            0x00007f8d4d227659: jnle    0x7f8d4d227665    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d22765b: mov     $0x1,%edx
            0x00007f8d4d227660: jmpq    0x7f8d4d227319    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 58.09%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (217 bytes) 

            0x00007f8d4d2272fd: movabs  $0x0,%rsi
            0x00007f8d4d227307: lea     (%rsi,%rcx,8),%rsi
            0x00007f8d4d22730b: xor     %ebp,%ebp
            0x00007f8d4d22730d: jmpq    0x7f8d4d227483
            0x00007f8d4d227312: mov     $0x1,%edx
            0x00007f8d4d227317: shl     %cl,%edx          ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d227319: cmp     $0x40000,%edx
            0x00007f8d4d22731f: jnbe    0x7f8d4d2279c0
  0.45%     0x00007f8d4d227325: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d227328: mov     %edx,0x10(%rdi)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d22732b: cmp     $0x40000,%edx
            0x00007f8d4d227331: jnbe    0x7f8d4d22793f
            0x00007f8d4d227337: mov     %rdi,0x38(%rsp)
  0.79%     0x00007f8d4d22733c: mov     %rsi,0x30(%rsp)
            0x00007f8d4d227341: mov     %r8,0x28(%rsp)
            0x00007f8d4d227346: mov     %r14d,0xc(%rsp)
            0x00007f8d4d22734b: mov     %rbx,(%rsp)
  0.79%     0x00007f8d4d22734f: mov     %r11d,0x8(%rsp)
            0x00007f8d4d227354: mov     %r9,%rbp
            0x00007f8d4d227357: mov     0x60(%r15),%r10
            0x00007f8d4d22735b: shl     $0x2,%rcx
  0.67%     0x00007f8d4d22735f: add     $0x17,%rcx
            0x00007f8d4d227363: mov     %rcx,%r11
            0x00007f8d4d227366: and     $0xfffffffffffffff8,%r11
            0x00007f8d4d22736a: mov     %r10,%r8
  0.56%     0x00007f8d4d22736d: add     %r11,%r8
            0x00007f8d4d227370: cmp     0x70(%r15),%r8
            0x00007f8d4d227374: jnb     0x7f8d4d22795f
            0x00007f8d4d22737a: mov     %r8,0x60(%r15)
            0x00007f8d4d22737e: prefetchnta 0x100(%r8)
  0.45%     0x00007f8d4d227386: movq    $0x1,(%r10)
            0x00007f8d4d22738d: prefetchnta 0x140(%r8)
            0x00007f8d4d227395: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f8d4d22739d: mov     %edx,0xc(%r10)
  0.22%     0x00007f8d4d2273a1: prefetchnta 0x180(%r8)
  0.11%     0x00007f8d4d2273a9: mov     %r10,%rdi
            0x00007f8d4d2273ac: add     $0x10,%rdi
            0x00007f8d4d2273b0: shr     $0x3,%rcx
  0.56%     0x00007f8d4d2273b4: add     $0xfffffffffffffffe,%rcx
            0x00007f8d4d2273b8: xor     %rax,%rax
            0x00007f8d4d2273bb: shl     $0x3,%rcx
            0x00007f8d4d2273bf: rep stosb (%rdi)
 10.11%     0x00007f8d4d2273c2: mov     0x38(%rsp),%r8
  0.45%     0x00007f8d4d2273c7: mov     %r10d,0x20(%r8)
            0x00007f8d4d2273cb: mov     %r8,%r10
  0.34%     0x00007f8d4d2273ce: shr     $0x9,%r10
            0x00007f8d4d2273d2: movabs  $0x7f8d60a3b000,%r11
            0x00007f8d4d2273dc: mov     %r12l,(%r11,%r10)
            0x00007f8d4d2273e0: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.11%     0x00007f8d4d2273e5: mov     0x20(%r8),%r11d   ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d4d2273e9: mov     0xc(%r11),%r10d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f8d4d227b2d
            0x00007f8d4d2273ed: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.56%     0x00007f8d4d2273f2: mov     %rbp,%r9
            0x00007f8d4d2273f5: vmulss  0x14(%rbp),%xmm1,%xmm0
            0x00007f8d4d2273fa: vcvttss2si %xmm0,%r11d
  0.79%     0x00007f8d4d2273fe: cmp     $0x80000000,%r11d
         ╭  0x00007f8d4d227405: jne     0x7f8d4d227417
         │  0x00007f8d4d227407: sub     $0x8,%rsp
         │  0x00007f8d4d22740b: vmovss  %xmm0,(%rsp)
         │  0x00007f8d4d227410: callq   0x7f8d4d0520a0    ;   {runtime_call}
         │  0x00007f8d4d227415: pop     %r11
         ↘  0x00007f8d4d227417: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8d4d22741b: mov     (%rsp),%r11
  6.29%     0x00007f8d4d22741f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f8d4d227b3d
  1.01%     0x00007f8d4d227423: mov     0x88(%rsp),%ebp
....................................................................................................
 26.97%  <total for region 2>

....[Hottest Regions]...............................................................................
 58.09%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (566 bytes) 
 26.97%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (217 bytes) 
  2.25%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.90%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (20 bytes) 
  0.67%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (28 bytes) 
  0.56%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.56%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.45%        libc-2.31.so  malloc (4 bytes) 
  0.34%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.34%           libjvm.so  ParallelTaskTerminator::offer_termination (0 bytes) 
  0.34%        libc-2.31.so  _int_free (12 bytes) 
  0.22%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.22%   [kernel.kallsyms]  _raw_spin_lock (0 bytes) 
  0.22%           libjvm.so  ClassLoaderData::oops_do (5 bytes) 
  0.22%           libjvm.so  fileStream::write (0 bytes) 
  0.22%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  0.22%        libc-2.31.so  unlink_chunk.isra.0 (32 bytes) 
  0.22%        libc-2.31.so  malloc_consolidate (20 bytes) 
  0.22%        libc-2.31.so  malloc_consolidate (5 bytes) 
  0.11%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 (0 bytes) 
  6.52%  <...other 58 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.08%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 
  2.25%   [kernel.kallsyms]  native_write_msr 
  0.79%   [kernel.kallsyms]  free_pcppages_bulk 
  0.67%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.56%        libc-2.31.so  malloc 
  0.45%        libc-2.31.so  malloc_consolidate 
  0.34%   [kernel.kallsyms]  page_remove_rmap 
  0.34%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.34%        libc-2.31.so  _int_free 
  0.22%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.22%   [kernel.kallsyms]  _raw_spin_lock 
  0.22%        libc-2.31.so  _int_malloc 
  0.22%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.22%           libjvm.so  fileStream::write 
  0.22%        libc-2.31.so  unlink_chunk.isra.0 
  0.22%           libjvm.so  ClassLoaderData::oops_do 
  0.22%   [kernel.kallsyms]  __mod_memcg_state 
  0.22%        libc-2.31.so  __vfprintf_internal 
  0.22%   [kernel.kallsyms]  release_pages 
  0.11%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  4.72%  <...other 42 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 87.30%         C2, level 4
  7.19%   [kernel.kallsyms]
  2.25%           libjvm.so
  2.25%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.22%         interpreter
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (890). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       689.647          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
