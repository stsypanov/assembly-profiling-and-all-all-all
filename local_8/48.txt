# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1396.327 ns/op
# Warmup Iteration   2: 689.151 ns/op
# Warmup Iteration   3: 635.828 ns/op
# Warmup Iteration   4: 642.328 ns/op
# Warmup Iteration   5: 647.349 ns/op
Iteration   1: 639.314 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  639.314 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 137986 total address lines.
Perf output processed (skipped 11.976 seconds):
 Column 1: cycles (935 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (569 bytes) 

            0x00007f4fe12229f9: vcvttss2si %xmm0,%r10d
  0.21%     0x00007f4fe12229fd: cmp     $0x80000000,%r10d
         ╭  0x00007f4fe1222a04: jne     0x7f4fe1222a16
         │  0x00007f4fe1222a06: sub     $0x8,%rsp
         │  0x00007f4fe1222a0a: vmovss  %xmm0,(%rsp)
         │  0x00007f4fe1222a0f: callq   0x7f4fe10520a0    ;   {runtime_call}
         │  0x00007f4fe1222a14: pop     %r10
         ↘  0x00007f4fe1222a16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4fe1222a1a: mov     0x58(%rsp),%r11
  0.64%     0x00007f4fe1222a1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4fe1223151
  0.11%     0x00007f4fe1222a23: mov     0x90(%rsp),%ebp
            0x00007f4fe1222a2a: cmp     %r10d,%ebp
            0x00007f4fe1222a2d: jnb     0x7f4fe1222fed
            0x00007f4fe1222a33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.11%     0x00007f4fe1222a38: mov     0x28(%rsp),%r10
            0x00007f4fe1222a3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f4fe1222a41: mov     %r9,%r10
            0x00007f4fe1222a44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.43%     0x00007f4fe1222a46: shr     $0x9,%r10
            0x00007f4fe1222a4a: movabs  $0x7f4ff3e3b000,%rcx
            0x00007f4fe1222a54: mov     %r12l,(%rcx,%r10)
            0x00007f4fe1222a58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.43%     0x00007f4fe1222a5b: test    %eax,0x1502d59f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f4fe1222a61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4fe122316d
            0x00007f4fe1222a65: cmp     %r10d,%ebp
            0x00007f4fe1222a68: jnl     0x7f4fe1222c93    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f4fe1222a6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.21%     0x00007f4fe1222a71: mov     0x8(%rsp),%r8d
            0x00007f4fe1222a76: mov     (%rsp),%edi
  4.28%     0x00007f4fe1222a79: mov     0x18(%rsp),%r14
            0x00007f4fe1222a7e: mov     0x20(%rsp),%r11
            0x00007f4fe1222a83: mov     0x30(%rsp),%r9
            0x00007f4fe1222a88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.53%     0x00007f4fe1222a8d: mov     0x60(%r15),%rbx
            0x00007f4fe1222a91: mov     %rbx,%r10
            0x00007f4fe1222a94: add     $0x28,%r10
            0x00007f4fe1222a98: cmp     0x70(%r15),%r10
            0x00007f4fe1222a9c: jnb     0x7f4fe1222ca2
  0.11%     0x00007f4fe1222aa2: mov     %r10,0x60(%r15)
            0x00007f4fe1222aa6: prefetchnta 0x100(%r10)
            0x00007f4fe1222aae: mov     0xa8(%r11),%r10
            0x00007f4fe1222ab5: mov     %r10,(%rbx)
  0.21%     0x00007f4fe1222ab8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f4fe1222abf: mov     %r12d,0xc(%rbx)
            0x00007f4fe1222ac3: mov     %r12,0x10(%rbx)
            0x00007f4fe1222ac7: mov     %r12,0x18(%rbx)
  0.53%     0x00007f4fe1222acb: mov     %r12d,0x20(%rbx)
            0x00007f4fe1222acf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f4fe1222ad2: mov     0x60(%r15),%rax
            0x00007f4fe1222ad6: mov     %rax,%r10
  0.32%     0x00007f4fe1222ad9: add     $0x20,%r10
            0x00007f4fe1222add: cmp     0x70(%r15),%r10
            0x00007f4fe1222ae1: jnb     0x7f4fe1222d28
            0x00007f4fe1222ae7: mov     %r10,0x60(%r15)
            0x00007f4fe1222aeb: prefetchnta 0x100(%r10)
  0.75%     0x00007f4fe1222af3: mov     0xa8(%r14),%r10
            0x00007f4fe1222afa: mov     %r10,(%rax)
            0x00007f4fe1222afd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f4fe1222b04: mov     %r12d,0xc(%rax)
  0.32%     0x00007f4fe1222b08: mov     %r12,0x10(%rax)
  0.11%     0x00007f4fe1222b0c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222b10: mov     %rbx,%rcx
            0x00007f4fe1222b13: mov     %rax,%r10
  0.64%     0x00007f4fe1222b16: mov     %r10d,0xc(%rbx)
  0.21%     0x00007f4fe1222b1a: shr     $0x9,%rcx
            0x00007f4fe1222b1e: movabs  $0x7f4ff3e3b000,%r10
            0x00007f4fe1222b28: mov     %r12l,(%r10,%rcx)
  0.21%     0x00007f4fe1222b2c: mov     %r12d,0x14(%rbx)
            0x00007f4fe1222b30: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.50%     0x00007f4fe1222b35: mov     0x60(%r15),%rdx
            0x00007f4fe1222b39: mov     %rdx,%r10
            0x00007f4fe1222b3c: add     $0x18,%r10
  0.86%     0x00007f4fe1222b40: cmp     0x70(%r15),%r10
            0x00007f4fe1222b44: jnb     0x7f4fe1222db6
            0x00007f4fe1222b4a: mov     %r10,0x60(%r15)
            0x00007f4fe1222b4e: prefetchnta 0x100(%r10)
            0x00007f4fe1222b56: mov     0xa8(%rsi),%r10
  0.21%     0x00007f4fe1222b5d: mov     %r10,(%rdx)
            0x00007f4fe1222b60: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f4fe1222b67: mov     %r12d,0xc(%rdx)
            0x00007f4fe1222b6b: mov     %r12d,0x14(%rdx)
  0.53%     0x00007f4fe1222b6f: mov     %r13,0x58(%rsp)
            0x00007f4fe1222b74: mov     %ebp,0x90(%rsp)
            0x00007f4fe1222b7b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222b7e: mov     0x60(%r15),%rbp
  0.64%     0x00007f4fe1222b82: mov     %rbp,%r10
            0x00007f4fe1222b85: add     $0x20,%r10
            0x00007f4fe1222b89: cmp     0x70(%r15),%r10
            0x00007f4fe1222b8d: jnb     0x7f4fe1222e47
            0x00007f4fe1222b93: mov     %r10,0x60(%r15)
  0.53%     0x00007f4fe1222b97: prefetchnta 0x100(%r10)
  0.21%     0x00007f4fe1222b9f: mov     0xa8(%r9),%r10
            0x00007f4fe1222ba6: mov     %r10,0x0(%rbp)
            0x00007f4fe1222baa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.32%     0x00007f4fe1222bb1: mov     %r12d,0xc(%rbp)
            0x00007f4fe1222bb5: mov     %r12,0x10(%rbp)
            0x00007f4fe1222bb9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222bbd: mov     0x60(%r15),%rax
  0.86%     0x00007f4fe1222bc1: mov     %rax,%r10
  0.11%     0x00007f4fe1222bc4: add     $0x10,%r10
            0x00007f4fe1222bc8: cmp     0x70(%r15),%r10
            0x00007f4fe1222bcc: jnb     0x7f4fe1222edd
            0x00007f4fe1222bd2: mov     %r10,0x60(%r15)
  0.21%     0x00007f4fe1222bd6: prefetchnta 0x100(%r10)
            0x00007f4fe1222bde: mov     0x10(%rsp),%r10
            0x00007f4fe1222be3: mov     0xa8(%r10),%r10
            0x00007f4fe1222bea: mov     %r10,(%rax)
  0.64%     0x00007f4fe1222bed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f4fe1222bf4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222bf8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222bfb: mov     %rax,%rcx
  0.43%     0x00007f4fe1222bfe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f4fe1222c01: mov     %rbp,%rax
            0x00007f4fe1222c04: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222c07: shr     $0x9,%rax
  0.43%     0x00007f4fe1222c0b: movabs  $0x7f4ff3e3b000,%r13
            0x00007f4fe1222c15: mov     %r12l,0x0(%r13,%rax)
            0x00007f4fe1222c1a: mov     %r12d,0x18(%rbp)
            0x00007f4fe1222c1e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.79%     0x00007f4fe1222c23: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f4fe1222c27: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222c2b: mov     %rdx,%r10
  0.53%     0x00007f4fe1222c2e: shr     $0x9,%r10
            0x00007f4fe1222c32: movabs  $0x7f4ff3e3b000,%rdx
            0x00007f4fe1222c3c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222c40: mov     %ecx,0x1c(%rbx)
  0.11%     0x00007f4fe1222c43: mov     %rbx,%r10
            0x00007f4fe1222c46: shr     $0x9,%r10
            0x00007f4fe1222c4a: movabs  $0x7f4ff3e3b000,%rcx
            0x00007f4fe1222c54: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.64%     0x00007f4fe1222c58: cmp     $0x1,%r8d
            0x00007f4fe1222c5c: jle     0x7f4fe1222910    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222c62: mov     $0x1,%r10d
            0x00007f4fe1222c68: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 52.94%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (217 bytes) 

            0x00007f4fe122290b: jmpq    0x7f4fe1222a8d
            0x00007f4fe1222910: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222915: cmp     $0x40000,%edx
            0x00007f4fe122291b: jnbe    0x7f4fe1222fe5
            0x00007f4fe1222921: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  1.18%     0x00007f4fe1222924: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe1222927: cmp     $0x40000,%edx
            0x00007f4fe122292d: jnbe    0x7f4fe1222f67
            0x00007f4fe1222933: mov     %rbx,%rbp
            0x00007f4fe1222936: mov     %rsi,0x38(%rsp)
  0.75%     0x00007f4fe122293b: mov     %r9,0x30(%rsp)
            0x00007f4fe1222940: mov     %r11,0x20(%rsp)
            0x00007f4fe1222945: mov     %r14,0x18(%rsp)
            0x00007f4fe122294a: mov     %edi,(%rsp)
  0.53%     0x00007f4fe122294d: mov     %r8d,0x8(%rsp)
            0x00007f4fe1222952: mov     0x60(%r15),%r10
            0x00007f4fe1222956: shl     $0x2,%rcx
            0x00007f4fe122295a: add     $0x17,%rcx
  0.21%     0x00007f4fe122295e: mov     %rcx,%r11
            0x00007f4fe1222961: and     $0xfffffffffffffff8,%r11
            0x00007f4fe1222965: mov     %r10,%r8
            0x00007f4fe1222968: add     %r11,%r8
  0.64%     0x00007f4fe122296b: cmp     0x70(%r15),%r8
            0x00007f4fe122296f: jnb     0x7f4fe1222f86
            0x00007f4fe1222975: mov     %r8,0x60(%r15)
            0x00007f4fe1222979: prefetchnta 0x100(%r8)
            0x00007f4fe1222981: movq    $0x1,(%r10)
  0.43%     0x00007f4fe1222988: prefetchnta 0x140(%r8)
            0x00007f4fe1222990: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f4fe1222998: mov     %edx,0xc(%r10)
            0x00007f4fe122299c: prefetchnta 0x180(%r8)
  0.86%     0x00007f4fe12229a4: mov     %r10,%rdi
            0x00007f4fe12229a7: add     $0x10,%rdi
            0x00007f4fe12229ab: shr     $0x3,%rcx
            0x00007f4fe12229af: add     $0xfffffffffffffffe,%rcx
  0.96%     0x00007f4fe12229b3: xor     %rax,%rax
            0x00007f4fe12229b6: shl     $0x3,%rcx
            0x00007f4fe12229ba: rep stosb (%rdi)
 11.66%     0x00007f4fe12229bd: mov     %r10,%r11
  0.11%     0x00007f4fe12229c0: mov     %rbp,%r8
            0x00007f4fe12229c3: mov     %r11d,0x20(%rbp)
  0.43%     0x00007f4fe12229c7: mov     %rbp,%r10
            0x00007f4fe12229ca: shr     $0x9,%r10
            0x00007f4fe12229ce: movabs  $0x7f4ff3e3b000,%r11
            0x00007f4fe12229d8: mov     %r12l,(%r11,%r10)
  0.86%     0x00007f4fe12229dc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.16%     0x00007f4fe12229e1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4fe12229e5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f4fe1223141
  0.11%     0x00007f4fe12229e9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.11%     0x00007f4fe12229ee: mov     0x28(%rsp),%r10
            0x00007f4fe12229f3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f4fe12229f9: vcvttss2si %xmm0,%r10d
  0.21%     0x00007f4fe12229fd: cmp     $0x80000000,%r10d
         ╭  0x00007f4fe1222a04: jne     0x7f4fe1222a16
         │  0x00007f4fe1222a06: sub     $0x8,%rsp
         │  0x00007f4fe1222a0a: vmovss  %xmm0,(%rsp)
         │  0x00007f4fe1222a0f: callq   0x7f4fe10520a0    ;   {runtime_call}
         │  0x00007f4fe1222a14: pop     %r10
         ↘  0x00007f4fe1222a16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4fe1222a1a: mov     0x58(%rsp),%r11
  0.64%     0x00007f4fe1222a1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f4fe1223151
  0.11%     0x00007f4fe1222a23: mov     0x90(%rsp),%ebp
....................................................................................................
 29.20%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.94%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (569 bytes) 
 29.20%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (217 bytes) 
  2.03%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.18%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.75%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (49 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (17 bytes) 
  0.43%           libjvm.so  SpinPause (7 bytes) 
  0.43%        libc-2.31.so  malloc (0 bytes) 
  0.32%   [kernel.kallsyms]  page_remove_rmap (17 bytes) 
  0.32%   [kernel.kallsyms]  free_pages_and_swap_cache (8 bytes) 
  0.32%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (0 bytes) 
  0.32%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.32%        libc-2.31.so  _int_free (0 bytes) 
  0.32%        libc-2.31.so  _int_malloc (13 bytes) 
  0.21%   [kernel.kallsyms]  free_unref_page_prepare.part.0 (16 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (30 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_lruvec_state (29 bytes) 
  0.21%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 (13 bytes) 
  0.21%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 (0 bytes) 
  9.09%  <...other 79 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.64%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 527 
  2.03%   [kernel.kallsyms]  native_write_msr 
  1.18%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.86%        libc-2.31.so  malloc 
  0.86%        libc-2.31.so  _int_malloc 
  0.75%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.43%   [kernel.kallsyms]  page_remove_rmap 
  0.43%        libc-2.31.so  _int_free 
  0.43%           libjvm.so  SpinPause 
  0.32%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 
  0.32%   [kernel.kallsyms]  free_pages_and_swap_cache 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.32%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.21%           libjvm.so  CardTableExtension::scavenge_contents_parallel 
  0.21%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.21%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk 
  0.21%   [kernel.kallsyms]  finish_task_switch 
  0.21%           libjvm.so  resource_allocate_bytes 
  6.42%  <...other 54 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 84.28%         C2, level 4
  8.56%   [kernel.kallsyms]
  2.99%        libc-2.31.so
  2.67%           libjvm.so
  0.96%    libfcml.so.0.0.0
  0.43%         interpreter
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (935). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       639.314          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
