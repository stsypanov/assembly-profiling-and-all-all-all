# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1190.926 ns/op
# Warmup Iteration   2: 667.936 ns/op
# Warmup Iteration   3: 648.371 ns/op
# Warmup Iteration   4: 640.183 ns/op
# Warmup Iteration   5: 645.894 ns/op
Iteration   1: 655.588 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  655.588 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 139649 total address lines.
Perf output processed (skipped 11.970 seconds):
 Column 1: cycles (972 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (569 bytes) 

            0x00007ff181222ff9: vcvttss2si %xmm0,%r10d
  0.51%     0x00007ff181222ffd: cmp     $0x80000000,%r10d
         ╭  0x00007ff181223004: jne     0x7ff181223016
         │  0x00007ff181223006: sub     $0x8,%rsp
         │  0x00007ff18122300a: vmovss  %xmm0,(%rsp)
         │  0x00007ff18122300f: callq   0x7ff1810520a0    ;   {runtime_call}
         │  0x00007ff181223014: pop     %r10
         ↘  0x00007ff181223016: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff18122301a: mov     0x58(%rsp),%r11
  0.51%     0x00007ff18122301f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007ff181223751
            0x00007ff181223023: mov     0x90(%rsp),%ebp
            0x00007ff18122302a: cmp     %r10d,%ebp
            0x00007ff18122302d: jnb     0x7ff1812235ed
            0x00007ff181223033: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.51%     0x00007ff181223038: mov     0x28(%rsp),%r10
            0x00007ff18122303d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007ff181223041: mov     %r9,%r10
            0x00007ff181223044: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.31%     0x00007ff181223046: shr     $0x9,%r10
            0x00007ff18122304a: movabs  $0x7ff19480b000,%rcx
            0x00007ff181223054: mov     %r12l,(%rcx,%r10)
            0x00007ff181223058: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.41%     0x00007ff18122305b: test    %eax,0x159fcf9f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007ff181223061: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007ff18122376d
            0x00007ff181223065: cmp     %r10d,%ebp
            0x00007ff181223068: jnl     0x7ff181223293    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007ff18122306e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.21%     0x00007ff181223071: mov     0x8(%rsp),%r8d
            0x00007ff181223076: mov     (%rsp),%edi
  3.50%     0x00007ff181223079: mov     0x18(%rsp),%r14
            0x00007ff18122307e: mov     0x20(%rsp),%r11
            0x00007ff181223083: mov     0x30(%rsp),%r9
            0x00007ff181223088: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.51%     0x00007ff18122308d: mov     0x60(%r15),%rbx
            0x00007ff181223091: mov     %rbx,%r10
  0.10%     0x00007ff181223094: add     $0x28,%r10
            0x00007ff181223098: cmp     0x70(%r15),%r10
            0x00007ff18122309c: jnb     0x7ff1812232a2
  0.51%     0x00007ff1812230a2: mov     %r10,0x60(%r15)
            0x00007ff1812230a6: prefetchnta 0x100(%r10)
            0x00007ff1812230ae: mov     0xa8(%r11),%r10
            0x00007ff1812230b5: mov     %r10,(%rbx)
  0.41%     0x00007ff1812230b8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.10%     0x00007ff1812230bf: mov     %r12d,0xc(%rbx)
            0x00007ff1812230c3: mov     %r12,0x10(%rbx)
  0.10%     0x00007ff1812230c7: mov     %r12,0x18(%rbx)
  0.31%     0x00007ff1812230cb: mov     %r12d,0x20(%rbx)
            0x00007ff1812230cf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007ff1812230d2: mov     0x60(%r15),%rax
            0x00007ff1812230d6: mov     %rax,%r10
  0.51%     0x00007ff1812230d9: add     $0x20,%r10
            0x00007ff1812230dd: cmp     0x70(%r15),%r10
            0x00007ff1812230e1: jnb     0x7ff181223328
  0.10%     0x00007ff1812230e7: mov     %r10,0x60(%r15)
            0x00007ff1812230eb: prefetchnta 0x100(%r10)
  0.31%     0x00007ff1812230f3: mov     0xa8(%r14),%r10
  0.10%     0x00007ff1812230fa: mov     %r10,(%rax)
            0x00007ff1812230fd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007ff181223104: mov     %r12d,0xc(%rax)
  0.51%     0x00007ff181223108: mov     %r12,0x10(%rax)
            0x00007ff18122310c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181223110: mov     %rbx,%rcx
            0x00007ff181223113: mov     %rax,%r10
  0.31%     0x00007ff181223116: mov     %r10d,0xc(%rbx)
            0x00007ff18122311a: shr     $0x9,%rcx
            0x00007ff18122311e: movabs  $0x7ff19480b000,%r10
            0x00007ff181223128: mov     %r12l,(%r10,%rcx)
  0.21%     0x00007ff18122312c: mov     %r12d,0x14(%rbx)
  0.10%     0x00007ff181223130: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.53%     0x00007ff181223135: mov     0x60(%r15),%rdx
  0.10%     0x00007ff181223139: mov     %rdx,%r10
            0x00007ff18122313c: add     $0x18,%r10
  0.41%     0x00007ff181223140: cmp     0x70(%r15),%r10
            0x00007ff181223144: jnb     0x7ff1812233b6
            0x00007ff18122314a: mov     %r10,0x60(%r15)
            0x00007ff18122314e: prefetchnta 0x100(%r10)
            0x00007ff181223156: mov     0xa8(%rsi),%r10
  0.51%     0x00007ff18122315d: mov     %r10,(%rdx)
            0x00007ff181223160: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007ff181223167: mov     %r12d,0xc(%rdx)
            0x00007ff18122316b: mov     %r12d,0x14(%rdx)
  0.31%     0x00007ff18122316f: mov     %r13,0x58(%rsp)
            0x00007ff181223174: mov     %ebp,0x90(%rsp)
            0x00007ff18122317b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18122317e: mov     0x60(%r15),%rbp
  0.41%     0x00007ff181223182: mov     %rbp,%r10
            0x00007ff181223185: add     $0x20,%r10
            0x00007ff181223189: cmp     0x70(%r15),%r10
            0x00007ff18122318d: jnb     0x7ff181223447
            0x00007ff181223193: mov     %r10,0x60(%r15)
  0.41%     0x00007ff181223197: prefetchnta 0x100(%r10)
            0x00007ff18122319f: mov     0xa8(%r9),%r10
            0x00007ff1812231a6: mov     %r10,0x0(%rbp)
            0x00007ff1812231aa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.62%     0x00007ff1812231b1: mov     %r12d,0xc(%rbp)
            0x00007ff1812231b5: mov     %r12,0x10(%rbp)
            0x00007ff1812231b9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff1812231bd: mov     0x60(%r15),%rax
  0.93%     0x00007ff1812231c1: mov     %rax,%r10
  0.10%     0x00007ff1812231c4: add     $0x10,%r10
            0x00007ff1812231c8: cmp     0x70(%r15),%r10
            0x00007ff1812231cc: jnb     0x7ff1812234dd
            0x00007ff1812231d2: mov     %r10,0x60(%r15)
  0.72%     0x00007ff1812231d6: prefetchnta 0x100(%r10)
            0x00007ff1812231de: mov     0x10(%rsp),%r10
            0x00007ff1812231e3: mov     0xa8(%r10),%r10
            0x00007ff1812231ea: mov     %r10,(%rax)
  0.93%     0x00007ff1812231ed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007ff1812231f4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff1812231f8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff1812231fb: mov     %rax,%rcx
  0.41%     0x00007ff1812231fe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181223201: mov     %rbp,%rax
            0x00007ff181223204: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181223207: shr     $0x9,%rax
  0.51%     0x00007ff18122320b: movabs  $0x7ff19480b000,%r13
            0x00007ff181223215: mov     %r12l,0x0(%r13,%rax)
            0x00007ff18122321a: mov     %r12d,0x18(%rbp)
            0x00007ff18122321e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.80%     0x00007ff181223223: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007ff181223227: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18122322b: mov     %rdx,%r10
  0.62%     0x00007ff18122322e: shr     $0x9,%r10
            0x00007ff181223232: movabs  $0x7ff19480b000,%rdx
            0x00007ff18122323c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181223240: mov     %ecx,0x1c(%rbx)
  0.10%     0x00007ff181223243: mov     %rbx,%r10
            0x00007ff181223246: shr     $0x9,%r10
            0x00007ff18122324a: movabs  $0x7ff19480b000,%rcx
            0x00007ff181223254: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.93%     0x00007ff181223258: cmp     $0x1,%r8d
            0x00007ff18122325c: jle     0x7ff181222f10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181223262: mov     $0x1,%r10d
            0x00007ff181223268: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 51.13%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (217 bytes) 

            0x00007ff181222f0b: jmpq    0x7ff18122308d
            0x00007ff181222f10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181222f15: cmp     $0x40000,%edx
            0x00007ff181222f1b: jnbe    0x7ff1812235e5
            0x00007ff181222f21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.51%     0x00007ff181222f24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181222f27: cmp     $0x40000,%edx
            0x00007ff181222f2d: jnbe    0x7ff181223567
            0x00007ff181222f33: mov     %rbx,%rbp
            0x00007ff181222f36: mov     %rsi,0x38(%rsp)
  0.72%     0x00007ff181222f3b: mov     %r9,0x30(%rsp)
            0x00007ff181222f40: mov     %r11,0x20(%rsp)
            0x00007ff181222f45: mov     %r14,0x18(%rsp)
            0x00007ff181222f4a: mov     %edi,(%rsp)
  0.51%     0x00007ff181222f4d: mov     %r8d,0x8(%rsp)
            0x00007ff181222f52: mov     0x60(%r15),%r10
            0x00007ff181222f56: shl     $0x2,%rcx
            0x00007ff181222f5a: add     $0x17,%rcx
  0.10%     0x00007ff181222f5e: mov     %rcx,%r11
            0x00007ff181222f61: and     $0xfffffffffffffff8,%r11
            0x00007ff181222f65: mov     %r10,%r8
            0x00007ff181222f68: add     %r11,%r8
  0.72%     0x00007ff181222f6b: cmp     0x70(%r15),%r8
            0x00007ff181222f6f: jnb     0x7ff181223586
            0x00007ff181222f75: mov     %r8,0x60(%r15)
            0x00007ff181222f79: prefetchnta 0x100(%r8)
            0x00007ff181222f81: movq    $0x1,(%r10)
  0.41%     0x00007ff181222f88: prefetchnta 0x140(%r8)
  0.10%     0x00007ff181222f90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007ff181222f98: mov     %edx,0xc(%r10)
            0x00007ff181222f9c: prefetchnta 0x180(%r8)
  0.51%     0x00007ff181222fa4: mov     %r10,%rdi
            0x00007ff181222fa7: add     $0x10,%rdi
            0x00007ff181222fab: shr     $0x3,%rcx
            0x00007ff181222faf: add     $0xfffffffffffffffe,%rcx
  0.41%     0x00007ff181222fb3: xor     %rax,%rax
            0x00007ff181222fb6: shl     $0x3,%rcx
            0x00007ff181222fba: rep stosb (%rdi)
  8.85%     0x00007ff181222fbd: mov     %r10,%r11
            0x00007ff181222fc0: mov     %rbp,%r8
            0x00007ff181222fc3: mov     %r11d,0x20(%rbp)
  0.41%     0x00007ff181222fc7: mov     %rbp,%r10
            0x00007ff181222fca: shr     $0x9,%r10
            0x00007ff181222fce: movabs  $0x7ff19480b000,%r11
            0x00007ff181222fd8: mov     %r12l,(%r11,%r10)
  0.21%     0x00007ff181222fdc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.32%     0x00007ff181222fe1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff181222fe5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff181223741
            0x00007ff181222fe9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.62%     0x00007ff181222fee: mov     0x28(%rsp),%r10
            0x00007ff181222ff3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007ff181222ff9: vcvttss2si %xmm0,%r10d
  0.51%     0x00007ff181222ffd: cmp     $0x80000000,%r10d
         ╭  0x00007ff181223004: jne     0x7ff181223016
         │  0x00007ff181223006: sub     $0x8,%rsp
         │  0x00007ff18122300a: vmovss  %xmm0,(%rsp)
         │  0x00007ff18122300f: callq   0x7ff1810520a0    ;   {runtime_call}
         │  0x00007ff181223014: pop     %r10
         ↘  0x00007ff181223016: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff18122301a: mov     0x58(%rsp),%r11
  0.51%     0x00007ff18122301f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007ff181223751
            0x00007ff181223023: mov     0x90(%rsp),%ebp
....................................................................................................
 25.93%  <total for region 2>

....[Hottest Regions]...............................................................................
 51.13%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (569 bytes) 
 25.93%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (217 bytes) 
  1.95%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.82%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.72%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (0 bytes) 
  0.62%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.62%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (21 bytes) 
  0.51%        libc-2.31.so  malloc (0 bytes) 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.41%        libc-2.31.so  malloc_consolidate (46 bytes) 
  0.41%        libc-2.31.so  malloc (0 bytes) 
  0.31%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.31%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.31%   [kernel.kallsyms]  uncharge_page (21 bytes) 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  0.31%   [kernel.kallsyms]  syscall_return_via_sysret (1 bytes) 
  0.31%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (0 bytes) 
  0.31%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (1 bytes) 
  0.31%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 532 (13 bytes) 
  0.31%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (5 bytes) 
 13.48%  <...other 120 warm regions...>
....................................................................................................
 99.79%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 79.22%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 
  1.95%   [kernel.kallsyms]  native_write_msr 
  1.34%        libc-2.31.so  malloc 
  0.93%   [kernel.kallsyms]  free_pcppages_bulk 
  0.82%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.72%   [kernel.kallsyms]  release_pages 
  0.62%        libc-2.31.so  _int_malloc 
  0.51%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.51%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.51%   [kernel.kallsyms]  uncharge_page 
  0.51%        libc-2.31.so  malloc_consolidate 
  0.41%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 532 
  0.31%   [kernel.kallsyms]  page_remove_rmap 
  0.31%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.31%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.31%        libc-2.31.so  _int_free 
  0.21%        libc-2.31.so  _IO_default_xsputn 
  0.21%   [kernel.kallsyms]  native_sched_clock 
  0.21%   [kernel.kallsyms]  __mod_node_page_state 
  9.57%  <...other 78 warm methods...>
....................................................................................................
 99.79%  <totals>

....[Distribution by Source]........................................................................
 79.84%         C2, level 4
 11.73%   [kernel.kallsyms]
  3.60%        libc-2.31.so
  2.98%           libjvm.so
  1.44%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.10%    Unknown, level 0
....................................................................................................
 99.79%  <totals>

WARNING: The perf event count is suspiciously low (972). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       655.588          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
