# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1201.758 ns/op
# Warmup Iteration   2: 669.965 ns/op
# Warmup Iteration   3: 640.567 ns/op
# Warmup Iteration   4: 645.471 ns/op
# Warmup Iteration   5: 645.378 ns/op
Iteration   1: 653.384 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  653.384 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 139528 total address lines.
Perf output processed (skipped 12.030 seconds):
 Column 1: cycles (904 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (569 bytes) 

            0x00007ff18d2270b9: vcvttss2si %xmm0,%r10d
  0.33%     0x00007ff18d2270bd: cmp     $0x80000000,%r10d
         ╭  0x00007ff18d2270c4: jne     0x7ff18d2270d6
         │  0x00007ff18d2270c6: sub     $0x8,%rsp
         │  0x00007ff18d2270ca: vmovss  %xmm0,(%rsp)
         │  0x00007ff18d2270cf: callq   0x7ff18d0520a0    ;   {runtime_call}
         │  0x00007ff18d2270d4: pop     %r10
         ↘  0x00007ff18d2270d6: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff18d2270da: mov     0x58(%rsp),%r11
  0.44%     0x00007ff18d2270df: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007ff18d227811
            0x00007ff18d2270e3: mov     0x90(%rsp),%ebp
            0x00007ff18d2270ea: cmp     %r10d,%ebp
            0x00007ff18d2270ed: jnb     0x7ff18d2276ad
            0x00007ff18d2270f3: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.44%     0x00007ff18d2270f8: mov     0x28(%rsp),%r10
            0x00007ff18d2270fd: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007ff18d227101: mov     %r9,%r10
            0x00007ff18d227104: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.22%     0x00007ff18d227106: shr     $0x9,%r10
            0x00007ff18d22710a: movabs  $0x7ff1a1a08000,%rcx
            0x00007ff18d227114: mov     %r12l,(%rcx,%r10)
            0x00007ff18d227118: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.66%     0x00007ff18d22711b: test    %eax,0x16bf5edf(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007ff18d227121: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007ff18d22782d
  0.11%     0x00007ff18d227125: cmp     %r10d,%ebp
            0x00007ff18d227128: jnl     0x7ff18d227353    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007ff18d22712e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.55%     0x00007ff18d227131: mov     0x8(%rsp),%r8d
            0x00007ff18d227136: mov     (%rsp),%edi
  3.21%     0x00007ff18d227139: mov     0x18(%rsp),%r14
            0x00007ff18d22713e: mov     0x20(%rsp),%r11
  0.11%     0x00007ff18d227143: mov     0x30(%rsp),%r9
            0x00007ff18d227148: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  1.11%     0x00007ff18d22714d: mov     0x60(%r15),%rbx
  0.11%     0x00007ff18d227151: mov     %rbx,%r10
            0x00007ff18d227154: add     $0x28,%r10
            0x00007ff18d227158: cmp     0x70(%r15),%r10
            0x00007ff18d22715c: jnb     0x7ff18d227362
  0.55%     0x00007ff18d227162: mov     %r10,0x60(%r15)
            0x00007ff18d227166: prefetchnta 0x100(%r10)
            0x00007ff18d22716e: mov     0xa8(%r11),%r10
            0x00007ff18d227175: mov     %r10,(%rbx)
  0.66%     0x00007ff18d227178: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.11%     0x00007ff18d22717f: mov     %r12d,0xc(%rbx)
            0x00007ff18d227183: mov     %r12,0x10(%rbx)
            0x00007ff18d227187: mov     %r12,0x18(%rbx)
  0.66%     0x00007ff18d22718b: mov     %r12d,0x20(%rbx)
            0x00007ff18d22718f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007ff18d227192: mov     0x60(%r15),%rax
            0x00007ff18d227196: mov     %rax,%r10
  0.66%     0x00007ff18d227199: add     $0x20,%r10
            0x00007ff18d22719d: cmp     0x70(%r15),%r10
            0x00007ff18d2271a1: jnb     0x7ff18d2273e8
            0x00007ff18d2271a7: mov     %r10,0x60(%r15)
            0x00007ff18d2271ab: prefetchnta 0x100(%r10)
  0.88%     0x00007ff18d2271b3: mov     0xa8(%r14),%r10
            0x00007ff18d2271ba: mov     %r10,(%rax)
            0x00007ff18d2271bd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007ff18d2271c4: mov     %r12d,0xc(%rax)
  0.77%     0x00007ff18d2271c8: mov     %r12,0x10(%rax)
            0x00007ff18d2271cc: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007ff18d2271d0: mov     %rbx,%rcx
            0x00007ff18d2271d3: mov     %rax,%r10
  0.66%     0x00007ff18d2271d6: mov     %r10d,0xc(%rbx)
            0x00007ff18d2271da: shr     $0x9,%rcx
            0x00007ff18d2271de: movabs  $0x7ff1a1a08000,%r10
            0x00007ff18d2271e8: mov     %r12l,(%r10,%rcx)
  0.22%     0x00007ff18d2271ec: mov     %r12d,0x14(%rbx)
            0x00007ff18d2271f0: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.81%     0x00007ff18d2271f5: mov     0x60(%r15),%rdx
  0.33%     0x00007ff18d2271f9: mov     %rdx,%r10
            0x00007ff18d2271fc: add     $0x18,%r10
  0.22%     0x00007ff18d227200: cmp     0x70(%r15),%r10
            0x00007ff18d227204: jnb     0x7ff18d227476
            0x00007ff18d22720a: mov     %r10,0x60(%r15)
            0x00007ff18d22720e: prefetchnta 0x100(%r10)
            0x00007ff18d227216: mov     0xa8(%rsi),%r10
  0.66%     0x00007ff18d22721d: mov     %r10,(%rdx)
            0x00007ff18d227220: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007ff18d227227: mov     %r12d,0xc(%rdx)
            0x00007ff18d22722b: mov     %r12d,0x14(%rdx)
  0.55%     0x00007ff18d22722f: mov     %r13,0x58(%rsp)
            0x00007ff18d227234: mov     %ebp,0x90(%rsp)
            0x00007ff18d22723b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d22723e: mov     0x60(%r15),%rbp
  0.55%     0x00007ff18d227242: mov     %rbp,%r10
            0x00007ff18d227245: add     $0x20,%r10
            0x00007ff18d227249: cmp     0x70(%r15),%r10
            0x00007ff18d22724d: jnb     0x7ff18d227507
            0x00007ff18d227253: mov     %r10,0x60(%r15)
  0.66%     0x00007ff18d227257: prefetchnta 0x100(%r10)
            0x00007ff18d22725f: mov     0xa8(%r9),%r10
            0x00007ff18d227266: mov     %r10,0x0(%rbp)
            0x00007ff18d22726a: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.22%     0x00007ff18d227271: mov     %r12d,0xc(%rbp)
            0x00007ff18d227275: mov     %r12,0x10(%rbp)
            0x00007ff18d227279: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d22727d: mov     0x60(%r15),%rax
  0.88%     0x00007ff18d227281: mov     %rax,%r10
            0x00007ff18d227284: add     $0x10,%r10
            0x00007ff18d227288: cmp     0x70(%r15),%r10
            0x00007ff18d22728c: jnb     0x7ff18d22759d
            0x00007ff18d227292: mov     %r10,0x60(%r15)
  0.33%     0x00007ff18d227296: prefetchnta 0x100(%r10)
            0x00007ff18d22729e: mov     0x10(%rsp),%r10
            0x00007ff18d2272a3: mov     0xa8(%r10),%r10
  0.11%     0x00007ff18d2272aa: mov     %r10,(%rax)
  0.44%     0x00007ff18d2272ad: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007ff18d2272b4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d2272b8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d2272bb: mov     %rax,%rcx
  0.55%     0x00007ff18d2272be: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d2272c1: mov     %rbp,%rax
            0x00007ff18d2272c4: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d2272c7: shr     $0x9,%rax
  0.55%     0x00007ff18d2272cb: movabs  $0x7ff1a1a08000,%r13
  0.11%     0x00007ff18d2272d5: mov     %r12l,0x0(%r13,%rax)
            0x00007ff18d2272da: mov     %r12d,0x18(%rbp)
            0x00007ff18d2272de: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.69%     0x00007ff18d2272e3: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007ff18d2272e7: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d2272eb: mov     %rdx,%r10
  0.44%     0x00007ff18d2272ee: shr     $0x9,%r10
            0x00007ff18d2272f2: movabs  $0x7ff1a1a08000,%rdx
            0x00007ff18d2272fc: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d227300: mov     %ecx,0x1c(%rbx)
  0.44%     0x00007ff18d227303: mov     %rbx,%r10
            0x00007ff18d227306: shr     $0x9,%r10
            0x00007ff18d22730a: movabs  $0x7ff1a1a08000,%rcx
            0x00007ff18d227314: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.22%     0x00007ff18d227318: cmp     $0x1,%r8d
            0x00007ff18d22731c: jle     0x7ff18d226fd0    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d227322: mov     $0x1,%r10d
            0x00007ff18d227328: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 55.20%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (217 bytes) 

            0x00007ff18d226fcb: jmpq    0x7ff18d22714d
            0x00007ff18d226fd0: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d226fd5: cmp     $0x40000,%edx
            0x00007ff18d226fdb: jnbe    0x7ff18d2276a5
            0x00007ff18d226fe1: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.22%     0x00007ff18d226fe4: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d226fe7: cmp     $0x40000,%edx
            0x00007ff18d226fed: jnbe    0x7ff18d227627
            0x00007ff18d226ff3: mov     %rbx,%rbp
            0x00007ff18d226ff6: mov     %rsi,0x38(%rsp)
  0.22%     0x00007ff18d226ffb: mov     %r9,0x30(%rsp)
            0x00007ff18d227000: mov     %r11,0x20(%rsp)
            0x00007ff18d227005: mov     %r14,0x18(%rsp)
            0x00007ff18d22700a: mov     %edi,(%rsp)
  0.55%     0x00007ff18d22700d: mov     %r8d,0x8(%rsp)
            0x00007ff18d227012: mov     0x60(%r15),%r10
            0x00007ff18d227016: shl     $0x2,%rcx
            0x00007ff18d22701a: add     $0x17,%rcx
  0.66%     0x00007ff18d22701e: mov     %rcx,%r11
            0x00007ff18d227021: and     $0xfffffffffffffff8,%r11
            0x00007ff18d227025: mov     %r10,%r8
            0x00007ff18d227028: add     %r11,%r8
  1.00%     0x00007ff18d22702b: cmp     0x70(%r15),%r8
            0x00007ff18d22702f: jnb     0x7ff18d227646
            0x00007ff18d227035: mov     %r8,0x60(%r15)
  0.11%     0x00007ff18d227039: prefetchnta 0x100(%r8)
            0x00007ff18d227041: movq    $0x1,(%r10)
  0.55%     0x00007ff18d227048: prefetchnta 0x140(%r8)
            0x00007ff18d227050: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007ff18d227058: mov     %edx,0xc(%r10)
            0x00007ff18d22705c: prefetchnta 0x180(%r8)
  0.33%     0x00007ff18d227064: mov     %r10,%rdi
            0x00007ff18d227067: add     $0x10,%rdi
            0x00007ff18d22706b: shr     $0x3,%rcx
            0x00007ff18d22706f: add     $0xfffffffffffffffe,%rcx
  0.33%     0x00007ff18d227073: xor     %rax,%rax
            0x00007ff18d227076: shl     $0x3,%rcx
            0x00007ff18d22707a: rep stosb (%rdi)
 10.84%     0x00007ff18d22707d: mov     %r10,%r11
  0.11%     0x00007ff18d227080: mov     %rbp,%r8
            0x00007ff18d227083: mov     %r11d,0x20(%rbp)
  0.88%     0x00007ff18d227087: mov     %rbp,%r10
            0x00007ff18d22708a: shr     $0x9,%r10
  0.11%     0x00007ff18d22708e: movabs  $0x7ff1a1a08000,%r11
            0x00007ff18d227098: mov     %r12l,(%r11,%r10)
  0.44%     0x00007ff18d22709c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.06%     0x00007ff18d2270a1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff18d2270a5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff18d227801
            0x00007ff18d2270a9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.77%     0x00007ff18d2270ae: mov     0x28(%rsp),%r10
            0x00007ff18d2270b3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007ff18d2270b9: vcvttss2si %xmm0,%r10d
  0.33%     0x00007ff18d2270bd: cmp     $0x80000000,%r10d
         ╭  0x00007ff18d2270c4: jne     0x7ff18d2270d6
         │  0x00007ff18d2270c6: sub     $0x8,%rsp
         │  0x00007ff18d2270ca: vmovss  %xmm0,(%rsp)
         │  0x00007ff18d2270cf: callq   0x7ff18d0520a0    ;   {runtime_call}
         │  0x00007ff18d2270d4: pop     %r10
         ↘  0x00007ff18d2270d6: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff18d2270da: mov     0x58(%rsp),%r11
  0.44%     0x00007ff18d2270df: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007ff18d227811
            0x00007ff18d2270e3: mov     0x90(%rsp),%ebp
....................................................................................................
 28.54%  <total for region 2>

....[Hottest Regions]...............................................................................
 55.20%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (569 bytes) 
 28.54%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (217 bytes) 
  1.33%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.77%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.77%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (31 bytes) 
  0.44%        libc-2.31.so  _int_malloc (0 bytes) 
  0.33%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.33%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.33%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (7 bytes) 
  0.33%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 556 (21 bytes) 
  0.33%           libjvm.so  SpinPause (7 bytes) 
  0.33%        libc-2.31.so  malloc (0 bytes) 
  0.22%   [kernel.kallsyms]  zap_pte_range.isra.0 (28 bytes) 
  0.22%   [kernel.kallsyms]  __mod_memcg_lruvec_state (30 bytes) 
  0.22%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.22%   [kernel.kallsyms]  entry_SYSCALL_64 (20 bytes) 
  0.22%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (31 bytes) 
  0.22%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 (0 bytes) 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_is_alpha (0 bytes) 
  0.22%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  9.07%  <...other 79 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 85.62%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 524 
  1.33%   [kernel.kallsyms]  native_write_msr 
  1.00%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.77%        libc-2.31.so  _int_malloc 
  0.66%   [kernel.kallsyms]  free_pcppages_bulk 
  0.55%        libc-2.31.so  malloc 
  0.44%        libc-2.31.so  _int_free 
  0.33%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 556 
  0.33%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.33%           libjvm.so  SpinPause 
  0.33%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.22%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.22%           libjvm.so  InstanceKlass::allocate_instance 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_is_alpha 
  0.22%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.22%           libjvm.so  fileStream::write 
  0.22%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.22%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.22%        libc-2.31.so  malloc_consolidate 
  0.22%    libfcml.so.0.0.0  fcml_fn_coll_map_get 
  6.19%  <...other 55 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 86.06%         C2, level 4
  7.08%   [kernel.kallsyms]
  2.88%           libjvm.so
  2.43%        libc-2.31.so
  1.11%    libfcml.so.0.0.0
  0.22%         interpreter
  0.11%  libpthread-2.31.so
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (904). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       653.384          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
