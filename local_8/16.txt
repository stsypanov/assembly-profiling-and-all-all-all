# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1285.795 ns/op
# Warmup Iteration   2: 723.742 ns/op
# Warmup Iteration   3: 709.725 ns/op
# Warmup Iteration   4: 709.584 ns/op
# Warmup Iteration   5: 698.704 ns/op
Iteration   1: 705.966 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  705.966 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 141991 total address lines.
Perf output processed (skipped 12.030 seconds):
 Column 1: cycles (861 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (554 bytes) 

             0x00007f3805226443: vcvttss2si %xmm1,%r10d
  0.58%      0x00007f3805226447: cmp     $0x80000000,%r10d
         ╭   0x00007f380522644e: jne     0x7f3805226460
         │   0x00007f3805226450: sub     $0x8,%rsp
         │   0x00007f3805226454: vmovss  %xmm1,(%rsp)
         │   0x00007f3805226459: callq   0x7f38050520a0    ;   {runtime_call}
         │   0x00007f380522645e: pop     %r10
         ↘   0x00007f3805226460: mov     %r10d,0x18(%r9)   ;*synchronization entry
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
             0x00007f3805226464: mov     (%rsp),%r10
  5.69%      0x00007f3805226468: mov     0xc(%r10),%r8d    ; implicit exception: dispatches to 0x00007f3805226b71
  1.63%      0x00007f380522646c: mov     0x88(%rsp),%ebp
             0x00007f3805226473: cmp     %r8d,%ebp
             0x00007f3805226476: jnb     0x7f38052269fc
  0.81%      0x00007f380522647c: lea     0x10(%r10,%rbp,4),%rcx  ;*aastore
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
             0x00007f3805226481: mov     0x1c(%r11),%r10d  ;*getfield segments
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
             0x00007f3805226485: mov     %rcx,%r8
             0x00007f3805226488: incl    %ebp              ;*iinc
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.23%      0x00007f380522648a: shr     $0x9,%r8
             0x00007f380522648e: movabs  $0x7f38194d4000,%rbx
             0x00007f3805226498: mov     %r12l,(%rbx,%r8)
  2.44%      0x00007f380522649c: mov     %r9d,(%rcx)       ; OopMap{r10=NarrowOop r11=Oop [12]=NarrowOop off=863}
                                                           ;*goto
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
             0x00007f380522649f: test    %eax,0x166c2b5b(%rip)  ;*goto
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                           ;   {poll}
             0x00007f38052264a5: mov     0xc(%r10),%r8d    ; implicit exception: dispatches to 0x00007f3805226b89
             0x00007f38052264a9: cmp     %r8d,%ebp
             0x00007f38052264ac: jnl     0x7f38052266d2    ;*if_icmpge
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
  0.23%      0x00007f38052264b2: mov     %r10,%r13         ;*getfield segments
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
             0x00007f38052264b5: mov     0x8(%rsp),%r8d
             0x00007f38052264ba: mov     0xc(%rsp),%ebx
             0x00007f38052264be: mov     0x28(%rsp),%r9
  0.93%      0x00007f38052264c3: mov     0x30(%rsp),%rsi   ;*aload_0
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
             0x00007f38052264c8: mov     0x60(%r15),%rdi
             0x00007f38052264cc: mov     %rdi,%r10
             0x00007f38052264cf: add     $0x28,%r10
  0.46%      0x00007f38052264d3: cmp     0x70(%r15),%r10
             0x00007f38052264d7: jnb     0x7f38052266e1
             0x00007f38052264dd: mov     %r10,0x60(%r15)
             0x00007f38052264e1: prefetchnta 0x100(%r10)
             0x00007f38052264e9: mov     0x20(%rsp),%r10
  0.23%      0x00007f38052264ee: mov     0xa8(%r10),%r10
             0x00007f38052264f5: mov     %r10,(%rdi)
             0x00007f38052264f8: movl    $0x2001959f,0x8(%rdi)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
             0x00007f38052264ff: mov     %r12d,0xc(%rdi)
  0.23%      0x00007f3805226503: mov     %r12,0x10(%rdi)
             0x00007f3805226507: mov     %r12,0x18(%rdi)
             0x00007f380522650b: mov     %r12d,0x20(%rdi)
             0x00007f380522650f: mov     %ebx,0x24(%rdi)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
  0.46%      0x00007f3805226512: mov     0x60(%r15),%rax
             0x00007f3805226516: mov     %rax,%r10
             0x00007f3805226519: add     $0x20,%r10
             0x00007f380522651d: cmp     0x70(%r15),%r10
             0x00007f3805226521: jnb     0x7f380522676e
  0.93%      0x00007f3805226527: mov     %r10,0x60(%r15)
             0x00007f380522652b: prefetchnta 0x100(%r10)
             0x00007f3805226533: mov     0x18(%rsp),%r10
  0.23%      0x00007f3805226538: mov     0xa8(%r10),%r10
  0.93%      0x00007f380522653f: mov     %r10,(%rax)
  0.12%      0x00007f3805226542: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
             0x00007f3805226549: mov     %r12d,0xc(%rax)
             0x00007f380522654d: mov     %r12,0x10(%rax)
  0.46%      0x00007f3805226551: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f3805226555: mov     %rdi,%rcx
             0x00007f3805226558: mov     %rax,%r10
  0.12%      0x00007f380522655b: mov     %r10d,0xc(%rdi)
  0.35%      0x00007f380522655f: shr     $0x9,%rcx
             0x00007f3805226563: movabs  $0x7f38194d4000,%r10
             0x00007f380522656d: mov     %r12l,(%r10,%rcx)
             0x00007f3805226571: mov     %r12d,0x14(%rdi)
  0.58%      0x00007f3805226575: lock addl $0x0,(%rsp)     ;*putfield count
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.82%      0x00007f380522657a: mov     0x60(%r15),%rcx
             0x00007f380522657e: mov     %rcx,%r10
             0x00007f3805226581: add     $0x18,%r10
  0.23%      0x00007f3805226585: cmp     0x70(%r15),%r10
             0x00007f3805226589: jnb     0x7f3805226800
             0x00007f380522658f: mov     %r10,0x60(%r15)
             0x00007f3805226593: prefetchnta 0x100(%r10)
             0x00007f380522659b: mov     0xa8(%rsi),%r10
  0.70%      0x00007f38052265a2: mov     %r10,(%rcx)
             0x00007f38052265a5: movl    $0x200196b2,0x8(%rcx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
             0x00007f38052265ac: mov     %r12d,0xc(%rcx)
             0x00007f38052265b0: mov     %r12d,0x14(%rcx)
  0.93%      0x00007f38052265b4: mov     %ebp,0x88(%rsp)
             0x00007f38052265bb: mov     %ebx,0x10(%rcx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f38052265be: mov     0x60(%r15),%rdx
             0x00007f38052265c2: mov     %rdx,%r10
  0.35%      0x00007f38052265c5: add     $0x20,%r10
             0x00007f38052265c9: cmp     0x70(%r15),%r10
             0x00007f38052265cd: jnb     0x7f3805226897
             0x00007f38052265d3: mov     %r10,0x60(%r15)
             0x00007f38052265d7: prefetchnta 0x100(%r10)
  0.23%      0x00007f38052265df: mov     0xa8(%r9),%r10
             0x00007f38052265e6: mov     %r10,(%rdx)
             0x00007f38052265e9: movl    $0x20000d06,0x8(%rdx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
             0x00007f38052265f0: mov     %r12d,0xc(%rdx)
  0.70%      0x00007f38052265f4: mov     %r12,0x10(%rdx)
             0x00007f38052265f8: mov     %r12,0x18(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f38052265fc: mov     0x60(%r15),%rax
             0x00007f3805226600: mov     %rax,%r10
  0.81%      0x00007f3805226603: add     $0x10,%r10
             0x00007f3805226607: cmp     0x70(%r15),%r10
             0x00007f380522660b: jnb     0x7f380522690c
             0x00007f3805226611: mov     %r10,0x60(%r15)
             0x00007f3805226615: prefetchnta 0x100(%r10)
  0.46%      0x00007f380522661d: mov     0x10(%rsp),%r10
             0x00007f3805226622: mov     0xa8(%r10),%r10
             0x00007f3805226629: mov     %r10,(%rax)
             0x00007f380522662c: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.70%      0x00007f3805226633: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f3805226637: mov     %rdx,%r10         ;*putfield queue
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f380522663a: mov     %rax,%rbp
             0x00007f380522663d: mov     %ebp,0xc(%rdx)    ;*putfield lock
                                                           ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.35%      0x00007f3805226640: mov     %rdx,%rax
             0x00007f3805226643: mov     %rcx,%rbp         ;*putfield referenceManager
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f3805226646: shr     $0x9,%rax
             0x00007f380522664a: movabs  $0x7f38194d4000,%r14
  0.46%      0x00007f3805226654: mov     %r12l,(%r14,%rax)
             0x00007f3805226658: mov     %r12d,0x18(%rdx)
             0x00007f380522665c: lock addl $0x0,(%rsp)     ;*putfield head
                                                           ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.14%      0x00007f3805226661: mov     %r10d,0xc(%rcx)   ;*putfield queue
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f3805226665: mov     %r12,0x10(%rdx)   ;*putfield queueLength
                                                           ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f3805226669: mov     %rcx,%r10
  0.93%      0x00007f380522666c: shr     $0x9,%r10
             0x00007f3805226670: movabs  $0x7f38194d4000,%rcx
             0x00007f380522667a: mov     %r12l,(%rcx,%r10)  ;*synchronization entry
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f380522667e: mov     %ebp,0x1c(%rdi)
  0.93%      0x00007f3805226681: mov     %rdi,%r10
             0x00007f3805226684: shr     $0x9,%r10
             0x00007f3805226688: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
             0x00007f380522668c: cmp     $0x1,%r8d
          ╭  0x00007f3805226690: jnle    0x7f380522669c    ;*if_icmpge
          │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
          │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
          │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.58%   │  0x00007f3805226692: mov     $0x1,%edx
          │  0x00007f3805226697: jmpq    0x7f3805226360    ;*goto
          │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
          │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
          │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
          ↘  0x00007f380522669c: mov     $0x1,%r10d
             0x00007f38052266a2: xor     %ecx,%ecx
             0x00007f38052266a4: nopl    0x0(%rax,%rax)
....................................................................................................
 55.40%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (216 bytes) 

            0x00007f3805226359: mov     $0x1,%edx
            0x00007f380522635e: shl     %cl,%edx          ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f3805226360: cmp     $0x40000,%edx
            0x00007f3805226366: jnbe    0x7f38052269f4
            0x00007f380522636c: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  1.05%     0x00007f380522636f: mov     %edx,0x10(%rdi)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f3805226372: cmp     $0x40000,%edx
            0x00007f3805226378: jnbe    0x7f3805226972
            0x00007f380522637e: mov     %rdi,0x38(%rsp)
            0x00007f3805226383: mov     %rsi,0x30(%rsp)
  0.46%     0x00007f3805226388: mov     %r9,0x28(%rsp)
            0x00007f380522638d: mov     %ebx,0xc(%rsp)
            0x00007f3805226391: mov     %r13,(%rsp)
            0x00007f3805226395: mov     %r8d,0x8(%rsp)
  0.70%     0x00007f380522639a: mov     %r11,%rbp
            0x00007f380522639d: mov     0x60(%r15),%r10
            0x00007f38052263a1: shl     $0x2,%rcx
            0x00007f38052263a5: add     $0x17,%rcx
  0.58%     0x00007f38052263a9: mov     %rcx,%r11
            0x00007f38052263ac: and     $0xfffffffffffffff8,%r11
            0x00007f38052263b0: mov     %r10,%r8
            0x00007f38052263b3: add     %r11,%r8
  0.70%     0x00007f38052263b6: cmp     0x70(%r15),%r8
            0x00007f38052263ba: jnb     0x7f3805226991
            0x00007f38052263c0: mov     %r8,0x60(%r15)
            0x00007f38052263c4: prefetchnta 0x100(%r8)
            0x00007f38052263cc: movq    $0x1,(%r10)
  0.58%     0x00007f38052263d3: prefetchnta 0x140(%r8)
            0x00007f38052263db: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f38052263e3: mov     %edx,0xc(%r10)
            0x00007f38052263e7: prefetchnta 0x180(%r8)
  0.46%     0x00007f38052263ef: mov     %r10,%rdi
            0x00007f38052263f2: add     $0x10,%rdi
            0x00007f38052263f6: shr     $0x3,%rcx
            0x00007f38052263fa: add     $0xfffffffffffffffe,%rcx
  0.81%     0x00007f38052263fe: xor     %rax,%rax
            0x00007f3805226401: shl     $0x3,%rcx
            0x00007f3805226405: rep stosb (%rdi)
  9.52%     0x00007f3805226408: mov     %r10,%r11
  0.35%     0x00007f380522640b: mov     0x38(%rsp),%r9
  0.12%     0x00007f3805226410: mov     %r11d,0x20(%r9)
  0.35%     0x00007f3805226414: mov     %r9,%r10
            0x00007f3805226417: shr     $0x9,%r10
            0x00007f380522641b: movabs  $0x7f38194d4000,%r11
            0x00007f3805226425: mov     %r12l,(%r11,%r10)
  0.70%     0x00007f3805226429: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.10%     0x00007f380522642e: mov     0x20(%r9),%r10d   ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f3805226432: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f3805226b61
  0.12%     0x00007f3805226436: vcvtsi2ssl %r11d,%xmm0,%xmm0
  0.58%     0x00007f380522643b: mov     %rbp,%r11
            0x00007f380522643e: vmulss  0x14(%rbp),%xmm0,%xmm1
            0x00007f3805226443: vcvttss2si %xmm1,%r10d
  0.58%     0x00007f3805226447: cmp     $0x80000000,%r10d
         ╭  0x00007f380522644e: jne     0x7f3805226460
         │  0x00007f3805226450: sub     $0x8,%rsp
         │  0x00007f3805226454: vmovss  %xmm1,(%rsp)
         │  0x00007f3805226459: callq   0x7f38050520a0    ;   {runtime_call}
         │  0x00007f380522645e: pop     %r10
         ↘  0x00007f3805226460: mov     %r10d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f3805226464: mov     (%rsp),%r10
  5.69%     0x00007f3805226468: mov     0xc(%r10),%r8d    ; implicit exception: dispatches to 0x00007f3805226b71
  1.63%     0x00007f380522646c: mov     0x88(%rsp),%ebp
....................................................................................................
 27.76%  <total for region 2>

....[Hottest Regions]...............................................................................
 55.40%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (554 bytes) 
 27.76%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (216 bytes) 
  1.39%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.70%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (35 bytes) 
  0.46%           libjvm.so  SpinPause (7 bytes) 
  0.35%   [kernel.kallsyms]  kprobe_flush_task (0 bytes) 
  0.35%   [kernel.kallsyms]  __perf_event_task_sched_in (0 bytes) 
  0.35%           libjvm.so  ParallelTaskTerminator::offer_termination (0 bytes) 
  0.35%        libc-2.31.so  _int_free (5 bytes) 
  0.23%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 (0 bytes) 
  0.23%   [kernel.kallsyms]  __mod_lruvec_page_state (32 bytes) 
  0.23%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.23%           libjvm.so  IndexSetIterator::advance_and_next (26 bytes) 
  0.23%           libjvm.so  StringTable::buckets_unlink_or_oops_do (20 bytes) 
  0.23%        libc-2.31.so  __libc_disable_asynccancel (5 bytes) 
  0.23%        libc-2.31.so  unlink_chunk.isra.0 (6 bytes) 
  0.23%        libc-2.31.so  malloc_consolidate (24 bytes) 
  0.23%        libc-2.31.so  malloc (0 bytes) 
  0.12%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 (0 bytes) 
  0.12%   [kernel.kallsyms]  intel_pmu_enable_all (0 bytes) 
 10.45%  <...other 90 warm regions...>
....................................................................................................
 99.88%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.32%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 
  1.39%   [kernel.kallsyms]  native_write_msr 
  0.81%        libc-2.31.so  malloc 
  0.58%        libc-2.31.so  _int_free 
  0.46%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.46%           libjvm.so  SpinPause 
  0.35%   [kernel.kallsyms]  kprobe_flush_task 
  0.35%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.35%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.35%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.23%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  0.23%        libc-2.31.so  __strlen_avx2 
  0.23%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.23%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 538 
  0.23%        libc-2.31.so  unlink_chunk.isra.0 
  0.23%           libjvm.so  fileStream::write 
  0.23%   [kernel.kallsyms]  __mod_lruvec_page_state 
  0.23%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.23%        libc-2.31.so  __libc_disable_asynccancel 
  0.23%        libc-2.31.so  malloc_consolidate 
  8.13%  <...other 69 warm methods...>
....................................................................................................
 99.88%  <totals>

....[Distribution by Source]........................................................................
 84.79%         C2, level 4
  7.20%   [kernel.kallsyms]
  3.72%           libjvm.so
  2.67%        libc-2.31.so
  0.93%    libfcml.so.0.0.0
  0.23%         interpreter
  0.12%   libhsdis.so.0.0.0
  0.12%  libpthread-2.31.so
  0.12%          libahci.ko
....................................................................................................
 99.88%  <totals>

WARNING: The perf event count is suspiciously low (861). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       705.966          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
