# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1260.854 ns/op
# Warmup Iteration   2: 681.990 ns/op
# Warmup Iteration   3: 640.010 ns/op
# Warmup Iteration   4: 639.829 ns/op
# Warmup Iteration   5: 641.271 ns/op
Iteration   1: 644.520 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  644.520 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 142048 total address lines.
Perf output processed (skipped 12.047 seconds):
 Column 1: cycles (935 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (569 bytes) 

            0x00007f52ed22adf9: vcvttss2si %xmm0,%r10d
  0.75%     0x00007f52ed22adfd: cmp     $0x80000000,%r10d
         ╭  0x00007f52ed22ae04: jne     0x7f52ed22ae16
         │  0x00007f52ed22ae06: sub     $0x8,%rsp
         │  0x00007f52ed22ae0a: vmovss  %xmm0,(%rsp)
         │  0x00007f52ed22ae0f: callq   0x7f52ed0520a0    ;   {runtime_call}
         │  0x00007f52ed22ae14: pop     %r10
         ↘  0x00007f52ed22ae16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f52ed22ae1a: mov     0x58(%rsp),%r11
  0.21%     0x00007f52ed22ae1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f52ed22b551
            0x00007f52ed22ae23: mov     0x90(%rsp),%ebp
            0x00007f52ed22ae2a: cmp     %r10d,%ebp
            0x00007f52ed22ae2d: jnb     0x7f52ed22b3ed
            0x00007f52ed22ae33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.43%     0x00007f52ed22ae38: mov     0x28(%rsp),%r10
            0x00007f52ed22ae3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f52ed22ae41: mov     %r9,%r10
            0x00007f52ed22ae44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.64%     0x00007f52ed22ae46: shr     $0x9,%r10
            0x00007f52ed22ae4a: movabs  $0x7f53010b4000,%rcx
            0x00007f52ed22ae54: mov     %r12l,(%rcx,%r10)
            0x00007f52ed22ae58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.32%     0x00007f52ed22ae5b: test    %eax,0x1629e19f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f52ed22ae61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f52ed22b56d
            0x00007f52ed22ae65: cmp     %r10d,%ebp
            0x00007f52ed22ae68: jnl     0x7f52ed22b093    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f52ed22ae6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.64%     0x00007f52ed22ae71: mov     0x8(%rsp),%r8d
            0x00007f52ed22ae76: mov     (%rsp),%edi
  3.85%     0x00007f52ed22ae79: mov     0x18(%rsp),%r14
            0x00007f52ed22ae7e: mov     0x20(%rsp),%r11
            0x00007f52ed22ae83: mov     0x30(%rsp),%r9
            0x00007f52ed22ae88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.64%     0x00007f52ed22ae8d: mov     0x60(%r15),%rbx
            0x00007f52ed22ae91: mov     %rbx,%r10
            0x00007f52ed22ae94: add     $0x28,%r10
            0x00007f52ed22ae98: cmp     0x70(%r15),%r10
            0x00007f52ed22ae9c: jnb     0x7f52ed22b0a2
  0.75%     0x00007f52ed22aea2: mov     %r10,0x60(%r15)
            0x00007f52ed22aea6: prefetchnta 0x100(%r10)
            0x00007f52ed22aeae: mov     0xa8(%r11),%r10
            0x00007f52ed22aeb5: mov     %r10,(%rbx)
  0.53%     0x00007f52ed22aeb8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f52ed22aebf: mov     %r12d,0xc(%rbx)
  0.11%     0x00007f52ed22aec3: mov     %r12,0x10(%rbx)
            0x00007f52ed22aec7: mov     %r12,0x18(%rbx)
  0.53%     0x00007f52ed22aecb: mov     %r12d,0x20(%rbx)
            0x00007f52ed22aecf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f52ed22aed2: mov     0x60(%r15),%rax
            0x00007f52ed22aed6: mov     %rax,%r10
  0.75%     0x00007f52ed22aed9: add     $0x20,%r10
            0x00007f52ed22aedd: cmp     0x70(%r15),%r10
            0x00007f52ed22aee1: jnb     0x7f52ed22b128
            0x00007f52ed22aee7: mov     %r10,0x60(%r15)
  0.11%     0x00007f52ed22aeeb: prefetchnta 0x100(%r10)
  0.43%     0x00007f52ed22aef3: mov     0xa8(%r14),%r10
            0x00007f52ed22aefa: mov     %r10,(%rax)
            0x00007f52ed22aefd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f52ed22af04: mov     %r12d,0xc(%rax)
  0.75%     0x00007f52ed22af08: mov     %r12,0x10(%rax)
            0x00007f52ed22af0c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22af10: mov     %rbx,%rcx
            0x00007f52ed22af13: mov     %rax,%r10
  0.53%     0x00007f52ed22af16: mov     %r10d,0xc(%rbx)
            0x00007f52ed22af1a: shr     $0x9,%rcx
  0.11%     0x00007f52ed22af1e: movabs  $0x7f53010b4000,%r10
            0x00007f52ed22af28: mov     %r12l,(%r10,%rcx)
  0.11%     0x00007f52ed22af2c: mov     %r12d,0x14(%rbx)
            0x00007f52ed22af30: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 14.12%     0x00007f52ed22af35: mov     0x60(%r15),%rdx
            0x00007f52ed22af39: mov     %rdx,%r10
            0x00007f52ed22af3c: add     $0x18,%r10
  1.28%     0x00007f52ed22af40: cmp     0x70(%r15),%r10
            0x00007f52ed22af44: jnb     0x7f52ed22b1b6
            0x00007f52ed22af4a: mov     %r10,0x60(%r15)
            0x00007f52ed22af4e: prefetchnta 0x100(%r10)
            0x00007f52ed22af56: mov     0xa8(%rsi),%r10
  0.53%     0x00007f52ed22af5d: mov     %r10,(%rdx)
            0x00007f52ed22af60: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f52ed22af67: mov     %r12d,0xc(%rdx)
            0x00007f52ed22af6b: mov     %r12d,0x14(%rdx)
  0.96%     0x00007f52ed22af6f: mov     %r13,0x58(%rsp)
            0x00007f52ed22af74: mov     %ebp,0x90(%rsp)
            0x00007f52ed22af7b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22af7e: mov     0x60(%r15),%rbp
  0.21%     0x00007f52ed22af82: mov     %rbp,%r10
            0x00007f52ed22af85: add     $0x20,%r10
            0x00007f52ed22af89: cmp     0x70(%r15),%r10
            0x00007f52ed22af8d: jnb     0x7f52ed22b247
            0x00007f52ed22af93: mov     %r10,0x60(%r15)
  0.64%     0x00007f52ed22af97: prefetchnta 0x100(%r10)
            0x00007f52ed22af9f: mov     0xa8(%r9),%r10
            0x00007f52ed22afa6: mov     %r10,0x0(%rbp)
            0x00007f52ed22afaa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.86%     0x00007f52ed22afb1: mov     %r12d,0xc(%rbp)
            0x00007f52ed22afb5: mov     %r12,0x10(%rbp)
            0x00007f52ed22afb9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22afbd: mov     0x60(%r15),%rax
  0.75%     0x00007f52ed22afc1: mov     %rax,%r10
            0x00007f52ed22afc4: add     $0x10,%r10
            0x00007f52ed22afc8: cmp     0x70(%r15),%r10
            0x00007f52ed22afcc: jnb     0x7f52ed22b2dd
            0x00007f52ed22afd2: mov     %r10,0x60(%r15)
  0.86%     0x00007f52ed22afd6: prefetchnta 0x100(%r10)
            0x00007f52ed22afde: mov     0x10(%rsp),%r10
            0x00007f52ed22afe3: mov     0xa8(%r10),%r10
            0x00007f52ed22afea: mov     %r10,(%rax)
  0.75%     0x00007f52ed22afed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f52ed22aff4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22aff8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22affb: mov     %rax,%rcx
  0.32%     0x00007f52ed22affe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22b001: mov     %rbp,%rax
            0x00007f52ed22b004: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22b007: shr     $0x9,%rax
  0.53%     0x00007f52ed22b00b: movabs  $0x7f53010b4000,%r13
            0x00007f52ed22b015: mov     %r12l,0x0(%r13,%rax)
            0x00007f52ed22b01a: mov     %r12d,0x18(%rbp)
            0x00007f52ed22b01e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.50%     0x00007f52ed22b023: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f52ed22b027: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22b02b: mov     %rdx,%r10
  1.28%     0x00007f52ed22b02e: shr     $0x9,%r10
            0x00007f52ed22b032: movabs  $0x7f53010b4000,%rdx
            0x00007f52ed22b03c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22b040: mov     %ecx,0x1c(%rbx)
  0.43%     0x00007f52ed22b043: mov     %rbx,%r10
            0x00007f52ed22b046: shr     $0x9,%r10
            0x00007f52ed22b04a: movabs  $0x7f53010b4000,%rcx
            0x00007f52ed22b054: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007f52ed22b058: cmp     $0x1,%r8d
            0x00007f52ed22b05c: jle     0x7f52ed22ad10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22b062: mov     $0x1,%r10d
            0x00007f52ed22b068: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 53.90%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (217 bytes) 

            0x00007f52ed22ad0b: jmpq    0x7f52ed22ae8d
            0x00007f52ed22ad10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22ad15: cmp     $0x40000,%edx
            0x00007f52ed22ad1b: jnbe    0x7f52ed22b3e5
            0x00007f52ed22ad21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007f52ed22ad24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22ad27: cmp     $0x40000,%edx
            0x00007f52ed22ad2d: jnbe    0x7f52ed22b367
            0x00007f52ed22ad33: mov     %rbx,%rbp
            0x00007f52ed22ad36: mov     %rsi,0x38(%rsp)
  0.43%     0x00007f52ed22ad3b: mov     %r9,0x30(%rsp)
            0x00007f52ed22ad40: mov     %r11,0x20(%rsp)
            0x00007f52ed22ad45: mov     %r14,0x18(%rsp)
            0x00007f52ed22ad4a: mov     %edi,(%rsp)
  0.43%     0x00007f52ed22ad4d: mov     %r8d,0x8(%rsp)
            0x00007f52ed22ad52: mov     0x60(%r15),%r10
            0x00007f52ed22ad56: shl     $0x2,%rcx
            0x00007f52ed22ad5a: add     $0x17,%rcx
  0.53%     0x00007f52ed22ad5e: mov     %rcx,%r11
            0x00007f52ed22ad61: and     $0xfffffffffffffff8,%r11
            0x00007f52ed22ad65: mov     %r10,%r8
            0x00007f52ed22ad68: add     %r11,%r8
  1.28%     0x00007f52ed22ad6b: cmp     0x70(%r15),%r8
            0x00007f52ed22ad6f: jnb     0x7f52ed22b386
            0x00007f52ed22ad75: mov     %r8,0x60(%r15)
            0x00007f52ed22ad79: prefetchnta 0x100(%r8)
            0x00007f52ed22ad81: movq    $0x1,(%r10)
  0.53%     0x00007f52ed22ad88: prefetchnta 0x140(%r8)
            0x00007f52ed22ad90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f52ed22ad98: mov     %edx,0xc(%r10)
            0x00007f52ed22ad9c: prefetchnta 0x180(%r8)
  0.86%     0x00007f52ed22ada4: mov     %r10,%rdi
            0x00007f52ed22ada7: add     $0x10,%rdi
            0x00007f52ed22adab: shr     $0x3,%rcx
            0x00007f52ed22adaf: add     $0xfffffffffffffffe,%rcx
  0.43%     0x00007f52ed22adb3: xor     %rax,%rax
            0x00007f52ed22adb6: shl     $0x3,%rcx
            0x00007f52ed22adba: rep stosb (%rdi)
  7.70%     0x00007f52ed22adbd: mov     %r10,%r11
  0.21%     0x00007f52ed22adc0: mov     %rbp,%r8
            0x00007f52ed22adc3: mov     %r11d,0x20(%rbp)
  0.64%     0x00007f52ed22adc7: mov     %rbp,%r10
            0x00007f52ed22adca: shr     $0x9,%r10
            0x00007f52ed22adce: movabs  $0x7f53010b4000,%r11
            0x00007f52ed22add8: mov     %r12l,(%r11,%r10)
  0.43%     0x00007f52ed22addc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.69%     0x00007f52ed22ade1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f52ed22ade5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f52ed22b541
            0x00007f52ed22ade9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.53%     0x00007f52ed22adee: mov     0x28(%rsp),%r10
            0x00007f52ed22adf3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f52ed22adf9: vcvttss2si %xmm0,%r10d
  0.75%     0x00007f52ed22adfd: cmp     $0x80000000,%r10d
         ╭  0x00007f52ed22ae04: jne     0x7f52ed22ae16
         │  0x00007f52ed22ae06: sub     $0x8,%rsp
         │  0x00007f52ed22ae0a: vmovss  %xmm0,(%rsp)
         │  0x00007f52ed22ae0f: callq   0x7f52ed0520a0    ;   {runtime_call}
         │  0x00007f52ed22ae14: pop     %r10
         ↘  0x00007f52ed22ae16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f52ed22ae1a: mov     0x58(%rsp),%r11
  0.21%     0x00007f52ed22ae1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f52ed22b551
            0x00007f52ed22ae23: mov     0x90(%rsp),%ebp
....................................................................................................
 28.77%  <total for region 2>

....[Hottest Regions]...............................................................................
 53.90%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (569 bytes) 
 28.77%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (217 bytes) 
  1.60%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.07%   [kernel.kallsyms]  zap_pte_range.isra.0 (27 bytes) 
  0.86%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (22 bytes) 
  0.75%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (28 bytes) 
  0.43%           libjvm.so  StringTable::buckets_unlink_or_oops_do (20 bytes) 
  0.32%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.32%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (45 bytes) 
  0.32%           libjvm.so  SpinPause (0 bytes) 
  0.32%           libjvm.so  fileStream::write (31 bytes) 
  0.21%   [kernel.kallsyms]  free_unref_page_prepare.part.0 (0 bytes) 
  0.21%   [kernel.kallsyms]  fput_many (7 bytes) 
  0.21%   [kernel.kallsyms]  _cond_resched (19 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  0.21%   [kernel.kallsyms]  error_entry (0 bytes) 
  0.21%    libfcml.so.0.0.0  fcml_ifn_dasm_dts_free_operand_decoding (25 bytes) 
  0.21%           libjvm.so  StringTable::buckets_unlink_or_oops_do (18 bytes) 
  0.21%           libjvm.so  ParallelTaskTerminator::offer_termination (0 bytes) 
  9.09%  <...other 84 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.49%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 
  1.60%   [kernel.kallsyms]  native_write_msr 
  1.18%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.75%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.64%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.53%   [kernel.kallsyms]  free_pcppages_bulk 
  0.53%        libc-2.31.so  _int_malloc 
  0.43%        libc-2.31.so  malloc 
  0.32%        libc-2.31.so  _int_free 
  0.32%           libjvm.so  fileStream::write 
  0.32%           libjvm.so  SpinPause 
  0.21%    libfcml.so.0.0.0  fcml_ifn_dasm_dts_free_operand_decoding 
  0.21%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.21%        libc-2.31.so  __strncpy_avx2 
  0.21%   [kernel.kallsyms]  _cond_resched 
  0.21%   [kernel.kallsyms]  fput_many 
  0.21%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 544 
  0.21%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.21%   [kernel.kallsyms]  __mod_memcg_state 
  0.21%   [kernel.kallsyms]  error_entry 
  6.84%  <...other 60 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 84.71%         C2, level 4
  8.02%   [kernel.kallsyms]
  3.53%           libjvm.so
  2.14%        libc-2.31.so
  1.07%    libfcml.so.0.0.0
  0.21%  libpthread-2.31.so
  0.21%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (935). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       644.520          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
