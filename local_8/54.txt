# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1280.689 ns/op
# Warmup Iteration   2: 687.246 ns/op
# Warmup Iteration   3: 637.785 ns/op
# Warmup Iteration   4: 637.632 ns/op
# Warmup Iteration   5: 642.947 ns/op
Iteration   1: 652.314 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  652.314 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140098 total address lines.
Perf output processed (skipped 11.961 seconds):
 Column 1: cycles (932 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (217 bytes) 

            0x00007f8d312226cb: jmpq    0x7f8d3122284d
            0x00007f8d312226d0: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d312226d5: cmp     $0x40000,%edx
            0x00007f8d312226db: jnbe    0x7f8d31222da5
            0x00007f8d312226e1: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.43%     0x00007f8d312226e4: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d312226e7: cmp     $0x40000,%edx
            0x00007f8d312226ed: jnbe    0x7f8d31222d27
            0x00007f8d312226f3: mov     %rbx,%rbp
            0x00007f8d312226f6: mov     %rsi,0x38(%rsp)
  1.07%     0x00007f8d312226fb: mov     %r9,0x30(%rsp)
            0x00007f8d31222700: mov     %r11,0x20(%rsp)
            0x00007f8d31222705: mov     %r14,0x18(%rsp)
            0x00007f8d3122270a: mov     %edi,(%rsp)
  0.43%     0x00007f8d3122270d: mov     %r8d,0x8(%rsp)
            0x00007f8d31222712: mov     0x60(%r15),%r10
            0x00007f8d31222716: shl     $0x2,%rcx
            0x00007f8d3122271a: add     $0x17,%rcx
  0.64%     0x00007f8d3122271e: mov     %rcx,%r11
            0x00007f8d31222721: and     $0xfffffffffffffff8,%r11
            0x00007f8d31222725: mov     %r10,%r8
            0x00007f8d31222728: add     %r11,%r8
  0.43%     0x00007f8d3122272b: cmp     0x70(%r15),%r8
            0x00007f8d3122272f: jnb     0x7f8d31222d46
            0x00007f8d31222735: mov     %r8,0x60(%r15)
            0x00007f8d31222739: prefetchnta 0x100(%r8)
            0x00007f8d31222741: movq    $0x1,(%r10)
  1.18%     0x00007f8d31222748: prefetchnta 0x140(%r8)
            0x00007f8d31222750: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f8d31222758: mov     %edx,0xc(%r10)
            0x00007f8d3122275c: prefetchnta 0x180(%r8)
  0.54%     0x00007f8d31222764: mov     %r10,%rdi
            0x00007f8d31222767: add     $0x10,%rdi
            0x00007f8d3122276b: shr     $0x3,%rcx
            0x00007f8d3122276f: add     $0xfffffffffffffffe,%rcx
  0.64%     0x00007f8d31222773: xor     %rax,%rax
            0x00007f8d31222776: shl     $0x3,%rcx
            0x00007f8d3122277a: rep stosb (%rdi)
  8.48%     0x00007f8d3122277d: mov     %r10,%r11
  0.11%     0x00007f8d31222780: mov     %rbp,%r8
            0x00007f8d31222783: mov     %r11d,0x20(%rbp)
  0.32%     0x00007f8d31222787: mov     %rbp,%r10
            0x00007f8d3122278a: shr     $0x9,%r10
            0x00007f8d3122278e: movabs  $0x7f8d4456e000,%r11
            0x00007f8d31222798: mov     %r12l,(%r11,%r10)
  0.43%     0x00007f8d3122279c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.02%     0x00007f8d312227a1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8d312227a5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f8d31222f01
            0x00007f8d312227a9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.75%     0x00007f8d312227ae: mov     0x28(%rsp),%r10
            0x00007f8d312227b3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f8d312227b9: vcvttss2si %xmm0,%r10d
  1.07%     0x00007f8d312227bd: cmp     $0x80000000,%r10d
         ╭  0x00007f8d312227c4: jne     0x7f8d312227d6
         │  0x00007f8d312227c6: sub     $0x8,%rsp
         │  0x00007f8d312227ca: vmovss  %xmm0,(%rsp)
         │  0x00007f8d312227cf: callq   0x7f8d310520a0    ;   {runtime_call}
         │  0x00007f8d312227d4: pop     %r10
         ↘  0x00007f8d312227d6: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8d312227da: mov     0x58(%rsp),%r11
  0.54%     0x00007f8d312227df: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f8d31222f11
            0x00007f8d312227e3: mov     0x90(%rsp),%ebp
....................................................................................................
 28.54%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (223 bytes) 

                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  1.07%    0x00007f8d3122284d: mov     0x60(%r15),%rbx
           0x00007f8d31222851: mov     %rbx,%r10
  0.11%    0x00007f8d31222854: add     $0x28,%r10
           0x00007f8d31222858: cmp     0x70(%r15),%r10
           0x00007f8d3122285c: jnb     0x7f8d31222a62
           0x00007f8d31222862: mov     %r10,0x60(%r15)
           0x00007f8d31222866: prefetchnta 0x100(%r10)
           0x00007f8d3122286e: mov     0xa8(%r11),%r10
           0x00007f8d31222875: mov     %r10,(%rbx)
  0.54%    0x00007f8d31222878: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.11%    0x00007f8d3122287f: mov     %r12d,0xc(%rbx)
           0x00007f8d31222883: mov     %r12,0x10(%rbx)
           0x00007f8d31222887: mov     %r12,0x18(%rbx)
  0.43%    0x00007f8d3122288b: mov     %r12d,0x20(%rbx)
           0x00007f8d3122288f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007f8d31222892: mov     0x60(%r15),%rax
           0x00007f8d31222896: mov     %rax,%r10
  0.43%    0x00007f8d31222899: add     $0x20,%r10
           0x00007f8d3122289d: cmp     0x70(%r15),%r10
           0x00007f8d312228a1: jnb     0x7f8d31222ae8
           0x00007f8d312228a7: mov     %r10,0x60(%r15)
           0x00007f8d312228ab: prefetchnta 0x100(%r10)
  0.64%    0x00007f8d312228b3: mov     0xa8(%r14),%r10
           0x00007f8d312228ba: mov     %r10,(%rax)
           0x00007f8d312228bd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.11%    0x00007f8d312228c4: mov     %r12d,0xc(%rax)
  0.54%    0x00007f8d312228c8: mov     %r12,0x10(%rax)
           0x00007f8d312228cc: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312228d0: mov     %rbx,%rcx
           0x00007f8d312228d3: mov     %rax,%r10
  0.54%    0x00007f8d312228d6: mov     %r10d,0xc(%rbx)
           0x00007f8d312228da: shr     $0x9,%rcx
           0x00007f8d312228de: movabs  $0x7f8d4456e000,%r10
           0x00007f8d312228e8: mov     %r12l,(%r10,%rcx)
  0.54%    0x00007f8d312228ec: mov     %r12d,0x14(%rbx)
           0x00007f8d312228f0: lock addl $0x0,(%rsp)     ;*putfield count
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.20%    0x00007f8d312228f5: mov     0x60(%r15),%rdx
           0x00007f8d312228f9: mov     %rdx,%r10
           0x00007f8d312228fc: add     $0x18,%r10
  0.32%    0x00007f8d31222900: cmp     0x70(%r15),%r10
           0x00007f8d31222904: jnb     0x7f8d31222b76
           0x00007f8d3122290a: mov     %r10,0x60(%r15)
           0x00007f8d3122290e: prefetchnta 0x100(%r10)
           0x00007f8d31222916: mov     0xa8(%rsi),%r10
  0.54%    0x00007f8d3122291d: mov     %r10,(%rdx)
           0x00007f8d31222920: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007f8d31222927: mov     %r12d,0xc(%rdx)
           0x00007f8d3122292b: mov     %r12d,0x14(%rdx)
  0.54%    0x00007f8d3122292f: mov     %r13,0x58(%rsp)
           0x00007f8d31222934: mov     %ebp,0x90(%rsp)
           0x00007f8d3122293b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d3122293e: mov     0x60(%r15),%rbp
  0.21%    0x00007f8d31222942: mov     %rbp,%r10
           0x00007f8d31222945: add     $0x20,%r10
           0x00007f8d31222949: cmp     0x70(%r15),%r10
           0x00007f8d3122294d: jnb     0x7f8d31222c07
           0x00007f8d31222953: mov     %r10,0x60(%r15)
  0.86%    0x00007f8d31222957: prefetchnta 0x100(%r10)
           0x00007f8d3122295f: mov     0xa8(%r9),%r10
           0x00007f8d31222966: mov     %r10,0x0(%rbp)
           0x00007f8d3122296a: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007f8d31222971: mov     %r12d,0xc(%rbp)
           0x00007f8d31222975: mov     %r12,0x10(%rbp)
           0x00007f8d31222979: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d3122297d: mov     0x60(%r15),%rax
....................................................................................................
 22.53%  <total for region 2>

....[Hottest Region 3]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (151 bytes) 

           0x00007f8d3122295f: mov     0xa8(%r9),%r10
           0x00007f8d31222966: mov     %r10,0x0(%rbp)
           0x00007f8d3122296a: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007f8d31222971: mov     %r12d,0xc(%rbp)
           0x00007f8d31222975: mov     %r12,0x10(%rbp)
           0x00007f8d31222979: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d3122297d: mov     0x60(%r15),%rax
  1.18%    0x00007f8d31222981: mov     %rax,%r10
           0x00007f8d31222984: add     $0x10,%r10
           0x00007f8d31222988: cmp     0x70(%r15),%r10
           0x00007f8d3122298c: jnb     0x7f8d31222c9d
           0x00007f8d31222992: mov     %r10,0x60(%r15)
  0.43%    0x00007f8d31222996: prefetchnta 0x100(%r10)
           0x00007f8d3122299e: mov     0x10(%rsp),%r10
           0x00007f8d312229a3: mov     0xa8(%r10),%r10
           0x00007f8d312229aa: mov     %r10,(%rax)
  0.75%    0x00007f8d312229ad: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.11%    0x00007f8d312229b4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312229b8: mov     %rbp,%r10         ;*putfield queue
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312229bb: mov     %rax,%rcx
  0.75%    0x00007f8d312229be: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312229c1: mov     %rbp,%rax
           0x00007f8d312229c4: mov     %rdx,%rcx         ;*putfield referenceManager
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312229c7: shr     $0x9,%rax
  0.11%    0x00007f8d312229cb: movabs  $0x7f8d4456e000,%r13
           0x00007f8d312229d5: mov     %r12l,0x0(%r13,%rax)
           0x00007f8d312229da: mov     %r12d,0x18(%rbp)
           0x00007f8d312229de: lock addl $0x0,(%rsp)     ;*putfield head
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.06%    0x00007f8d312229e3: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312229e7: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d312229eb: mov     %rdx,%r10
  0.64%    0x00007f8d312229ee: shr     $0x9,%r10
           0x00007f8d312229f2: movabs  $0x7f8d4456e000,%rdx
           0x00007f8d312229fc: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d31222a00: mov     %ecx,0x1c(%rbx)
  0.97%    0x00007f8d31222a03: mov     %rbx,%r10
           0x00007f8d31222a06: shr     $0x9,%r10
           0x00007f8d31222a0a: movabs  $0x7f8d4456e000,%rcx
           0x00007f8d31222a14: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.54%    0x00007f8d31222a18: cmp     $0x1,%r8d
           0x00007f8d31222a1c: jle     0x7f8d312226d0    ;*goto
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f8d31222a22: mov     $0x1,%r10d
           0x00007f8d31222a28: xor     %ecx,%ecx         ;*iload_3
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 22.53%  <total for region 3>

....[Hottest Regions]...............................................................................
 28.54%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (217 bytes) 
 22.53%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (223 bytes) 
 22.53%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (151 bytes) 
  7.08%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (117 bytes) 
  1.93%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.18%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (45 bytes) 
  0.64%   [kernel.kallsyms]  __mod_memcg_lruvec_state (84 bytes) 
  0.43%   [kernel.kallsyms]  free_pcppages_bulk (7 bytes) 
  0.43%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (31 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (0 bytes) 
  0.43%           libjvm.so  StringTable::buckets_unlink_or_oops_do (20 bytes) 
  0.43%        libc-2.31.so  malloc (0 bytes) 
  0.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 531 (44 bytes) 
  0.32%           libjvm.so  fileStream::write (23 bytes) 
  0.32%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  0.32%        libc-2.31.so  _int_free (48 bytes) 
  0.32%        libc-2.31.so  malloc (0 bytes) 
  0.21%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.21%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
 10.84%  <...other 94 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 82.94%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 
  1.93%   [kernel.kallsyms]  native_write_msr 
  0.97%        libc-2.31.so  malloc 
  0.86%        libc-2.31.so  _int_malloc 
  0.75%   [kernel.kallsyms]  free_pcppages_bulk 
  0.75%        libc-2.31.so  _int_free 
  0.75%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.54%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.54%   [kernel.kallsyms]  release_pages 
  0.43%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.43%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 554 
  0.32%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.32%           libjvm.so  fileStream::write 
  0.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 531 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  0.21%   [kernel.kallsyms]  psi_group_change 
  0.21%        libc-2.31.so  _IO_fwrite 
  0.21%    libfcml.so.0.0.0  fcml_fn_coll_list_free 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  6.76%  <...other 59 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 83.80%         C2, level 4
  8.26%   [kernel.kallsyms]
  3.54%        libc-2.31.so
  2.36%           libjvm.so
  1.50%    libfcml.so.0.0.0
  0.11%   libhsdis.so.0.0.0
  0.11%  libpthread-2.31.so
  0.11%         interpreter
  0.11%    Unknown, level 0
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (932). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       652.314          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
