# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1224.386 ns/op
# Warmup Iteration   2: 729.446 ns/op
# Warmup Iteration   3: 685.715 ns/op
# Warmup Iteration   4: 682.320 ns/op
# Warmup Iteration   5: 686.594 ns/op
Iteration   1: 693.254 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  693.254 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 142192 total address lines.
Perf output processed (skipped 12.035 seconds):
 Column 1: cycles (928 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (566 bytes) 

            0x00007f1edd22b5fa: vcvttss2si %xmm0,%r11d
  0.65%     0x00007f1edd22b5fe: cmp     $0x80000000,%r11d
         ╭  0x00007f1edd22b605: jne     0x7f1edd22b617
         │  0x00007f1edd22b607: sub     $0x8,%rsp
         │  0x00007f1edd22b60b: vmovss  %xmm0,(%rsp)
         │  0x00007f1edd22b610: callq   0x7f1edd0520a0    ;   {runtime_call}
         │  0x00007f1edd22b615: pop     %r11
         ↘  0x00007f1edd22b617: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1edd22b61b: mov     (%rsp),%r11
  6.25%     0x00007f1edd22b61f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1edd22bd3d
  1.72%     0x00007f1edd22b623: mov     0x88(%rsp),%ebp
            0x00007f1edd22b62a: cmp     %r10d,%ebp
            0x00007f1edd22b62d: jnb     0x7f1edd22bc11
  1.08%     0x00007f1edd22b633: lea     0x10(%r11,%rbp,4),%rcx  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
            0x00007f1edd22b638: mov     0x1c(%r9),%r11d   ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f1edd22b63c: mov     %rcx,%r10
            0x00007f1edd22b63f: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.11%     0x00007f1edd22b641: shr     $0x9,%r10
            0x00007f1edd22b645: movabs  $0x7f1ef1c2a000,%rbx
            0x00007f1edd22b64f: mov     %r12l,(%rbx,%r10)
  1.40%     0x00007f1edd22b653: mov     %r8,%r10
            0x00007f1edd22b656: mov     %r10d,(%rcx)      ; OopMap{r11=NarrowOop r9=Oop [12]=NarrowOop off=857}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
            0x00007f1edd22b659: test    %eax,0x16e139a1(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f1edd22b65f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f1edd22bd55
  0.75%     0x00007f1edd22b663: cmp     %r8d,%ebp
            0x00007f1edd22b666: jnl     0x7f1edd22b892    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f1edd22b66c: mov     %r11,%rbx         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f1edd22b66f: mov     0x8(%rsp),%r11d
            0x00007f1edd22b674: mov     0xc(%rsp),%r14d
  0.43%     0x00007f1edd22b679: mov     0x28(%rsp),%r8
            0x00007f1edd22b67e: mov     0x30(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
            0x00007f1edd22b683: mov     0x60(%r15),%rdi
            0x00007f1edd22b687: mov     %rdi,%r10
  0.32%     0x00007f1edd22b68a: add     $0x28,%r10
            0x00007f1edd22b68e: cmp     0x70(%r15),%r10
            0x00007f1edd22b692: jnb     0x7f1edd22b8a1
            0x00007f1edd22b698: mov     %r10,0x60(%r15)
            0x00007f1edd22b69c: prefetchnta 0x100(%r10)
  0.43%     0x00007f1edd22b6a4: mov     0x20(%rsp),%r10
            0x00007f1edd22b6a9: mov     0xa8(%r10),%r10
            0x00007f1edd22b6b0: mov     %r10,(%rdi)
            0x00007f1edd22b6b3: movl    $0x2001959f,0x8(%rdi)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.54%     0x00007f1edd22b6ba: mov     %r12d,0xc(%rdi)
            0x00007f1edd22b6be: mov     %r12,0x10(%rdi)
            0x00007f1edd22b6c2: mov     %r12,0x18(%rdi)
            0x00007f1edd22b6c6: mov     %r12d,0x20(%rdi)
  0.32%     0x00007f1edd22b6ca: mov     %r14d,0x24(%rdi)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f1edd22b6ce: mov     0x60(%r15),%rax
            0x00007f1edd22b6d2: mov     %rax,%r10
            0x00007f1edd22b6d5: add     $0x20,%r10
  0.43%     0x00007f1edd22b6d9: cmp     0x70(%r15),%r10
            0x00007f1edd22b6dd: jnb     0x7f1edd22b92f
            0x00007f1edd22b6e3: mov     %r10,0x60(%r15)
            0x00007f1edd22b6e7: prefetchnta 0x100(%r10)
            0x00007f1edd22b6ef: mov     0x18(%rsp),%r10
  0.54%     0x00007f1edd22b6f4: mov     0xa8(%r10),%r10
            0x00007f1edd22b6fb: mov     %r10,(%rax)
            0x00007f1edd22b6fe: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f1edd22b705: mov     %r12d,0xc(%rax)
  0.22%     0x00007f1edd22b709: mov     %r12,0x10(%rax)
            0x00007f1edd22b70d: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b711: mov     %rdi,%rcx
            0x00007f1edd22b714: mov     %rax,%r10
  0.65%     0x00007f1edd22b717: mov     %r10d,0xc(%rdi)
            0x00007f1edd22b71b: shr     $0x9,%rcx
            0x00007f1edd22b71f: movabs  $0x7f1ef1c2a000,%r10
            0x00007f1edd22b729: mov     %r12l,(%r10,%rcx)
  0.54%     0x00007f1edd22b72d: mov     %r12d,0x14(%rdi)
            0x00007f1edd22b731: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.90%     0x00007f1edd22b736: mov     0x60(%r15),%rdx
            0x00007f1edd22b73a: mov     %rdx,%r10
            0x00007f1edd22b73d: add     $0x18,%r10
  0.11%     0x00007f1edd22b741: cmp     0x70(%r15),%r10
            0x00007f1edd22b745: jnb     0x7f1edd22b9c5
            0x00007f1edd22b74b: mov     %r10,0x60(%r15)
            0x00007f1edd22b74f: prefetchnta 0x100(%r10)
  0.11%     0x00007f1edd22b757: mov     0xa8(%rsi),%r10
  0.65%     0x00007f1edd22b75e: mov     %r10,(%rdx)
            0x00007f1edd22b761: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f1edd22b768: mov     %r12d,0xc(%rdx)
            0x00007f1edd22b76c: mov     %r12d,0x14(%rdx)
  0.54%     0x00007f1edd22b770: mov     %ebp,0x88(%rsp)
            0x00007f1edd22b777: mov     %r14d,0x10(%rdx)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b77b: mov     0x60(%r15),%rbp
            0x00007f1edd22b77f: mov     %rbp,%r10
  0.11%     0x00007f1edd22b782: add     $0x20,%r10
            0x00007f1edd22b786: cmp     0x70(%r15),%r10
            0x00007f1edd22b78a: jnb     0x7f1edd22ba5c
            0x00007f1edd22b790: mov     %r10,0x60(%r15)
            0x00007f1edd22b794: prefetchnta 0x100(%r10)
  0.43%     0x00007f1edd22b79c: mov     0xa8(%r8),%r10
            0x00007f1edd22b7a3: mov     %r10,0x0(%rbp)
            0x00007f1edd22b7a7: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f1edd22b7ae: mov     %r12d,0xc(%rbp)
  0.22%     0x00007f1edd22b7b2: mov     %r12,0x10(%rbp)
            0x00007f1edd22b7b6: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b7ba: mov     0x60(%r15),%rax
            0x00007f1edd22b7be: mov     %rax,%r10
  0.43%     0x00007f1edd22b7c1: add     $0x10,%r10
            0x00007f1edd22b7c5: cmp     0x70(%r15),%r10
            0x00007f1edd22b7c9: jnb     0x7f1edd22bad5
            0x00007f1edd22b7cf: mov     %r10,0x60(%r15)
            0x00007f1edd22b7d3: prefetchnta 0x100(%r10)
  0.22%     0x00007f1edd22b7db: mov     0x10(%rsp),%r10
            0x00007f1edd22b7e0: mov     0xa8(%r10),%r10
            0x00007f1edd22b7e7: mov     %r10,(%rax)
            0x00007f1edd22b7ea: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.43%     0x00007f1edd22b7f1: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b7f5: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b7f8: mov     %rax,%rcx
            0x00007f1edd22b7fb: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.65%     0x00007f1edd22b7fe: mov     %rbp,%rax
            0x00007f1edd22b801: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b804: shr     $0x9,%rax
            0x00007f1edd22b808: movabs  $0x7f1ef1c2a000,%r13
  0.75%     0x00007f1edd22b812: mov     %r12l,0x0(%r13,%rax)
            0x00007f1edd22b817: mov     %r12d,0x18(%rbp)
            0x00007f1edd22b81b: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.70%     0x00007f1edd22b820: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f1edd22b824: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b828: mov     %rdx,%r10
  0.75%     0x00007f1edd22b82b: shr     $0x9,%r10
            0x00007f1edd22b82f: movabs  $0x7f1ef1c2a000,%rdx
            0x00007f1edd22b839: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b83d: mov     %ecx,0x1c(%rdi)
  0.43%     0x00007f1edd22b840: mov     %rdi,%r10
            0x00007f1edd22b843: shr     $0x9,%r10
            0x00007f1edd22b847: movabs  $0x7f1ef1c2a000,%rcx
            0x00007f1edd22b851: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.65%     0x00007f1edd22b855: cmp     $0x1,%r11d
            0x00007f1edd22b859: jnle    0x7f1edd22b865    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b85b: mov     $0x1,%edx
            0x00007f1edd22b860: jmpq    0x7f1edd22b519    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 52.91%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (217 bytes) 

            0x00007f1edd22b4fd: movabs  $0x0,%rsi
            0x00007f1edd22b507: lea     (%rsi,%rcx,8),%rsi
            0x00007f1edd22b50b: xor     %ebp,%ebp
            0x00007f1edd22b50d: jmpq    0x7f1edd22b683
            0x00007f1edd22b512: mov     $0x1,%edx
            0x00007f1edd22b517: shl     %cl,%edx          ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b519: cmp     $0x40000,%edx
            0x00007f1edd22b51f: jnbe    0x7f1edd22bc09
  0.75%     0x00007f1edd22b525: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b528: mov     %edx,0x10(%rdi)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1edd22b52b: cmp     $0x40000,%edx
            0x00007f1edd22b531: jnbe    0x7f1edd22bb3f
            0x00007f1edd22b537: mov     %rdi,0x38(%rsp)
  0.86%     0x00007f1edd22b53c: mov     %rsi,0x30(%rsp)
            0x00007f1edd22b541: mov     %r8,0x28(%rsp)
            0x00007f1edd22b546: mov     %r14d,0xc(%rsp)
            0x00007f1edd22b54b: mov     %rbx,(%rsp)
  0.86%     0x00007f1edd22b54f: mov     %r11d,0x8(%rsp)
            0x00007f1edd22b554: mov     %r9,%rbp
            0x00007f1edd22b557: mov     0x60(%r15),%r10
            0x00007f1edd22b55b: shl     $0x2,%rcx
  0.65%     0x00007f1edd22b55f: add     $0x17,%rcx
            0x00007f1edd22b563: mov     %rcx,%r11
            0x00007f1edd22b566: and     $0xfffffffffffffff8,%r11
            0x00007f1edd22b56a: mov     %r10,%r8
  0.32%     0x00007f1edd22b56d: add     %r11,%r8
            0x00007f1edd22b570: cmp     0x70(%r15),%r8
            0x00007f1edd22b574: jnb     0x7f1edd22bb5f
            0x00007f1edd22b57a: mov     %r8,0x60(%r15)
            0x00007f1edd22b57e: prefetchnta 0x100(%r8)
  0.65%     0x00007f1edd22b586: movq    $0x1,(%r10)
            0x00007f1edd22b58d: prefetchnta 0x140(%r8)
  0.11%     0x00007f1edd22b595: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f1edd22b59d: mov     %edx,0xc(%r10)
  0.65%     0x00007f1edd22b5a1: prefetchnta 0x180(%r8)
  0.11%     0x00007f1edd22b5a9: mov     %r10,%rdi
            0x00007f1edd22b5ac: add     $0x10,%rdi
            0x00007f1edd22b5b0: shr     $0x3,%rcx
  0.43%     0x00007f1edd22b5b4: add     $0xfffffffffffffffe,%rcx
            0x00007f1edd22b5b8: xor     %rax,%rax
            0x00007f1edd22b5bb: shl     $0x3,%rcx
            0x00007f1edd22b5bf: rep stosb (%rdi)
  9.05%     0x00007f1edd22b5c2: mov     0x38(%rsp),%r8
  0.11%     0x00007f1edd22b5c7: mov     %r10d,0x20(%r8)
            0x00007f1edd22b5cb: mov     %r8,%r10
  0.54%     0x00007f1edd22b5ce: shr     $0x9,%r10
            0x00007f1edd22b5d2: movabs  $0x7f1ef1c2a000,%r11
            0x00007f1edd22b5dc: mov     %r12l,(%r11,%r10)
            0x00007f1edd22b5e0: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.42%     0x00007f1edd22b5e5: mov     0x20(%r8),%r11d   ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f1edd22b5e9: mov     0xc(%r11),%r10d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f1edd22bd2d
            0x00007f1edd22b5ed: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.32%     0x00007f1edd22b5f2: mov     %rbp,%r9
            0x00007f1edd22b5f5: vmulss  0x14(%rbp),%xmm1,%xmm0
            0x00007f1edd22b5fa: vcvttss2si %xmm0,%r11d
  0.65%     0x00007f1edd22b5fe: cmp     $0x80000000,%r11d
         ╭  0x00007f1edd22b605: jne     0x7f1edd22b617
         │  0x00007f1edd22b607: sub     $0x8,%rsp
         │  0x00007f1edd22b60b: vmovss  %xmm0,(%rsp)
         │  0x00007f1edd22b610: callq   0x7f1edd0520a0    ;   {runtime_call}
         │  0x00007f1edd22b615: pop     %r11
         ↘  0x00007f1edd22b617: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1edd22b61b: mov     (%rsp),%r11
  6.25%     0x00007f1edd22b61f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f1edd22bd3d
  1.72%     0x00007f1edd22b623: mov     0x88(%rsp),%ebp
....................................................................................................
 27.59%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.91%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (566 bytes) 
 27.59%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (217 bytes) 
  1.94%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.40%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (55 bytes) 
  0.86%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (0 bytes) 
  0.65%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.54%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.54%        libc-2.31.so  malloc_consolidate (24 bytes) 
  0.43%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 (62 bytes) 
  0.43%        libc-2.31.so  malloc_consolidate (63 bytes) 
  0.32%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.32%           libjvm.so  SpinPause (7 bytes) 
  0.32%        libc-2.31.so  __ctype_b_loc (0 bytes) 
  0.22%   [kernel.kallsyms]  enqueue_task_fair (0 bytes) 
  0.22%   [kernel.kallsyms]  release_pages (25 bytes) 
  0.22%   [kernel.kallsyms]  syscall_enter_from_user_mode (0 bytes) 
  0.22%   [kernel.kallsyms]  mutex_lock (0 bytes) 
  0.22%   [kernel.kallsyms]  _raw_spin_lock_irqsave (0 bytes) 
  0.22%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
 10.02%  <...other 83 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.08%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 
  1.94%   [kernel.kallsyms]  native_write_msr 
  0.97%        libc-2.31.so  malloc_consolidate 
  0.86%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.54%        libc-2.31.so  malloc 
  0.54%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.43%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 
  0.43%        libc-2.31.so  _int_free 
  0.43%   [kernel.kallsyms]  release_pages 
  0.32%   [kernel.kallsyms]  free_pcppages_bulk 
  0.32%        libc-2.31.so  _int_malloc 
  0.32%        libc-2.31.so  __ctype_b_loc 
  0.32%           libjvm.so  SpinPause 
  0.32%   [kernel.kallsyms]  fsnotify 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.22%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.22%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.22%   [kernel.kallsyms]  mutex_lock 
  0.22%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_memory_alloc_clear 
  7.65%  <...other 64 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 83.51%         C2, level 4
  9.05%   [kernel.kallsyms]
  3.34%        libc-2.31.so
  2.16%           libjvm.so
  1.51%    libfcml.so.0.0.0
  0.11%  libpthread-2.31.so
  0.11%         interpreter
  0.11%      perf-47407.map
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (928). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       693.254          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
