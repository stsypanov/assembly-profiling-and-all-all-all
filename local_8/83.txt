# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1308.141 ns/op
# Warmup Iteration   2: 738.974 ns/op
# Warmup Iteration   3: 680.779 ns/op
# Warmup Iteration   4: 689.793 ns/op
# Warmup Iteration   5: 694.650 ns/op
Iteration   1: 682.234 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  682.234 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 139670 total address lines.
Perf output processed (skipped 11.955 seconds):
 Column 1: cycles (980 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (279 bytes) 

            0x00007fcee92241fa: vcvttss2si %xmm0,%r11d
  0.20%     0x00007fcee92241fe: cmp     $0x80000000,%r11d
         ╭  0x00007fcee9224205: jne     0x7fcee9224217
         │  0x00007fcee9224207: sub     $0x8,%rsp
         │  0x00007fcee922420b: vmovss  %xmm0,(%rsp)
         │  0x00007fcee9224210: callq   0x7fcee90520a0    ;   {runtime_call}
         │  0x00007fcee9224215: pop     %r11
         ↘  0x00007fcee9224217: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fcee922421b: mov     (%rsp),%r11
  5.82%     0x00007fcee922421f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fcee922493d
  1.94%     0x00007fcee9224223: mov     0x88(%rsp),%ebp
            0x00007fcee922422a: cmp     %r10d,%ebp
            0x00007fcee922422d: jnb     0x7fcee9224811
  1.63%     0x00007fcee9224233: lea     0x10(%r11,%rbp,4),%rcx  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
            0x00007fcee9224238: mov     0x1c(%r9),%r11d   ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fcee922423c: mov     %rcx,%r10
            0x00007fcee922423f: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.10%     0x00007fcee9224241: shr     $0x9,%r10
            0x00007fcee9224245: movabs  $0x7fcefce25000,%rbx
            0x00007fcee922424f: mov     %r12l,(%rbx,%r10)
  1.43%     0x00007fcee9224253: mov     %r8,%r10
            0x00007fcee9224256: mov     %r10d,(%rcx)      ; OopMap{r11=NarrowOop r9=Oop [12]=NarrowOop off=857}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
            0x00007fcee9224259: test    %eax,0x16015da1(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fcee922425f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fcee9224955
  0.71%     0x00007fcee9224263: cmp     %r8d,%ebp
            0x00007fcee9224266: jnl     0x7fcee9224492    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fcee922426c: mov     %r11,%rbx         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fcee922426f: mov     0x8(%rsp),%r11d
            0x00007fcee9224274: mov     0xc(%rsp),%r14d
  0.82%     0x00007fcee9224279: mov     0x28(%rsp),%r8
            0x00007fcee922427e: mov     0x30(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.10%     0x00007fcee9224283: mov     0x60(%r15),%rdi
            0x00007fcee9224287: mov     %rdi,%r10
  0.20%     0x00007fcee922428a: add     $0x28,%r10
            0x00007fcee922428e: cmp     0x70(%r15),%r10
            0x00007fcee9224292: jnb     0x7fcee92244a1
            0x00007fcee9224298: mov     %r10,0x60(%r15)
            0x00007fcee922429c: prefetchnta 0x100(%r10)
  0.51%     0x00007fcee92242a4: mov     0x20(%rsp),%r10
            0x00007fcee92242a9: mov     0xa8(%r10),%r10
  0.10%     0x00007fcee92242b0: mov     %r10,(%rdi)
  0.31%     0x00007fcee92242b3: movl    $0x2001959f,0x8(%rdi)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.20%     0x00007fcee92242ba: mov     %r12d,0xc(%rdi)
            0x00007fcee92242be: mov     %r12,0x10(%rdi)
            0x00007fcee92242c2: mov     %r12,0x18(%rdi)
            0x00007fcee92242c6: mov     %r12d,0x20(%rdi)
  0.20%     0x00007fcee92242ca: mov     %r14d,0x24(%rdi)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fcee92242ce: mov     0x60(%r15),%rax
            0x00007fcee92242d2: mov     %rax,%r10
            0x00007fcee92242d5: add     $0x20,%r10
  0.31%     0x00007fcee92242d9: cmp     0x70(%r15),%r10
            0x00007fcee92242dd: jnb     0x7fcee922452f
            0x00007fcee92242e3: mov     %r10,0x60(%r15)
            0x00007fcee92242e7: prefetchnta 0x100(%r10)
  0.10%     0x00007fcee92242ef: mov     0x18(%rsp),%r10
  0.61%     0x00007fcee92242f4: mov     0xa8(%r10),%r10
            0x00007fcee92242fb: mov     %r10,(%rax)
            0x00007fcee92242fe: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fcee9224305: mov     %r12d,0xc(%rax)
  1.02%     0x00007fcee9224309: mov     %r12,0x10(%rax)
            0x00007fcee922430d: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcee9224311: mov     %rdi,%rcx
            0x00007fcee9224314: mov     %rax,%r10
  0.41%     0x00007fcee9224317: mov     %r10d,0xc(%rdi)
            0x00007fcee922431b: shr     $0x9,%rcx
            0x00007fcee922431f: movabs  $0x7fcefce25000,%r10
            0x00007fcee9224329: mov     %r12l,(%r10,%rcx)
  0.51%     0x00007fcee922432d: mov     %r12d,0x14(%rdi)
            0x00007fcee9224331: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.35%     0x00007fcee9224336: mov     0x60(%r15),%rdx
            0x00007fcee922433a: mov     %rdx,%r10
            0x00007fcee922433d: add     $0x18,%r10
            0x00007fcee9224341: cmp     0x70(%r15),%r10
            0x00007fcee9224345: jnb     0x7fcee92245c5
            0x00007fcee922434b: mov     %r10,0x60(%r15)
            0x00007fcee922434f: prefetchnta 0x100(%r10)
  0.10%     0x00007fcee9224357: mov     0xa8(%rsi),%r10
  0.51%     0x00007fcee922435e: mov     %r10,(%rdx)
....................................................................................................
 29.39%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (217 bytes) 

            0x00007fcee92240fd: movabs  $0x0,%rsi
            0x00007fcee9224107: lea     (%rsi,%rcx,8),%rsi
            0x00007fcee922410b: xor     %ebp,%ebp
            0x00007fcee922410d: jmpq    0x7fcee9224283
            0x00007fcee9224112: mov     $0x1,%edx
            0x00007fcee9224117: shl     %cl,%edx          ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcee9224119: cmp     $0x40000,%edx
            0x00007fcee922411f: jnbe    0x7fcee9224809
  0.51%     0x00007fcee9224125: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcee9224128: mov     %edx,0x10(%rdi)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcee922412b: cmp     $0x40000,%edx
            0x00007fcee9224131: jnbe    0x7fcee922473f
            0x00007fcee9224137: mov     %rdi,0x38(%rsp)
  0.41%     0x00007fcee922413c: mov     %rsi,0x30(%rsp)
            0x00007fcee9224141: mov     %r8,0x28(%rsp)
            0x00007fcee9224146: mov     %r14d,0xc(%rsp)
            0x00007fcee922414b: mov     %rbx,(%rsp)
  0.61%     0x00007fcee922414f: mov     %r11d,0x8(%rsp)
            0x00007fcee9224154: mov     %r9,%rbp
            0x00007fcee9224157: mov     0x60(%r15),%r10
            0x00007fcee922415b: shl     $0x2,%rcx
  0.41%     0x00007fcee922415f: add     $0x17,%rcx
            0x00007fcee9224163: mov     %rcx,%r11
            0x00007fcee9224166: and     $0xfffffffffffffff8,%r11
            0x00007fcee922416a: mov     %r10,%r8
  0.61%     0x00007fcee922416d: add     %r11,%r8
            0x00007fcee9224170: cmp     0x70(%r15),%r8
            0x00007fcee9224174: jnb     0x7fcee922475f
            0x00007fcee922417a: mov     %r8,0x60(%r15)
            0x00007fcee922417e: prefetchnta 0x100(%r8)
  0.31%     0x00007fcee9224186: movq    $0x1,(%r10)
            0x00007fcee922418d: prefetchnta 0x140(%r8)
            0x00007fcee9224195: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fcee922419d: mov     %edx,0xc(%r10)
  0.20%     0x00007fcee92241a1: prefetchnta 0x180(%r8)
            0x00007fcee92241a9: mov     %r10,%rdi
            0x00007fcee92241ac: add     $0x10,%rdi
            0x00007fcee92241b0: shr     $0x3,%rcx
  0.61%     0x00007fcee92241b4: add     $0xfffffffffffffffe,%rcx
            0x00007fcee92241b8: xor     %rax,%rax
            0x00007fcee92241bb: shl     $0x3,%rcx
            0x00007fcee92241bf: rep stosb (%rdi)
  8.57%     0x00007fcee92241c2: mov     0x38(%rsp),%r8
  0.10%     0x00007fcee92241c7: mov     %r10d,0x20(%r8)
            0x00007fcee92241cb: mov     %r8,%r10
  0.71%     0x00007fcee92241ce: shr     $0x9,%r10
            0x00007fcee92241d2: movabs  $0x7fcefce25000,%r11
            0x00007fcee92241dc: mov     %r12l,(%r11,%r10)
            0x00007fcee92241e0: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.20%     0x00007fcee92241e5: mov     0x20(%r8),%r11d   ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcee92241e9: mov     0xc(%r11),%r10d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fcee922492d
            0x00007fcee92241ed: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.71%     0x00007fcee92241f2: mov     %rbp,%r9
            0x00007fcee92241f5: vmulss  0x14(%rbp),%xmm1,%xmm0
            0x00007fcee92241fa: vcvttss2si %xmm0,%r11d
  0.20%     0x00007fcee92241fe: cmp     $0x80000000,%r11d
         ╭  0x00007fcee9224205: jne     0x7fcee9224217
         │  0x00007fcee9224207: sub     $0x8,%rsp
         │  0x00007fcee922420b: vmovss  %xmm0,(%rsp)
         │  0x00007fcee9224210: callq   0x7fcee90520a0    ;   {runtime_call}
         │  0x00007fcee9224215: pop     %r11
         ↘  0x00007fcee9224217: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fcee922421b: mov     (%rsp),%r11
  5.82%     0x00007fcee922421f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fcee922493d
  1.94%     0x00007fcee9224223: mov     0x88(%rsp),%ebp
....................................................................................................
 24.18%  <total for region 2>

....[Hottest Region 3]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (254 bytes) 

           0x00007fcee9224331: lock addl $0x0,(%rsp)     ;*putfield count
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.35%    0x00007fcee9224336: mov     0x60(%r15),%rdx
           0x00007fcee922433a: mov     %rdx,%r10
           0x00007fcee922433d: add     $0x18,%r10
           0x00007fcee9224341: cmp     0x70(%r15),%r10
           0x00007fcee9224345: jnb     0x7fcee92245c5
           0x00007fcee922434b: mov     %r10,0x60(%r15)
           0x00007fcee922434f: prefetchnta 0x100(%r10)
  0.10%    0x00007fcee9224357: mov     0xa8(%rsi),%r10
  0.51%    0x00007fcee922435e: mov     %r10,(%rdx)
           0x00007fcee9224361: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007fcee9224368: mov     %r12d,0xc(%rdx)
           0x00007fcee922436c: mov     %r12d,0x14(%rdx)
  0.31%    0x00007fcee9224370: mov     %ebp,0x88(%rsp)
           0x00007fcee9224377: mov     %r14d,0x10(%rdx)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee922437b: mov     0x60(%r15),%rbp
           0x00007fcee922437f: mov     %rbp,%r10
  0.31%    0x00007fcee9224382: add     $0x20,%r10
           0x00007fcee9224386: cmp     0x70(%r15),%r10
           0x00007fcee922438a: jnb     0x7fcee922465c
           0x00007fcee9224390: mov     %r10,0x60(%r15)
           0x00007fcee9224394: prefetchnta 0x100(%r10)
  0.82%    0x00007fcee922439c: mov     0xa8(%r8),%r10
           0x00007fcee92243a3: mov     %r10,0x0(%rbp)
           0x00007fcee92243a7: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007fcee92243ae: mov     %r12d,0xc(%rbp)
  1.02%    0x00007fcee92243b2: mov     %r12,0x10(%rbp)
           0x00007fcee92243b6: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee92243ba: mov     0x60(%r15),%rax
           0x00007fcee92243be: mov     %rax,%r10
  0.20%    0x00007fcee92243c1: add     $0x10,%r10
           0x00007fcee92243c5: cmp     0x70(%r15),%r10
           0x00007fcee92243c9: jnb     0x7fcee92246d5
  0.10%    0x00007fcee92243cf: mov     %r10,0x60(%r15)
           0x00007fcee92243d3: prefetchnta 0x100(%r10)
  0.31%    0x00007fcee92243db: mov     0x10(%rsp),%r10
           0x00007fcee92243e0: mov     0xa8(%r10),%r10
           0x00007fcee92243e7: mov     %r10,(%rax)
           0x00007fcee92243ea: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.51%    0x00007fcee92243f1: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee92243f5: mov     %rbp,%r10         ;*putfield queue
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee92243f8: mov     %rax,%rcx
           0x00007fcee92243fb: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.71%    0x00007fcee92243fe: mov     %rbp,%rax
           0x00007fcee9224401: mov     %rdx,%rcx         ;*putfield referenceManager
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee9224404: shr     $0x9,%rax
           0x00007fcee9224408: movabs  $0x7fcefce25000,%r13
  0.82%    0x00007fcee9224412: mov     %r12l,0x0(%r13,%rax)
           0x00007fcee9224417: mov     %r12d,0x18(%rbp)
           0x00007fcee922441b: lock addl $0x0,(%rsp)     ;*putfield head
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.12%    0x00007fcee9224420: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee9224424: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee9224428: mov     %rdx,%r10
  0.41%    0x00007fcee922442b: shr     $0x9,%r10
           0x00007fcee922442f: movabs  $0x7fcefce25000,%rdx
           0x00007fcee9224439: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee922443d: mov     %ecx,0x1c(%rdi)
  0.61%    0x00007fcee9224440: mov     %rdi,%r10
           0x00007fcee9224443: shr     $0x9,%r10
           0x00007fcee9224447: movabs  $0x7fcefce25000,%rcx
           0x00007fcee9224451: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.82%    0x00007fcee9224455: cmp     $0x1,%r11d
           0x00007fcee9224459: jnle    0x7fcee9224465    ;*if_icmpge
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007fcee922445b: mov     $0x1,%edx
           0x00007fcee9224460: jmpq    0x7fcee9224119    ;*goto
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 23.67%  <total for region 3>

....[Hottest Regions]...............................................................................
 29.39%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (279 bytes) 
 24.18%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (217 bytes) 
 23.67%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (254 bytes) 
  3.98%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.82%        libc-2.31.so  malloc (4 bytes) 
  0.71%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.71%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (18 bytes) 
  0.61%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.61%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (6 bytes) 
  0.61%        libc-2.31.so  malloc_consolidate (30 bytes) 
  0.41%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.41%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.41%        libc-2.31.so  malloc (0 bytes) 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.31%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 537 (5 bytes) 
  0.31%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (4 bytes) 
  0.31%           libjvm.so  fileStream::write (28 bytes) 
  0.31%        libc-2.31.so  unlink_chunk.isra.0 (51 bytes) 
  0.31%        libc-2.31.so  _int_free (0 bytes) 
  0.31%        libc-2.31.so  _int_malloc (13 bytes) 
 11.22%  <...other 105 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 79.29%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 
  3.98%   [kernel.kallsyms]  native_write_msr 
  1.43%        libc-2.31.so  malloc 
  0.92%        libc-2.31.so  _int_free 
  0.82%        libc-2.31.so  _int_malloc 
  0.82%        libc-2.31.so  malloc_consolidate 
  0.71%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.61%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.41%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.41%           libjvm.so  fileStream::write 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%        libc-2.31.so  unlink_chunk.isra.0 
  0.31%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 537 
  0.20%   [kernel.kallsyms]  ksys_write 
  0.20%   [kernel.kallsyms]  psi_group_change 
  0.20%    libfcml.so.0.0.0  fcml_ifn_dasm_dts_prepare_instruction_decoding_callback_default 
  0.20%   [kernel.kallsyms]  release_pages 
  0.20%    libfcml.so.0.0.0  fcml_ifn_dasm_dts_prepare_operand_decoding 
  0.20%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  7.96%  <...other 77 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 79.69%         C2, level 4
 10.41%   [kernel.kallsyms]
  4.80%        libc-2.31.so
  2.76%           libjvm.so
  2.04%    libfcml.so.0.0.0
  0.20%  libpthread-2.31.so
....................................................................................................
 99.90%  <totals>

WARNING: The perf event count is suspiciously low (980). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       682.234          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
