# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1270.208 ns/op
# Warmup Iteration   2: 689.595 ns/op
# Warmup Iteration   3: 644.689 ns/op
# Warmup Iteration   4: 660.038 ns/op
# Warmup Iteration   5: 649.850 ns/op
Iteration   1: 640.820 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  640.820 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 141508 total address lines.
Perf output processed (skipped 11.823 seconds):
 Column 1: cycles (960 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (569 bytes) 

  0.10%     0x00007f5d75225939: vcvttss2si %xmm0,%r10d
  0.73%     0x00007f5d7522593d: cmp     $0x80000000,%r10d
         ╭  0x00007f5d75225944: jne     0x7f5d75225956
         │  0x00007f5d75225946: sub     $0x8,%rsp
         │  0x00007f5d7522594a: vmovss  %xmm0,(%rsp)
         │  0x00007f5d7522594f: callq   0x7f5d750520a0    ;   {runtime_call}
         │  0x00007f5d75225954: pop     %r10
         ↘  0x00007f5d75225956: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f5d7522595a: mov     0x58(%rsp),%r11
  1.25%     0x00007f5d7522595f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f5d75226091
            0x00007f5d75225963: mov     0x90(%rsp),%ebp
            0x00007f5d7522596a: cmp     %r10d,%ebp
            0x00007f5d7522596d: jnb     0x7f5d75225f2d
            0x00007f5d75225973: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.42%     0x00007f5d75225978: mov     0x28(%rsp),%r10
            0x00007f5d7522597d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f5d75225981: mov     %r9,%r10
            0x00007f5d75225984: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.94%     0x00007f5d75225986: shr     $0x9,%r10
  0.10%     0x00007f5d7522598a: movabs  $0x7f5d895ae000,%rcx
            0x00007f5d75225994: mov     %r12l,(%rcx,%r10)
            0x00007f5d75225998: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.10%     0x00007f5d7522599b: test    %eax,0x1679d65f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f5d752259a1: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f5d752260ad
            0x00007f5d752259a5: cmp     %r10d,%ebp
            0x00007f5d752259a8: jnl     0x7f5d75225bd3    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f5d752259ae: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  1.04%     0x00007f5d752259b1: mov     0x8(%rsp),%r8d
            0x00007f5d752259b6: mov     (%rsp),%edi
  3.13%     0x00007f5d752259b9: mov     0x18(%rsp),%r14
            0x00007f5d752259be: mov     0x20(%rsp),%r11
            0x00007f5d752259c3: mov     0x30(%rsp),%r9
            0x00007f5d752259c8: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.42%     0x00007f5d752259cd: mov     0x60(%r15),%rbx
            0x00007f5d752259d1: mov     %rbx,%r10
            0x00007f5d752259d4: add     $0x28,%r10
            0x00007f5d752259d8: cmp     0x70(%r15),%r10
            0x00007f5d752259dc: jnb     0x7f5d75225be2
  0.83%     0x00007f5d752259e2: mov     %r10,0x60(%r15)
            0x00007f5d752259e6: prefetchnta 0x100(%r10)
            0x00007f5d752259ee: mov     0xa8(%r11),%r10
            0x00007f5d752259f5: mov     %r10,(%rbx)
  0.42%     0x00007f5d752259f8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f5d752259ff: mov     %r12d,0xc(%rbx)
  0.10%     0x00007f5d75225a03: mov     %r12,0x10(%rbx)
            0x00007f5d75225a07: mov     %r12,0x18(%rbx)
  0.63%     0x00007f5d75225a0b: mov     %r12d,0x20(%rbx)
            0x00007f5d75225a0f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f5d75225a12: mov     0x60(%r15),%rax
            0x00007f5d75225a16: mov     %rax,%r10
  0.21%     0x00007f5d75225a19: add     $0x20,%r10
            0x00007f5d75225a1d: cmp     0x70(%r15),%r10
            0x00007f5d75225a21: jnb     0x7f5d75225c68
            0x00007f5d75225a27: mov     %r10,0x60(%r15)
            0x00007f5d75225a2b: prefetchnta 0x100(%r10)
  1.25%     0x00007f5d75225a33: mov     0xa8(%r14),%r10
            0x00007f5d75225a3a: mov     %r10,(%rax)
            0x00007f5d75225a3d: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f5d75225a44: mov     %r12d,0xc(%rax)
  0.52%     0x00007f5d75225a48: mov     %r12,0x10(%rax)
            0x00007f5d75225a4c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225a50: mov     %rbx,%rcx
            0x00007f5d75225a53: mov     %rax,%r10
  0.83%     0x00007f5d75225a56: mov     %r10d,0xc(%rbx)
            0x00007f5d75225a5a: shr     $0x9,%rcx
            0x00007f5d75225a5e: movabs  $0x7f5d895ae000,%r10
            0x00007f5d75225a68: mov     %r12l,(%r10,%rcx)
  0.63%     0x00007f5d75225a6c: mov     %r12d,0x14(%rbx)
            0x00007f5d75225a70: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.04%     0x00007f5d75225a75: mov     0x60(%r15),%rdx
            0x00007f5d75225a79: mov     %rdx,%r10
            0x00007f5d75225a7c: add     $0x18,%r10
  0.31%     0x00007f5d75225a80: cmp     0x70(%r15),%r10
            0x00007f5d75225a84: jnb     0x7f5d75225cf6
            0x00007f5d75225a8a: mov     %r10,0x60(%r15)
            0x00007f5d75225a8e: prefetchnta 0x100(%r10)
            0x00007f5d75225a96: mov     0xa8(%rsi),%r10
  0.52%     0x00007f5d75225a9d: mov     %r10,(%rdx)
            0x00007f5d75225aa0: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f5d75225aa7: mov     %r12d,0xc(%rdx)
            0x00007f5d75225aab: mov     %r12d,0x14(%rdx)
  0.63%     0x00007f5d75225aaf: mov     %r13,0x58(%rsp)
            0x00007f5d75225ab4: mov     %ebp,0x90(%rsp)
            0x00007f5d75225abb: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225abe: mov     0x60(%r15),%rbp
  0.42%     0x00007f5d75225ac2: mov     %rbp,%r10
            0x00007f5d75225ac5: add     $0x20,%r10
            0x00007f5d75225ac9: cmp     0x70(%r15),%r10
            0x00007f5d75225acd: jnb     0x7f5d75225d87
            0x00007f5d75225ad3: mov     %r10,0x60(%r15)
  0.31%     0x00007f5d75225ad7: prefetchnta 0x100(%r10)
  0.10%     0x00007f5d75225adf: mov     0xa8(%r9),%r10
            0x00007f5d75225ae6: mov     %r10,0x0(%rbp)
            0x00007f5d75225aea: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.31%     0x00007f5d75225af1: mov     %r12d,0xc(%rbp)
            0x00007f5d75225af5: mov     %r12,0x10(%rbp)
            0x00007f5d75225af9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225afd: mov     0x60(%r15),%rax
  1.15%     0x00007f5d75225b01: mov     %rax,%r10
            0x00007f5d75225b04: add     $0x10,%r10
            0x00007f5d75225b08: cmp     0x70(%r15),%r10
            0x00007f5d75225b0c: jnb     0x7f5d75225e1d
  0.10%     0x00007f5d75225b12: mov     %r10,0x60(%r15)
  0.83%     0x00007f5d75225b16: prefetchnta 0x100(%r10)
            0x00007f5d75225b1e: mov     0x10(%rsp),%r10
            0x00007f5d75225b23: mov     0xa8(%r10),%r10
  0.10%     0x00007f5d75225b2a: mov     %r10,(%rax)
  0.31%     0x00007f5d75225b2d: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.10%     0x00007f5d75225b34: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b38: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b3b: mov     %rax,%rcx
  0.31%     0x00007f5d75225b3e: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b41: mov     %rbp,%rax
            0x00007f5d75225b44: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b47: shr     $0x9,%rax
  0.52%     0x00007f5d75225b4b: movabs  $0x7f5d895ae000,%r13
            0x00007f5d75225b55: mov     %r12l,0x0(%r13,%rax)
            0x00007f5d75225b5a: mov     %r12d,0x18(%rbp)
            0x00007f5d75225b5e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.52%     0x00007f5d75225b63: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b67: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b6b: mov     %rdx,%r10
  0.63%     0x00007f5d75225b6e: shr     $0x9,%r10
            0x00007f5d75225b72: movabs  $0x7f5d895ae000,%rdx
            0x00007f5d75225b7c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225b80: mov     %ecx,0x1c(%rbx)
  0.63%     0x00007f5d75225b83: mov     %rbx,%r10
            0x00007f5d75225b86: shr     $0x9,%r10
            0x00007f5d75225b8a: movabs  $0x7f5d895ae000,%rcx
            0x00007f5d75225b94: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.52%     0x00007f5d75225b98: cmp     $0x1,%r8d
            0x00007f5d75225b9c: jle     0x7f5d75225850    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225ba2: mov     $0x1,%r10d
            0x00007f5d75225ba8: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 52.19%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (217 bytes) 

            0x00007f5d7522584b: jmpq    0x7f5d752259cd
            0x00007f5d75225850: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225855: cmp     $0x40000,%edx
            0x00007f5d7522585b: jnbe    0x7f5d75225f25
            0x00007f5d75225861: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.21%     0x00007f5d75225864: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225867: cmp     $0x40000,%edx
            0x00007f5d7522586d: jnbe    0x7f5d75225ea7
            0x00007f5d75225873: mov     %rbx,%rbp
            0x00007f5d75225876: mov     %rsi,0x38(%rsp)
  0.73%     0x00007f5d7522587b: mov     %r9,0x30(%rsp)
            0x00007f5d75225880: mov     %r11,0x20(%rsp)
            0x00007f5d75225885: mov     %r14,0x18(%rsp)
            0x00007f5d7522588a: mov     %edi,(%rsp)
  0.83%     0x00007f5d7522588d: mov     %r8d,0x8(%rsp)
            0x00007f5d75225892: mov     0x60(%r15),%r10
            0x00007f5d75225896: shl     $0x2,%rcx
            0x00007f5d7522589a: add     $0x17,%rcx
  0.63%     0x00007f5d7522589e: mov     %rcx,%r11
            0x00007f5d752258a1: and     $0xfffffffffffffff8,%r11
            0x00007f5d752258a5: mov     %r10,%r8
            0x00007f5d752258a8: add     %r11,%r8
  0.52%     0x00007f5d752258ab: cmp     0x70(%r15),%r8
            0x00007f5d752258af: jnb     0x7f5d75225ec6
            0x00007f5d752258b5: mov     %r8,0x60(%r15)
            0x00007f5d752258b9: prefetchnta 0x100(%r8)
            0x00007f5d752258c1: movq    $0x1,(%r10)
  0.21%     0x00007f5d752258c8: prefetchnta 0x140(%r8)
            0x00007f5d752258d0: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f5d752258d8: mov     %edx,0xc(%r10)
            0x00007f5d752258dc: prefetchnta 0x180(%r8)
  0.21%     0x00007f5d752258e4: mov     %r10,%rdi
            0x00007f5d752258e7: add     $0x10,%rdi
            0x00007f5d752258eb: shr     $0x3,%rcx
            0x00007f5d752258ef: add     $0xfffffffffffffffe,%rcx
  0.63%     0x00007f5d752258f3: xor     %rax,%rax
            0x00007f5d752258f6: shl     $0x3,%rcx
            0x00007f5d752258fa: rep stosb (%rdi)
  8.02%     0x00007f5d752258fd: mov     %r10,%r11
  0.10%     0x00007f5d75225900: mov     %rbp,%r8
            0x00007f5d75225903: mov     %r11d,0x20(%rbp)
  0.63%     0x00007f5d75225907: mov     %rbp,%r10
            0x00007f5d7522590a: shr     $0x9,%r10
  0.10%     0x00007f5d7522590e: movabs  $0x7f5d895ae000,%r11
            0x00007f5d75225918: mov     %r12l,(%r11,%r10)
  0.42%     0x00007f5d7522591c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.29%     0x00007f5d75225921: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5d75225925: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f5d75226081
  0.10%     0x00007f5d75225929: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.31%     0x00007f5d7522592e: mov     0x28(%rsp),%r10
            0x00007f5d75225933: vmulss  0x14(%r10),%xmm1,%xmm0
  0.10%     0x00007f5d75225939: vcvttss2si %xmm0,%r10d
  0.73%     0x00007f5d7522593d: cmp     $0x80000000,%r10d
         ╭  0x00007f5d75225944: jne     0x7f5d75225956
         │  0x00007f5d75225946: sub     $0x8,%rsp
         │  0x00007f5d7522594a: vmovss  %xmm0,(%rsp)
         │  0x00007f5d7522594f: callq   0x7f5d750520a0    ;   {runtime_call}
         │  0x00007f5d75225954: pop     %r10
         ↘  0x00007f5d75225956: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f5d7522595a: mov     0x58(%rsp),%r11
  1.25%     0x00007f5d7522595f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f5d75226091
            0x00007f5d75225963: mov     0x90(%rsp),%ebp
....................................................................................................
 26.77%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.19%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (569 bytes) 
 26.77%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (217 bytes) 
  2.40%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.73%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.73%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (0 bytes) 
  0.63%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (22 bytes) 
  0.52%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (70 bytes) 
  0.52%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.52%        libc-2.31.so  malloc_consolidate (12 bytes) 
  0.42%        libc-2.31.so  malloc (0 bytes) 
  0.31%   [kernel.kallsyms]  __mod_lruvec_state (17 bytes) 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  0.31%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.31%        libc-2.31.so  unlink_chunk.isra.0 (6 bytes) 
  0.21%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.21%   [kernel.kallsyms]  __mod_zone_page_state (10 bytes) 
  0.21%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.21%   [kernel.kallsyms]  free_unref_page_prepare.part.0 (16 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_state (13 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_lruvec_state (0 bytes) 
 12.08%  <...other 107 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 81.35%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 
  2.40%   [kernel.kallsyms]  native_write_msr 
  1.25%        libc-2.31.so  _int_malloc 
  1.04%        libc-2.31.so  malloc 
  0.73%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.63%        libc-2.31.so  _int_free 
  0.63%        libc-2.31.so  malloc_consolidate 
  0.52%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.52%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.31%   [kernel.kallsyms]  __mod_zone_page_state 
  0.31%        libc-2.31.so  unlink_chunk.isra.0 
  0.31%   [kernel.kallsyms]  __mod_lruvec_state 
  0.31%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.31%   [kernel.kallsyms]  __mod_memcg_state 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.31%   [kernel.kallsyms]  release_pages 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.21%    libfcml.so.0.0.0  fcml_ifn_dasm_instruction_acceptor_modrm 
  0.21%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 542 
  0.21%        libc-2.31.so  __strlen_avx2 
  7.81%  <...other 67 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 81.67%         C2, level 4
  9.38%   [kernel.kallsyms]
  4.79%        libc-2.31.so
  1.98%           libjvm.so
  1.67%    libfcml.so.0.0.0
  0.31%         interpreter
  0.10%  libpthread-2.31.so
  0.10%         C1, level 3
....................................................................................................
100.00%  <totals>

WARNING: The perf event count is suspiciously low (960). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       640.820          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
