# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1310.755 ns/op
# Warmup Iteration   2: 695.004 ns/op
# Warmup Iteration   3: 637.285 ns/op
# Warmup Iteration   4: 639.053 ns/op
# Warmup Iteration   5: 642.963 ns/op
Iteration   1: 643.704 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  643.704 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 138684 total address lines.
Perf output processed (skipped 12.003 seconds):
 Column 1: cycles (929 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (438 bytes) 

  3.98%    0x00007f0b69224f14: mov     0x18(%rsp),%r14
           0x00007f0b69224f19: mov     0x20(%rsp),%r11
           0x00007f0b69224f1e: mov     0x30(%rsp),%r9
           0x00007f0b69224f23: mov     0x38(%rsp),%rsi   ;*aload_0
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
           0x00007f0b69224f28: mov     0x60(%r15),%rbx
           0x00007f0b69224f2c: mov     %rbx,%r10
           0x00007f0b69224f2f: add     $0x28,%r10
           0x00007f0b69224f33: cmp     0x70(%r15),%r10
           0x00007f0b69224f37: jnb     0x7f0b69225141
  0.32%    0x00007f0b69224f3d: mov     %r10,0x60(%r15)
           0x00007f0b69224f41: prefetchnta 0x100(%r10)
           0x00007f0b69224f49: mov     0xa8(%r11),%r10
           0x00007f0b69224f50: mov     %r10,(%rbx)
  0.22%    0x00007f0b69224f53: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.11%    0x00007f0b69224f5a: mov     %r12d,0xc(%rbx)
           0x00007f0b69224f5e: mov     %r12,0x10(%rbx)
           0x00007f0b69224f62: mov     %r12,0x18(%rbx)
  0.43%    0x00007f0b69224f66: mov     %r12d,0x20(%rbx)
           0x00007f0b69224f6a: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
           0x00007f0b69224f6d: mov     0x60(%r15),%rax
           0x00007f0b69224f71: mov     %rax,%r10
  0.43%    0x00007f0b69224f74: add     $0x20,%r10
           0x00007f0b69224f78: cmp     0x70(%r15),%r10
           0x00007f0b69224f7c: jnb     0x7f0b692251c8
           0x00007f0b69224f82: mov     %r10,0x60(%r15)
           0x00007f0b69224f86: prefetchnta 0x100(%r10)
  0.43%    0x00007f0b69224f8e: mov     0xa8(%r14),%r10
  0.11%    0x00007f0b69224f95: mov     %r10,(%rax)
  0.11%    0x00007f0b69224f98: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
           0x00007f0b69224f9f: mov     %r12d,0xc(%rax)
  0.43%    0x00007f0b69224fa3: mov     %r12,0x10(%rax)
           0x00007f0b69224fa7: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b69224fab: mov     %rbx,%rcx
           0x00007f0b69224fae: mov     %rax,%r10
  0.65%    0x00007f0b69224fb1: mov     %r10d,0xc(%rbx)
           0x00007f0b69224fb5: shr     $0x9,%rcx
  0.11%    0x00007f0b69224fb9: movabs  $0x7f0b687ff000,%r10
           0x00007f0b69224fc3: mov     %r12l,(%r10,%rcx)
  0.75%    0x00007f0b69224fc7: mov     %r12d,0x14(%rbx)
           0x00007f0b69224fcb: lock addl $0x0,(%rsp)     ;*putfield count
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.93%    0x00007f0b69224fd0: mov     0x60(%r15),%rdx
           0x00007f0b69224fd4: mov     %rdx,%r10
           0x00007f0b69224fd7: add     $0x18,%r10
  0.65%    0x00007f0b69224fdb: cmp     0x70(%r15),%r10
           0x00007f0b69224fdf: jnb     0x7f0b69225256
           0x00007f0b69224fe5: mov     %r10,0x60(%r15)
           0x00007f0b69224fe9: prefetchnta 0x100(%r10)
           0x00007f0b69224ff1: mov     0xa8(%rsi),%r10
  0.65%    0x00007f0b69224ff8: mov     %r10,(%rdx)
           0x00007f0b69224ffb: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007f0b69225002: mov     %r12d,0xc(%rdx)
           0x00007f0b69225006: mov     %r12d,0x14(%rdx)
  0.54%    0x00007f0b6922500a: mov     %r13,0x58(%rsp)
           0x00007f0b6922500f: mov     %ebp,0x90(%rsp)
           0x00007f0b69225016: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b69225019: mov     0x60(%r15),%rbp
  0.22%    0x00007f0b6922501d: mov     %rbp,%r10
           0x00007f0b69225020: add     $0x20,%r10
           0x00007f0b69225024: cmp     0x70(%r15),%r10
           0x00007f0b69225028: jnb     0x7f0b692252e7
           0x00007f0b6922502e: mov     %r10,0x60(%r15)
  0.43%    0x00007f0b69225032: prefetchnta 0x100(%r10)
           0x00007f0b6922503a: mov     0xa8(%r9),%r10
           0x00007f0b69225041: mov     %r10,0x0(%rbp)
           0x00007f0b69225045: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.54%    0x00007f0b6922504c: mov     %r12d,0xc(%rbp)
           0x00007f0b69225050: mov     %r12,0x10(%rbp)
           0x00007f0b69225054: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b69225058: mov     0x60(%r15),%rax
  1.51%    0x00007f0b6922505c: mov     %rax,%r10
           0x00007f0b6922505f: add     $0x10,%r10
           0x00007f0b69225063: cmp     0x70(%r15),%r10
           0x00007f0b69225067: jnb     0x7f0b6922537d
           0x00007f0b6922506d: mov     %r10,0x60(%r15)
  0.86%    0x00007f0b69225071: prefetchnta 0x100(%r10)
           0x00007f0b69225079: mov     0x10(%rsp),%r10
           0x00007f0b6922507e: mov     0xa8(%r10),%r10
           0x00007f0b69225085: mov     %r10,(%rax)
  0.86%    0x00007f0b69225088: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007f0b6922508f: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b69225093: mov     %rbp,%r10         ;*putfield queue
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b69225096: mov     %rax,%rcx
  1.08%    0x00007f0b69225099: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b6922509c: mov     %rbp,%rax
           0x00007f0b6922509f: mov     %rdx,%rcx         ;*putfield referenceManager
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b692250a2: shr     $0x9,%rax
  0.43%    0x00007f0b692250a6: movabs  $0x7f0b687ff000,%r13
           0x00007f0b692250b0: mov     %r12l,0x0(%r13,%rax)
           0x00007f0b692250b5: mov     %r12d,0x18(%rbp)
           0x00007f0b692250b9: lock addl $0x0,(%rsp)     ;*putfield head
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.01%    0x00007f0b692250be: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b692250c2: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b692250c6: mov     %rdx,%r10
  0.22%    0x00007f0b692250c9: shr     $0x9,%r10
           0x00007f0b692250cd: movabs  $0x7f0b687ff000,%rdx
           0x00007f0b692250d7: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b692250db: mov     %ecx,0x1c(%rbx)
  0.65%    0x00007f0b692250de: mov     %rbx,%r10
           0x00007f0b692250e1: shr     $0x9,%r10
           0x00007f0b692250e5: movabs  $0x7f0b687ff000,%rcx
           0x00007f0b692250ef: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.86%    0x00007f0b692250f3: cmp     $0x1,%r8d
           0x00007f0b692250f7: jnle    0x7f0b69225103    ;*if_icmpge
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
           0x00007f0b692250f9: mov     $0x1,%edx
           0x00007f0b692250fe: jmpq    0x7f0b69224db0    ;*goto
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 46.50%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (217 bytes) 

  0.11%     0x00007f0b69224d94: movabs  $0x0,%rsi
            0x00007f0b69224d9e: lea     (%rsi,%r10,8),%rsi
            0x00007f0b69224da2: xor     %ebp,%ebp
            0x00007f0b69224da4: jmpq    0x7f0b69224f28
            0x00007f0b69224da9: mov     $0x1,%edx
            0x00007f0b69224dae: shl     %cl,%edx          ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f0b69224db0: cmp     $0x40000,%edx
            0x00007f0b69224db6: jnbe    0x7f0b69225485
  0.54%     0x00007f0b69224dbc: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f0b69224dbf: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f0b69224dc2: cmp     $0x40000,%edx
            0x00007f0b69224dc8: jnbe    0x7f0b69225407
            0x00007f0b69224dce: mov     %rbx,%rbp
  0.86%     0x00007f0b69224dd1: mov     %rsi,0x38(%rsp)
            0x00007f0b69224dd6: mov     %r9,0x30(%rsp)
            0x00007f0b69224ddb: mov     %r11,0x20(%rsp)
            0x00007f0b69224de0: mov     %r14,0x18(%rsp)
  1.08%     0x00007f0b69224de5: mov     %edi,(%rsp)
            0x00007f0b69224de8: mov     %r8d,0x8(%rsp)
            0x00007f0b69224ded: mov     0x60(%r15),%r10
            0x00007f0b69224df1: shl     $0x2,%rcx
  0.22%     0x00007f0b69224df5: add     $0x17,%rcx
            0x00007f0b69224df9: mov     %rcx,%r11
            0x00007f0b69224dfc: and     $0xfffffffffffffff8,%r11
            0x00007f0b69224e00: mov     %r10,%r8
  0.43%     0x00007f0b69224e03: add     %r11,%r8
            0x00007f0b69224e06: cmp     0x70(%r15),%r8
            0x00007f0b69224e0a: jnb     0x7f0b69225426
            0x00007f0b69224e10: mov     %r8,0x60(%r15)
            0x00007f0b69224e14: prefetchnta 0x100(%r8)
  0.65%     0x00007f0b69224e1c: movq    $0x1,(%r10)
            0x00007f0b69224e23: prefetchnta 0x140(%r8)
            0x00007f0b69224e2b: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f0b69224e33: mov     %edx,0xc(%r10)
  0.43%     0x00007f0b69224e37: prefetchnta 0x180(%r8)
            0x00007f0b69224e3f: mov     %r10,%rdi
            0x00007f0b69224e42: add     $0x10,%rdi
            0x00007f0b69224e46: shr     $0x3,%rcx
  0.22%     0x00007f0b69224e4a: add     $0xfffffffffffffffe,%rcx
            0x00007f0b69224e4e: xor     %rax,%rax
            0x00007f0b69224e51: shl     $0x3,%rcx
            0x00007f0b69224e55: rep stosb (%rdi)
  8.50%     0x00007f0b69224e58: mov     %rbp,%r8
  0.11%     0x00007f0b69224e5b: mov     %r10d,0x20(%rbp)
            0x00007f0b69224e5f: mov     %rbp,%r10
  0.75%     0x00007f0b69224e62: shr     $0x9,%r10
            0x00007f0b69224e66: movabs  $0x7f0b687ff000,%r11
            0x00007f0b69224e70: mov     %r12l,(%r11,%r10)
            0x00007f0b69224e74: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.16%     0x00007f0b69224e79: mov     0x20(%rbp),%r11d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f0b69224e7d: mov     0xc(%r11),%r10d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f0b692255e1
            0x00007f0b69224e81: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.43%     0x00007f0b69224e86: mov     0x28(%rsp),%r10
            0x00007f0b69224e8b: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f0b69224e91: vcvttss2si %xmm1,%r11d
  0.86%     0x00007f0b69224e95: cmp     $0x80000000,%r11d
         â­  0x00007f0b69224e9c: jne     0x7f0b69224eae
         â  0x00007f0b69224e9e: sub     $0x8,%rsp
         â  0x00007f0b69224ea2: vmovss  %xmm1,(%rsp)
         â  0x00007f0b69224ea7: callq   0x7f0b690520a0    ;   {runtime_call}
         â  0x00007f0b69224eac: pop     %r11
         â  0x00007f0b69224eae: mov     %r11d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f0b69224eb2: mov     0x58(%rsp),%r11
  0.43%     0x00007f0b69224eb7: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f0b692255f1
            0x00007f0b69224ebb: mov     0x90(%rsp),%ebp
....................................................................................................
 27.34%  <total for region 2>

....[Hottest Regions]...............................................................................
 46.50%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (438 bytes) 
 27.34%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (217 bytes) 
  7.21%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (93 bytes) 
  1.61%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.75%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (0 bytes) 
  0.65%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.65%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (58 bytes) 
  0.65%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (0 bytes) 
  0.54%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.43%           libjvm.so  SpinPause (7 bytes) 
  0.43%        libc-2.31.so  _int_free (5 bytes) 
  0.43%        libc-2.31.so  malloc (0 bytes) 
  0.32%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.32%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (0 bytes) 
  0.32%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do (20 bytes) 
  0.22%   [kernel.kallsyms]  clear_page_dirty_for_io (11 bytes) 
  0.22%   [kernel.kallsyms]  __mod_zone_page_state (0 bytes) 
  0.22%   [kernel.kallsyms]  __mod_zone_page_state (27 bytes) 
 10.44%  <...other 93 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.75%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 
  1.61%   [kernel.kallsyms]  native_write_msr 
  0.97%        libc-2.31.so  _int_free 
  0.86%        libc-2.31.so  malloc 
  0.65%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.65%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.54%        libc-2.31.so  _int_malloc 
  0.43%   [kernel.kallsyms]  __mod_zone_page_state 
  0.43%           libjvm.so  SpinPause 
  0.43%        libc-2.31.so  malloc_consolidate 
  0.32%   [kernel.kallsyms]  page_remove_rmap 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.32%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.32%    libfcml.so.0.0.0  fcml_fn_mp_parse_mnemonics 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.32%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 567 
  0.22%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.22%   [kernel.kallsyms]  vfs_write 
  0.22%   [kernel.kallsyms]  __unlock_page_memcg 
  0.22%   [kernel.kallsyms]  _raw_spin_lock 
  6.78%  <...other 62 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 84.07%         C2, level 4
  8.07%   [kernel.kallsyms]
  3.34%        libc-2.31.so
  3.12%           libjvm.so
  1.18%    libfcml.so.0.0.0
  0.11%  libpthread-2.31.so
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (929). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       643.704          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
