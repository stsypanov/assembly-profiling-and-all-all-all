# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1235.269 ns/op
# Warmup Iteration   2: 682.697 ns/op
# Warmup Iteration   3: 636.778 ns/op
# Warmup Iteration   4: 640.763 ns/op
# Warmup Iteration   5: 644.403 ns/op
Iteration   1: 649.744 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  649.744 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 139501 total address lines.
Perf output processed (skipped 11.997 seconds):
 Column 1: cycles (908 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (569 bytes) 

            0x00007f49b5221d39: vcvttss2si %xmm0,%r10d
  0.33%     0x00007f49b5221d3d: cmp     $0x80000000,%r10d
         ╭  0x00007f49b5221d44: jne     0x7f49b5221d56
         │  0x00007f49b5221d46: sub     $0x8,%rsp
         │  0x00007f49b5221d4a: vmovss  %xmm0,(%rsp)
         │  0x00007f49b5221d4f: callq   0x7f49b50520a0    ;   {runtime_call}
         │  0x00007f49b5221d54: pop     %r10
         ↘  0x00007f49b5221d56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f49b5221d5a: mov     0x58(%rsp),%r11
  0.22%     0x00007f49b5221d5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f49b5222491
  0.22%     0x00007f49b5221d63: mov     0x90(%rsp),%ebp
            0x00007f49b5221d6a: cmp     %r10d,%ebp
            0x00007f49b5221d6d: jnb     0x7f49b522232d
            0x00007f49b5221d73: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.33%     0x00007f49b5221d78: mov     0x28(%rsp),%r10
            0x00007f49b5221d7d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f49b5221d81: mov     %r9,%r10
            0x00007f49b5221d84: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.66%     0x00007f49b5221d86: shr     $0x9,%r10
            0x00007f49b5221d8a: movabs  $0x7f49ca8ba000,%rcx
            0x00007f49b5221d94: mov     %r12l,(%rcx,%r10)
            0x00007f49b5221d98: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.55%     0x00007f49b5221d9b: test    %eax,0x17aad25f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f49b5221da1: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f49b52224ad
            0x00007f49b5221da5: cmp     %r10d,%ebp
            0x00007f49b5221da8: jnl     0x7f49b5221fd3    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f49b5221dae: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.66%     0x00007f49b5221db1: mov     0x8(%rsp),%r8d
  0.11%     0x00007f49b5221db6: mov     (%rsp),%edi
  4.07%     0x00007f49b5221db9: mov     0x18(%rsp),%r14
  0.11%     0x00007f49b5221dbe: mov     0x20(%rsp),%r11
            0x00007f49b5221dc3: mov     0x30(%rsp),%r9
            0x00007f49b5221dc8: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.33%     0x00007f49b5221dcd: mov     0x60(%r15),%rbx
            0x00007f49b5221dd1: mov     %rbx,%r10
            0x00007f49b5221dd4: add     $0x28,%r10
            0x00007f49b5221dd8: cmp     0x70(%r15),%r10
            0x00007f49b5221ddc: jnb     0x7f49b5221fe2
  0.77%     0x00007f49b5221de2: mov     %r10,0x60(%r15)
            0x00007f49b5221de6: prefetchnta 0x100(%r10)
            0x00007f49b5221dee: mov     0xa8(%r11),%r10
            0x00007f49b5221df5: mov     %r10,(%rbx)
  0.22%     0x00007f49b5221df8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f49b5221dff: mov     %r12d,0xc(%rbx)
            0x00007f49b5221e03: mov     %r12,0x10(%rbx)
            0x00007f49b5221e07: mov     %r12,0x18(%rbx)
  0.55%     0x00007f49b5221e0b: mov     %r12d,0x20(%rbx)
            0x00007f49b5221e0f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f49b5221e12: mov     0x60(%r15),%rax
            0x00007f49b5221e16: mov     %rax,%r10
  0.11%     0x00007f49b5221e19: add     $0x20,%r10
            0x00007f49b5221e1d: cmp     0x70(%r15),%r10
            0x00007f49b5221e21: jnb     0x7f49b5222068
            0x00007f49b5221e27: mov     %r10,0x60(%r15)
            0x00007f49b5221e2b: prefetchnta 0x100(%r10)
  0.33%     0x00007f49b5221e33: mov     0xa8(%r14),%r10
            0x00007f49b5221e3a: mov     %r10,(%rax)
            0x00007f49b5221e3d: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.11%     0x00007f49b5221e44: mov     %r12d,0xc(%rax)
  0.55%     0x00007f49b5221e48: mov     %r12,0x10(%rax)
  0.11%     0x00007f49b5221e4c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221e50: mov     %rbx,%rcx
            0x00007f49b5221e53: mov     %rax,%r10
  0.11%     0x00007f49b5221e56: mov     %r10d,0xc(%rbx)
            0x00007f49b5221e5a: shr     $0x9,%rcx
  0.11%     0x00007f49b5221e5e: movabs  $0x7f49ca8ba000,%r10
            0x00007f49b5221e68: mov     %r12l,(%r10,%rcx)
  0.44%     0x00007f49b5221e6c: mov     %r12d,0x14(%rbx)
            0x00007f49b5221e70: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.19%     0x00007f49b5221e75: mov     0x60(%r15),%rdx
            0x00007f49b5221e79: mov     %rdx,%r10
            0x00007f49b5221e7c: add     $0x18,%r10
  0.66%     0x00007f49b5221e80: cmp     0x70(%r15),%r10
            0x00007f49b5221e84: jnb     0x7f49b52220f6
            0x00007f49b5221e8a: mov     %r10,0x60(%r15)
            0x00007f49b5221e8e: prefetchnta 0x100(%r10)
            0x00007f49b5221e96: mov     0xa8(%rsi),%r10
  0.77%     0x00007f49b5221e9d: mov     %r10,(%rdx)
            0x00007f49b5221ea0: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f49b5221ea7: mov     %r12d,0xc(%rdx)
            0x00007f49b5221eab: mov     %r12d,0x14(%rdx)
  0.22%     0x00007f49b5221eaf: mov     %r13,0x58(%rsp)
            0x00007f49b5221eb4: mov     %ebp,0x90(%rsp)
            0x00007f49b5221ebb: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221ebe: mov     0x60(%r15),%rbp
  0.66%     0x00007f49b5221ec2: mov     %rbp,%r10
            0x00007f49b5221ec5: add     $0x20,%r10
            0x00007f49b5221ec9: cmp     0x70(%r15),%r10
            0x00007f49b5221ecd: jnb     0x7f49b5222187
            0x00007f49b5221ed3: mov     %r10,0x60(%r15)
  0.66%     0x00007f49b5221ed7: prefetchnta 0x100(%r10)
            0x00007f49b5221edf: mov     0xa8(%r9),%r10
            0x00007f49b5221ee6: mov     %r10,0x0(%rbp)
            0x00007f49b5221eea: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  1.21%     0x00007f49b5221ef1: mov     %r12d,0xc(%rbp)
            0x00007f49b5221ef5: mov     %r12,0x10(%rbp)
            0x00007f49b5221ef9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221efd: mov     0x60(%r15),%rax
  1.43%     0x00007f49b5221f01: mov     %rax,%r10
            0x00007f49b5221f04: add     $0x10,%r10
  0.11%     0x00007f49b5221f08: cmp     0x70(%r15),%r10
            0x00007f49b5221f0c: jnb     0x7f49b522221d
            0x00007f49b5221f12: mov     %r10,0x60(%r15)
  0.44%     0x00007f49b5221f16: prefetchnta 0x100(%r10)
            0x00007f49b5221f1e: mov     0x10(%rsp),%r10
            0x00007f49b5221f23: mov     0xa8(%r10),%r10
            0x00007f49b5221f2a: mov     %r10,(%rax)
  0.55%     0x00007f49b5221f2d: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f49b5221f34: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221f38: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221f3b: mov     %rax,%rcx
  0.44%     0x00007f49b5221f3e: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221f41: mov     %rbp,%rax
            0x00007f49b5221f44: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221f47: shr     $0x9,%rax
  0.55%     0x00007f49b5221f4b: movabs  $0x7f49ca8ba000,%r13
            0x00007f49b5221f55: mov     %r12l,0x0(%r13,%rax)
            0x00007f49b5221f5a: mov     %r12d,0x18(%rbp)
            0x00007f49b5221f5e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.17%     0x00007f49b5221f63: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f49b5221f67: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221f6b: mov     %rdx,%r10
  0.33%     0x00007f49b5221f6e: shr     $0x9,%r10
            0x00007f49b5221f72: movabs  $0x7f49ca8ba000,%rdx
            0x00007f49b5221f7c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221f80: mov     %ecx,0x1c(%rbx)
  0.66%     0x00007f49b5221f83: mov     %rbx,%r10
            0x00007f49b5221f86: shr     $0x9,%r10
            0x00007f49b5221f8a: movabs  $0x7f49ca8ba000,%rcx
            0x00007f49b5221f94: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.44%     0x00007f49b5221f98: cmp     $0x1,%r8d
            0x00007f49b5221f9c: jle     0x7f49b5221c50    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221fa2: mov     $0x1,%r10d
            0x00007f49b5221fa8: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 54.30%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (217 bytes) 

            0x00007f49b5221c4b: jmpq    0x7f49b5221dcd
            0x00007f49b5221c50: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221c55: cmp     $0x40000,%edx
            0x00007f49b5221c5b: jnbe    0x7f49b5222325
            0x00007f49b5221c61: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.22%     0x00007f49b5221c64: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221c67: cmp     $0x40000,%edx
            0x00007f49b5221c6d: jnbe    0x7f49b52222a7
            0x00007f49b5221c73: mov     %rbx,%rbp
            0x00007f49b5221c76: mov     %rsi,0x38(%rsp)
  0.55%     0x00007f49b5221c7b: mov     %r9,0x30(%rsp)
            0x00007f49b5221c80: mov     %r11,0x20(%rsp)
            0x00007f49b5221c85: mov     %r14,0x18(%rsp)
            0x00007f49b5221c8a: mov     %edi,(%rsp)
  0.77%     0x00007f49b5221c8d: mov     %r8d,0x8(%rsp)
            0x00007f49b5221c92: mov     0x60(%r15),%r10
            0x00007f49b5221c96: shl     $0x2,%rcx
            0x00007f49b5221c9a: add     $0x17,%rcx
  0.66%     0x00007f49b5221c9e: mov     %rcx,%r11
            0x00007f49b5221ca1: and     $0xfffffffffffffff8,%r11
            0x00007f49b5221ca5: mov     %r10,%r8
            0x00007f49b5221ca8: add     %r11,%r8
  0.77%     0x00007f49b5221cab: cmp     0x70(%r15),%r8
            0x00007f49b5221caf: jnb     0x7f49b52222c6
            0x00007f49b5221cb5: mov     %r8,0x60(%r15)
            0x00007f49b5221cb9: prefetchnta 0x100(%r8)
            0x00007f49b5221cc1: movq    $0x1,(%r10)
  0.44%     0x00007f49b5221cc8: prefetchnta 0x140(%r8)
            0x00007f49b5221cd0: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f49b5221cd8: mov     %edx,0xc(%r10)
            0x00007f49b5221cdc: prefetchnta 0x180(%r8)
  0.33%     0x00007f49b5221ce4: mov     %r10,%rdi
            0x00007f49b5221ce7: add     $0x10,%rdi
            0x00007f49b5221ceb: shr     $0x3,%rcx
            0x00007f49b5221cef: add     $0xfffffffffffffffe,%rcx
  0.77%     0x00007f49b5221cf3: xor     %rax,%rax
            0x00007f49b5221cf6: shl     $0x3,%rcx
            0x00007f49b5221cfa: rep stosb (%rdi)
  9.03%     0x00007f49b5221cfd: mov     %r10,%r11
            0x00007f49b5221d00: mov     %rbp,%r8
            0x00007f49b5221d03: mov     %r11d,0x20(%rbp)
  0.33%     0x00007f49b5221d07: mov     %rbp,%r10
            0x00007f49b5221d0a: shr     $0x9,%r10
            0x00007f49b5221d0e: movabs  $0x7f49ca8ba000,%r11
            0x00007f49b5221d18: mov     %r12l,(%r11,%r10)
  0.77%     0x00007f49b5221d1c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.78%     0x00007f49b5221d21: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f49b5221d25: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f49b5222481
            0x00007f49b5221d29: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.77%     0x00007f49b5221d2e: mov     0x28(%rsp),%r10
            0x00007f49b5221d33: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f49b5221d39: vcvttss2si %xmm0,%r10d
  0.33%     0x00007f49b5221d3d: cmp     $0x80000000,%r10d
         ╭  0x00007f49b5221d44: jne     0x7f49b5221d56
         │  0x00007f49b5221d46: sub     $0x8,%rsp
         │  0x00007f49b5221d4a: vmovss  %xmm0,(%rsp)
         │  0x00007f49b5221d4f: callq   0x7f49b50520a0    ;   {runtime_call}
         │  0x00007f49b5221d54: pop     %r10
         ↘  0x00007f49b5221d56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f49b5221d5a: mov     0x58(%rsp),%r11
  0.22%     0x00007f49b5221d5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f49b5222491
  0.22%     0x00007f49b5221d63: mov     0x90(%rsp),%ebp
....................................................................................................
 27.53%  <total for region 2>

....[Hottest Regions]...............................................................................
 54.30%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (569 bytes) 
 27.53%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (217 bytes) 
  2.09%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.88%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.66%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.66%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (5 bytes) 
  0.44%   [kernel.kallsyms]  entry_SYSCALL_64 (43 bytes) 
  0.44%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (0 bytes) 
  0.44%           libjvm.so  StringTable::buckets_unlink_or_oops_do (20 bytes) 
  0.44%        libc-2.31.so  malloc (0 bytes) 
  0.33%   [kernel.kallsyms]  __perf_event_task_sched_in (31 bytes) 
  0.33%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.33%        libc-2.31.so  malloc_consolidate (5 bytes) 
  0.22%   [kernel.kallsyms]  psi_group_change (0 bytes) 
  0.22%   [kernel.kallsyms]  page_remove_rmap (2 bytes) 
  0.22%   [kernel.kallsyms]  free_pcppages_bulk (4 bytes) 
  0.22%   [kernel.kallsyms]  pipe_write (0 bytes) 
  0.22%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.22%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.22%           libjvm.so  fileStream::write (8 bytes) 
  9.47%  <...other 82 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 83.15%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 
  2.09%   [kernel.kallsyms]  native_write_msr 
  1.21%        libc-2.31.so  malloc 
  0.88%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.77%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.55%   [kernel.kallsyms]  free_pcppages_bulk 
  0.55%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.44%        libc-2.31.so  _int_free 
  0.44%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.44%        libc-2.31.so  malloc_consolidate 
  0.44%   [kernel.kallsyms]  release_pages 
  0.33%   [kernel.kallsyms]  page_remove_rmap 
  0.33%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.22%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.22%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.22%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 
  0.22%   [kernel.kallsyms]  mutex_unlock 
  0.22%   [kernel.kallsyms]  psi_group_change 
  0.22%           libjvm.so  fileStream::write 
  0.22%   [kernel.kallsyms]  pipe_write 
  6.72%  <...other 61 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 83.48%         C2, level 4
  9.47%   [kernel.kallsyms]
  3.08%           libjvm.so
  2.75%        libc-2.31.so
  0.88%    libfcml.so.0.0.0
  0.22%         interpreter
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (908). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       649.744          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
