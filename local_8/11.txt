# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1244.922 ns/op
# Warmup Iteration   2: 681.511 ns/op
# Warmup Iteration   3: 645.092 ns/op
# Warmup Iteration   4: 649.114 ns/op
# Warmup Iteration   5: 650.026 ns/op
Iteration   1: 653.700 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  653.700 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 141032 total address lines.
Perf output processed (skipped 11.975 seconds):
 Column 1: cycles (923 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (569 bytes) 

            0x00007fe1dd226df9: vcvttss2si %xmm0,%r10d
  0.76%     0x00007fe1dd226dfd: cmp     $0x80000000,%r10d
         ╭  0x00007fe1dd226e04: jne     0x7fe1dd226e16
         │  0x00007fe1dd226e06: sub     $0x8,%rsp
         │  0x00007fe1dd226e0a: vmovss  %xmm0,(%rsp)
         │  0x00007fe1dd226e0f: callq   0x7fe1dd0520a0    ;   {runtime_call}
         │  0x00007fe1dd226e14: pop     %r10
         ↘  0x00007fe1dd226e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fe1dd226e1a: mov     0x58(%rsp),%r11
  0.87%     0x00007fe1dd226e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fe1dd227551
            0x00007fe1dd226e23: mov     0x90(%rsp),%ebp
            0x00007fe1dd226e2a: cmp     %r10d,%ebp
            0x00007fe1dd226e2d: jnb     0x7fe1dd2273ed
            0x00007fe1dd226e33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.43%     0x00007fe1dd226e38: mov     0x28(%rsp),%r10
            0x00007fe1dd226e3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fe1dd226e41: mov     %r9,%r10
            0x00007fe1dd226e44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.54%     0x00007fe1dd226e46: shr     $0x9,%r10
            0x00007fe1dd226e4a: movabs  $0x7fe1f26ba000,%rcx
            0x00007fe1dd226e54: mov     %r12l,(%rcx,%r10)
            0x00007fe1dd226e58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.54%     0x00007fe1dd226e5b: test    %eax,0x178a819f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fe1dd226e61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fe1dd22756d
            0x00007fe1dd226e65: cmp     %r10d,%ebp
            0x00007fe1dd226e68: jnl     0x7fe1dd227093    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fe1dd226e6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.54%     0x00007fe1dd226e71: mov     0x8(%rsp),%r8d
            0x00007fe1dd226e76: mov     (%rsp),%edi
  4.55%     0x00007fe1dd226e79: mov     0x18(%rsp),%r14
            0x00007fe1dd226e7e: mov     0x20(%rsp),%r11
            0x00007fe1dd226e83: mov     0x30(%rsp),%r9
            0x00007fe1dd226e88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.54%     0x00007fe1dd226e8d: mov     0x60(%r15),%rbx
            0x00007fe1dd226e91: mov     %rbx,%r10
            0x00007fe1dd226e94: add     $0x28,%r10
            0x00007fe1dd226e98: cmp     0x70(%r15),%r10
            0x00007fe1dd226e9c: jnb     0x7fe1dd2270a2
  0.22%     0x00007fe1dd226ea2: mov     %r10,0x60(%r15)
            0x00007fe1dd226ea6: prefetchnta 0x100(%r10)
            0x00007fe1dd226eae: mov     0xa8(%r11),%r10
            0x00007fe1dd226eb5: mov     %r10,(%rbx)
  0.33%     0x00007fe1dd226eb8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fe1dd226ebf: mov     %r12d,0xc(%rbx)
            0x00007fe1dd226ec3: mov     %r12,0x10(%rbx)
            0x00007fe1dd226ec7: mov     %r12,0x18(%rbx)
  0.11%     0x00007fe1dd226ecb: mov     %r12d,0x20(%rbx)
            0x00007fe1dd226ecf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fe1dd226ed2: mov     0x60(%r15),%rax
            0x00007fe1dd226ed6: mov     %rax,%r10
  0.22%     0x00007fe1dd226ed9: add     $0x20,%r10
            0x00007fe1dd226edd: cmp     0x70(%r15),%r10
            0x00007fe1dd226ee1: jnb     0x7fe1dd227128
            0x00007fe1dd226ee7: mov     %r10,0x60(%r15)
            0x00007fe1dd226eeb: prefetchnta 0x100(%r10)
  0.43%     0x00007fe1dd226ef3: mov     0xa8(%r14),%r10
            0x00007fe1dd226efa: mov     %r10,(%rax)
            0x00007fe1dd226efd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.11%     0x00007fe1dd226f04: mov     %r12d,0xc(%rax)
  0.65%     0x00007fe1dd226f08: mov     %r12,0x10(%rax)
            0x00007fe1dd226f0c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226f10: mov     %rbx,%rcx
            0x00007fe1dd226f13: mov     %rax,%r10
  0.65%     0x00007fe1dd226f16: mov     %r10d,0xc(%rbx)
            0x00007fe1dd226f1a: shr     $0x9,%rcx
            0x00007fe1dd226f1e: movabs  $0x7fe1f26ba000,%r10
            0x00007fe1dd226f28: mov     %r12l,(%r10,%rcx)
  0.11%     0x00007fe1dd226f2c: mov     %r12d,0x14(%rbx)
            0x00007fe1dd226f30: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.25%     0x00007fe1dd226f35: mov     0x60(%r15),%rdx
            0x00007fe1dd226f39: mov     %rdx,%r10
            0x00007fe1dd226f3c: add     $0x18,%r10
  0.65%     0x00007fe1dd226f40: cmp     0x70(%r15),%r10
            0x00007fe1dd226f44: jnb     0x7fe1dd2271b6
            0x00007fe1dd226f4a: mov     %r10,0x60(%r15)
            0x00007fe1dd226f4e: prefetchnta 0x100(%r10)
            0x00007fe1dd226f56: mov     0xa8(%rsi),%r10
  0.43%     0x00007fe1dd226f5d: mov     %r10,(%rdx)
            0x00007fe1dd226f60: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fe1dd226f67: mov     %r12d,0xc(%rdx)
            0x00007fe1dd226f6b: mov     %r12d,0x14(%rdx)
  0.76%     0x00007fe1dd226f6f: mov     %r13,0x58(%rsp)
  0.11%     0x00007fe1dd226f74: mov     %ebp,0x90(%rsp)
            0x00007fe1dd226f7b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226f7e: mov     0x60(%r15),%rbp
  0.54%     0x00007fe1dd226f82: mov     %rbp,%r10
            0x00007fe1dd226f85: add     $0x20,%r10
            0x00007fe1dd226f89: cmp     0x70(%r15),%r10
            0x00007fe1dd226f8d: jnb     0x7fe1dd227247
            0x00007fe1dd226f93: mov     %r10,0x60(%r15)
  0.33%     0x00007fe1dd226f97: prefetchnta 0x100(%r10)
            0x00007fe1dd226f9f: mov     0xa8(%r9),%r10
            0x00007fe1dd226fa6: mov     %r10,0x0(%rbp)
            0x00007fe1dd226faa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.65%     0x00007fe1dd226fb1: mov     %r12d,0xc(%rbp)
            0x00007fe1dd226fb5: mov     %r12,0x10(%rbp)
            0x00007fe1dd226fb9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226fbd: mov     0x60(%r15),%rax
  0.65%     0x00007fe1dd226fc1: mov     %rax,%r10
            0x00007fe1dd226fc4: add     $0x10,%r10
            0x00007fe1dd226fc8: cmp     0x70(%r15),%r10
            0x00007fe1dd226fcc: jnb     0x7fe1dd2272dd
            0x00007fe1dd226fd2: mov     %r10,0x60(%r15)
  0.22%     0x00007fe1dd226fd6: prefetchnta 0x100(%r10)
            0x00007fe1dd226fde: mov     0x10(%rsp),%r10
            0x00007fe1dd226fe3: mov     0xa8(%r10),%r10
            0x00007fe1dd226fea: mov     %r10,(%rax)
  0.98%     0x00007fe1dd226fed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.11%     0x00007fe1dd226ff4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226ff8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226ffb: mov     %rax,%rcx
  0.65%     0x00007fe1dd226ffe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd227001: mov     %rbp,%rax
            0x00007fe1dd227004: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd227007: shr     $0x9,%rax
  0.65%     0x00007fe1dd22700b: movabs  $0x7fe1f26ba000,%r13
            0x00007fe1dd227015: mov     %r12l,0x0(%r13,%rax)
            0x00007fe1dd22701a: mov     %r12d,0x18(%rbp)
            0x00007fe1dd22701e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 18.85%     0x00007fe1dd227023: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007fe1dd227027: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd22702b: mov     %rdx,%r10
  0.65%     0x00007fe1dd22702e: shr     $0x9,%r10
            0x00007fe1dd227032: movabs  $0x7fe1f26ba000,%rdx
            0x00007fe1dd22703c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd227040: mov     %ecx,0x1c(%rbx)
  0.54%     0x00007fe1dd227043: mov     %rbx,%r10
            0x00007fe1dd227046: shr     $0x9,%r10
            0x00007fe1dd22704a: movabs  $0x7fe1f26ba000,%rcx
            0x00007fe1dd227054: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.65%     0x00007fe1dd227058: cmp     $0x1,%r8d
            0x00007fe1dd22705c: jle     0x7fe1dd226d10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd227062: mov     $0x1,%r10d
            0x00007fe1dd227068: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 54.60%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (267 bytes) 

            0x00007fe1dd226cb5: mov     $0x200034f1,%r11d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fe1dd226cbb: movabs  $0x0,%r10
            0x00007fe1dd226cc5: lea     (%r10,%r11,8),%r10
            0x00007fe1dd226cc9: mov     %r10,0x10(%rsp)
            0x00007fe1dd226cce: mov     $0x2001833d,%r11d  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fe1dd226cd4: movabs  $0x0,%r14
            0x00007fe1dd226cde: lea     (%r14,%r11,8),%r14
            0x00007fe1dd226ce2: mov     $0x2001959f,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fe1dd226ce8: shl     $0x3,%r11
            0x00007fe1dd226cec: mov     $0x20000d06,%r9d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.22%     0x00007fe1dd226cf2: shl     $0x3,%r9
            0x00007fe1dd226cf6: mov     $0x200196b2,%ecx  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fe1dd226cfb: movabs  $0x0,%rsi
            0x00007fe1dd226d05: lea     (%rsi,%rcx,8),%rsi
  0.11%     0x00007fe1dd226d09: xor     %ebp,%ebp
            0x00007fe1dd226d0b: jmpq    0x7fe1dd226e8d
            0x00007fe1dd226d10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226d15: cmp     $0x40000,%edx
            0x00007fe1dd226d1b: jnbe    0x7fe1dd2273e5
            0x00007fe1dd226d21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.54%     0x00007fe1dd226d24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe1dd226d27: cmp     $0x40000,%edx
            0x00007fe1dd226d2d: jnbe    0x7fe1dd227367
            0x00007fe1dd226d33: mov     %rbx,%rbp
            0x00007fe1dd226d36: mov     %rsi,0x38(%rsp)
  0.65%     0x00007fe1dd226d3b: mov     %r9,0x30(%rsp)
            0x00007fe1dd226d40: mov     %r11,0x20(%rsp)
            0x00007fe1dd226d45: mov     %r14,0x18(%rsp)
            0x00007fe1dd226d4a: mov     %edi,(%rsp)
  0.76%     0x00007fe1dd226d4d: mov     %r8d,0x8(%rsp)
            0x00007fe1dd226d52: mov     0x60(%r15),%r10
            0x00007fe1dd226d56: shl     $0x2,%rcx
            0x00007fe1dd226d5a: add     $0x17,%rcx
  0.43%     0x00007fe1dd226d5e: mov     %rcx,%r11
            0x00007fe1dd226d61: and     $0xfffffffffffffff8,%r11
            0x00007fe1dd226d65: mov     %r10,%r8
            0x00007fe1dd226d68: add     %r11,%r8
  0.33%     0x00007fe1dd226d6b: cmp     0x70(%r15),%r8
            0x00007fe1dd226d6f: jnb     0x7fe1dd227386
            0x00007fe1dd226d75: mov     %r8,0x60(%r15)
            0x00007fe1dd226d79: prefetchnta 0x100(%r8)
            0x00007fe1dd226d81: movq    $0x1,(%r10)
  0.98%     0x00007fe1dd226d88: prefetchnta 0x140(%r8)
            0x00007fe1dd226d90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fe1dd226d98: mov     %edx,0xc(%r10)
            0x00007fe1dd226d9c: prefetchnta 0x180(%r8)
  0.87%     0x00007fe1dd226da4: mov     %r10,%rdi
            0x00007fe1dd226da7: add     $0x10,%rdi
            0x00007fe1dd226dab: shr     $0x3,%rcx
            0x00007fe1dd226daf: add     $0xfffffffffffffffe,%rcx
  0.76%     0x00007fe1dd226db3: xor     %rax,%rax
            0x00007fe1dd226db6: shl     $0x3,%rcx
            0x00007fe1dd226dba: rep stosb (%rdi)
  8.99%     0x00007fe1dd226dbd: mov     %r10,%r11
            0x00007fe1dd226dc0: mov     %rbp,%r8
            0x00007fe1dd226dc3: mov     %r11d,0x20(%rbp)
  0.22%     0x00007fe1dd226dc7: mov     %rbp,%r10
            0x00007fe1dd226dca: shr     $0x9,%r10
            0x00007fe1dd226dce: movabs  $0x7fe1f26ba000,%r11
            0x00007fe1dd226dd8: mov     %r12l,(%r11,%r10)
  0.76%     0x00007fe1dd226ddc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.51%     0x00007fe1dd226de1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007fe1dd226de5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fe1dd227541
            0x00007fe1dd226de9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.22%     0x00007fe1dd226dee: mov     0x28(%rsp),%r10
            0x00007fe1dd226df3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fe1dd226df9: vcvttss2si %xmm0,%r10d
  0.76%     0x00007fe1dd226dfd: cmp     $0x80000000,%r10d
         ╭  0x00007fe1dd226e04: jne     0x7fe1dd226e16
         │  0x00007fe1dd226e06: sub     $0x8,%rsp
         │  0x00007fe1dd226e0a: vmovss  %xmm0,(%rsp)
         │  0x00007fe1dd226e0f: callq   0x7fe1dd0520a0    ;   {runtime_call}
         │  0x00007fe1dd226e14: pop     %r10
         ↘  0x00007fe1dd226e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fe1dd226e1a: mov     0x58(%rsp),%r11
  0.87%     0x00007fe1dd226e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fe1dd227551
            0x00007fe1dd226e23: mov     0x90(%rsp),%ebp
....................................................................................................
 27.19%  <total for region 2>

....[Hottest Regions]...............................................................................
 54.60%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (569 bytes) 
 27.19%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (267 bytes) 
  1.52%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.52%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (95 bytes) 
  0.65%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (21 bytes) 
  0.43%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.43%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 536 (44 bytes) 
  0.43%        libc-2.31.so  _int_malloc (0 bytes) 
  0.33%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.33%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.33%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  0.33%           libjvm.so  StringTable::buckets_unlink_or_oops_do (5 bytes) 
  0.33%        libc-2.31.so  _int_free (5 bytes) 
  0.22%   [kernel.kallsyms]  __mod_node_page_state (31 bytes) 
  0.22%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.22%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.22%   [kernel.kallsyms]  free_pcppages_bulk (14 bytes) 
  0.22%   [kernel.kallsyms]  free_unref_page_list (15 bytes) 
  0.22%   [kernel.kallsyms]  __mod_memcg_state (0 bytes) 
  0.22%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 (0 bytes) 
  9.97%  <...other 85 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.40%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 
  1.52%   [kernel.kallsyms]  native_write_msr 
  0.76%        libc-2.31.so  _int_malloc 
  0.65%        libc-2.31.so  malloc 
  0.54%        libc-2.31.so  malloc_consolidate 
  0.43%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.43%        libc-2.31.so  _int_free 
  0.43%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.43%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 536 
  0.43%   [kernel.kallsyms]  release_pages 
  0.33%   [kernel.kallsyms]  page_remove_rmap 
  0.33%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 
  0.33%   [kernel.kallsyms]  free_pcppages_bulk 
  0.33%   [kernel.kallsyms]  mutex_unlock 
  0.33%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.33%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.22%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.22%   [kernel.kallsyms]  __mod_node_page_state 
  0.22%   [kernel.kallsyms]  psi_group_change 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_memory_alloc_clear 
  7.04%  <...other 62 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 85.16%         C2, level 4
  7.91%   [kernel.kallsyms]
  3.03%        libc-2.31.so
  2.49%           libjvm.so
  1.19%    libfcml.so.0.0.0
  0.11%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (923). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       653.700          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
