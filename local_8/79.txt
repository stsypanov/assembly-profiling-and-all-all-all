# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1190.157 ns/op
# Warmup Iteration   2: 668.397 ns/op
# Warmup Iteration   3: 653.276 ns/op
# Warmup Iteration   4: 648.570 ns/op
# Warmup Iteration   5: 654.187 ns/op
Iteration   1: 650.944 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  650.944 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 141349 total address lines.
Perf output processed (skipped 12.110 seconds):
 Column 1: cycles (934 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (569 bytes) 

            0x00007f33c52285f9: vcvttss2si %xmm0,%r10d
  0.64%     0x00007f33c52285fd: cmp     $0x80000000,%r10d
         ╭  0x00007f33c5228604: jne     0x7f33c5228616
         │  0x00007f33c5228606: sub     $0x8,%rsp
         │  0x00007f33c522860a: vmovss  %xmm0,(%rsp)
         │  0x00007f33c522860f: callq   0x7f33c50520a0    ;   {runtime_call}
         │  0x00007f33c5228614: pop     %r10
         ↘  0x00007f33c5228616: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f33c522861a: mov     0x58(%rsp),%r11
  0.64%     0x00007f33c522861f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f33c5228d51
            0x00007f33c5228623: mov     0x90(%rsp),%ebp
            0x00007f33c522862a: cmp     %r10d,%ebp
            0x00007f33c522862d: jnb     0x7f33c5228bed
            0x00007f33c5228633: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.32%     0x00007f33c5228638: mov     0x28(%rsp),%r10
  0.11%     0x00007f33c522863d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f33c5228641: mov     %r9,%r10
            0x00007f33c5228644: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.43%     0x00007f33c5228646: shr     $0x9,%r10
            0x00007f33c522864a: movabs  $0x7f33d95f9000,%rcx
            0x00007f33c5228654: mov     %r12l,(%rcx,%r10)
            0x00007f33c5228658: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.75%     0x00007f33c522865b: test    %eax,0x167e599f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f33c5228661: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f33c5228d6d
            0x00007f33c5228665: cmp     %r10d,%ebp
            0x00007f33c5228668: jnl     0x7f33c5228893    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f33c522866e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.75%     0x00007f33c5228671: mov     0x8(%rsp),%r8d
            0x00007f33c5228676: mov     (%rsp),%edi
  2.68%     0x00007f33c5228679: mov     0x18(%rsp),%r14
            0x00007f33c522867e: mov     0x20(%rsp),%r11
            0x00007f33c5228683: mov     0x30(%rsp),%r9
            0x00007f33c5228688: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.21%     0x00007f33c522868d: mov     0x60(%r15),%rbx
            0x00007f33c5228691: mov     %rbx,%r10
  0.11%     0x00007f33c5228694: add     $0x28,%r10
            0x00007f33c5228698: cmp     0x70(%r15),%r10
            0x00007f33c522869c: jnb     0x7f33c52288a2
  0.43%     0x00007f33c52286a2: mov     %r10,0x60(%r15)
            0x00007f33c52286a6: prefetchnta 0x100(%r10)
            0x00007f33c52286ae: mov     0xa8(%r11),%r10
            0x00007f33c52286b5: mov     %r10,(%rbx)
            0x00007f33c52286b8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.11%     0x00007f33c52286bf: mov     %r12d,0xc(%rbx)
            0x00007f33c52286c3: mov     %r12,0x10(%rbx)
            0x00007f33c52286c7: mov     %r12,0x18(%rbx)
  0.43%     0x00007f33c52286cb: mov     %r12d,0x20(%rbx)
            0x00007f33c52286cf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f33c52286d2: mov     0x60(%r15),%rax
            0x00007f33c52286d6: mov     %rax,%r10
  0.54%     0x00007f33c52286d9: add     $0x20,%r10
            0x00007f33c52286dd: cmp     0x70(%r15),%r10
            0x00007f33c52286e1: jnb     0x7f33c5228928
            0x00007f33c52286e7: mov     %r10,0x60(%r15)
            0x00007f33c52286eb: prefetchnta 0x100(%r10)
  0.54%     0x00007f33c52286f3: mov     0xa8(%r14),%r10
            0x00007f33c52286fa: mov     %r10,(%rax)
            0x00007f33c52286fd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.11%     0x00007f33c5228704: mov     %r12d,0xc(%rax)
  0.54%     0x00007f33c5228708: mov     %r12,0x10(%rax)
  0.11%     0x00007f33c522870c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228710: mov     %rbx,%rcx
            0x00007f33c5228713: mov     %rax,%r10
  0.43%     0x00007f33c5228716: mov     %r10d,0xc(%rbx)
            0x00007f33c522871a: shr     $0x9,%rcx
  0.21%     0x00007f33c522871e: movabs  $0x7f33d95f9000,%r10
            0x00007f33c5228728: mov     %r12l,(%r10,%rcx)
  0.54%     0x00007f33c522872c: mov     %r12d,0x14(%rbx)
            0x00007f33c5228730: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.20%     0x00007f33c5228735: mov     0x60(%r15),%rdx
  0.11%     0x00007f33c5228739: mov     %rdx,%r10
            0x00007f33c522873c: add     $0x18,%r10
  0.64%     0x00007f33c5228740: cmp     0x70(%r15),%r10
            0x00007f33c5228744: jnb     0x7f33c52289b6
            0x00007f33c522874a: mov     %r10,0x60(%r15)
            0x00007f33c522874e: prefetchnta 0x100(%r10)
            0x00007f33c5228756: mov     0xa8(%rsi),%r10
  0.32%     0x00007f33c522875d: mov     %r10,(%rdx)
            0x00007f33c5228760: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f33c5228767: mov     %r12d,0xc(%rdx)
            0x00007f33c522876b: mov     %r12d,0x14(%rdx)
  0.75%     0x00007f33c522876f: mov     %r13,0x58(%rsp)
            0x00007f33c5228774: mov     %ebp,0x90(%rsp)
            0x00007f33c522877b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c522877e: mov     0x60(%r15),%rbp
  1.18%     0x00007f33c5228782: mov     %rbp,%r10
            0x00007f33c5228785: add     $0x20,%r10
            0x00007f33c5228789: cmp     0x70(%r15),%r10
            0x00007f33c522878d: jnb     0x7f33c5228a47
            0x00007f33c5228793: mov     %r10,0x60(%r15)
  0.86%     0x00007f33c5228797: prefetchnta 0x100(%r10)
            0x00007f33c522879f: mov     0xa8(%r9),%r10
            0x00007f33c52287a6: mov     %r10,0x0(%rbp)
            0x00007f33c52287aa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.32%     0x00007f33c52287b1: mov     %r12d,0xc(%rbp)
            0x00007f33c52287b5: mov     %r12,0x10(%rbp)
            0x00007f33c52287b9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c52287bd: mov     0x60(%r15),%rax
  1.07%     0x00007f33c52287c1: mov     %rax,%r10
            0x00007f33c52287c4: add     $0x10,%r10
            0x00007f33c52287c8: cmp     0x70(%r15),%r10
            0x00007f33c52287cc: jnb     0x7f33c5228add
            0x00007f33c52287d2: mov     %r10,0x60(%r15)
  0.86%     0x00007f33c52287d6: prefetchnta 0x100(%r10)
            0x00007f33c52287de: mov     0x10(%rsp),%r10
            0x00007f33c52287e3: mov     0xa8(%r10),%r10
            0x00007f33c52287ea: mov     %r10,(%rax)
  0.21%     0x00007f33c52287ed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f33c52287f4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c52287f8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c52287fb: mov     %rax,%rcx
  0.43%     0x00007f33c52287fe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228801: mov     %rbp,%rax
            0x00007f33c5228804: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228807: shr     $0x9,%rax
  0.32%     0x00007f33c522880b: movabs  $0x7f33d95f9000,%r13
            0x00007f33c5228815: mov     %r12l,0x0(%r13,%rax)
            0x00007f33c522881a: mov     %r12d,0x18(%rbp)
            0x00007f33c522881e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 14.88%     0x00007f33c5228823: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228827: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c522882b: mov     %rdx,%r10
  0.32%     0x00007f33c522882e: shr     $0x9,%r10
            0x00007f33c5228832: movabs  $0x7f33d95f9000,%rdx
            0x00007f33c522883c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228840: mov     %ecx,0x1c(%rbx)
  0.64%     0x00007f33c5228843: mov     %rbx,%r10
            0x00007f33c5228846: shr     $0x9,%r10
            0x00007f33c522884a: movabs  $0x7f33d95f9000,%rcx
            0x00007f33c5228854: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.86%     0x00007f33c5228858: cmp     $0x1,%r8d
            0x00007f33c522885c: jle     0x7f33c5228510    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228862: mov     $0x1,%r10d
            0x00007f33c5228868: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 48.93%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (244 bytes) 

            0x00007f33c52284ce: mov     $0x2001833d,%r11d  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f33c52284d4: movabs  $0x0,%r14
  0.21%     0x00007f33c52284de: lea     (%r14,%r11,8),%r14
            0x00007f33c52284e2: mov     $0x2001959f,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f33c52284e8: shl     $0x3,%r11
            0x00007f33c52284ec: mov     $0x20000d06,%r9d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f33c52284f2: shl     $0x3,%r9
            0x00007f33c52284f6: mov     $0x200196b2,%ecx  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f33c52284fb: movabs  $0x0,%rsi
            0x00007f33c5228505: lea     (%rsi,%rcx,8),%rsi
  0.21%     0x00007f33c5228509: xor     %ebp,%ebp
            0x00007f33c522850b: jmpq    0x7f33c522868d
            0x00007f33c5228510: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228515: cmp     $0x40000,%edx
            0x00007f33c522851b: jnbe    0x7f33c5228be5
            0x00007f33c5228521: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007f33c5228524: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c5228527: cmp     $0x40000,%edx
            0x00007f33c522852d: jnbe    0x7f33c5228b67
            0x00007f33c5228533: mov     %rbx,%rbp
            0x00007f33c5228536: mov     %rsi,0x38(%rsp)
  0.64%     0x00007f33c522853b: mov     %r9,0x30(%rsp)
            0x00007f33c5228540: mov     %r11,0x20(%rsp)
            0x00007f33c5228545: mov     %r14,0x18(%rsp)
            0x00007f33c522854a: mov     %edi,(%rsp)
  0.75%     0x00007f33c522854d: mov     %r8d,0x8(%rsp)
            0x00007f33c5228552: mov     0x60(%r15),%r10
            0x00007f33c5228556: shl     $0x2,%rcx
            0x00007f33c522855a: add     $0x17,%rcx
  0.75%     0x00007f33c522855e: mov     %rcx,%r11
            0x00007f33c5228561: and     $0xfffffffffffffff8,%r11
            0x00007f33c5228565: mov     %r10,%r8
            0x00007f33c5228568: add     %r11,%r8
  0.64%     0x00007f33c522856b: cmp     0x70(%r15),%r8
            0x00007f33c522856f: jnb     0x7f33c5228b86
            0x00007f33c5228575: mov     %r8,0x60(%r15)
            0x00007f33c5228579: prefetchnta 0x100(%r8)
            0x00007f33c5228581: movq    $0x1,(%r10)
  0.43%     0x00007f33c5228588: prefetchnta 0x140(%r8)
            0x00007f33c5228590: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f33c5228598: mov     %edx,0xc(%r10)
            0x00007f33c522859c: prefetchnta 0x180(%r8)
  0.64%     0x00007f33c52285a4: mov     %r10,%rdi
            0x00007f33c52285a7: add     $0x10,%rdi
            0x00007f33c52285ab: shr     $0x3,%rcx
            0x00007f33c52285af: add     $0xfffffffffffffffe,%rcx
  0.11%     0x00007f33c52285b3: xor     %rax,%rax
            0x00007f33c52285b6: shl     $0x3,%rcx
            0x00007f33c52285ba: rep stosb (%rdi)
 11.46%     0x00007f33c52285bd: mov     %r10,%r11
  0.11%     0x00007f33c52285c0: mov     %rbp,%r8
            0x00007f33c52285c3: mov     %r11d,0x20(%rbp)
  0.43%     0x00007f33c52285c7: mov     %rbp,%r10
            0x00007f33c52285ca: shr     $0x9,%r10
            0x00007f33c52285ce: movabs  $0x7f33d95f9000,%r11
            0x00007f33c52285d8: mov     %r12l,(%r11,%r10)
  0.64%     0x00007f33c52285dc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.21%     0x00007f33c52285e1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f33c52285e5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f33c5228d41
            0x00007f33c52285e9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.43%     0x00007f33c52285ee: mov     0x28(%rsp),%r10
  0.11%     0x00007f33c52285f3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f33c52285f9: vcvttss2si %xmm0,%r10d
  0.64%     0x00007f33c52285fd: cmp     $0x80000000,%r10d
         ╭  0x00007f33c5228604: jne     0x7f33c5228616
         │  0x00007f33c5228606: sub     $0x8,%rsp
         │  0x00007f33c522860a: vmovss  %xmm0,(%rsp)
         │  0x00007f33c522860f: callq   0x7f33c50520a0    ;   {runtime_call}
         │  0x00007f33c5228614: pop     %r10
         ↘  0x00007f33c5228616: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f33c522861a: mov     0x58(%rsp),%r11
  0.64%     0x00007f33c522861f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f33c5228d51
            0x00007f33c5228623: mov     0x90(%rsp),%ebp
....................................................................................................
 30.51%  <total for region 2>

....[Hottest Regions]...............................................................................
 48.93%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (569 bytes) 
 30.51%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (244 bytes) 
  2.14%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.96%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (28 bytes) 
  0.75%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (17 bytes) 
  0.64%   [kernel.kallsyms]  zap_pte_range.isra.0 (27 bytes) 
  0.64%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.64%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (30 bytes) 
  0.54%        libc-2.31.so  malloc (0 bytes) 
  0.43%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 (19 bytes) 
  0.32%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (24 bytes) 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do (19 bytes) 
  0.32%        libc-2.31.so  malloc (0 bytes) 
  0.21%   [kernel.kallsyms]  psi_group_change (0 bytes) 
  0.21%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.21%   [kernel.kallsyms]  page_remove_rmap (28 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_state (17 bytes) 
  0.21%   [kernel.kallsyms]  __mod_memcg_lruvec_state (15 bytes) 
 11.13%  <...other 92 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 82.23%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 
  2.14%   [kernel.kallsyms]  native_write_msr 
  0.96%        libc-2.31.so  malloc 
  0.86%   [kernel.kallsyms]  free_pcppages_bulk 
  0.75%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 
  0.64%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.64%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.43%        libc-2.31.so  _int_malloc 
  0.32%        libc-2.31.so  _int_free 
  0.32%   [kernel.kallsyms]  psi_group_change 
  0.32%           libjvm.so  xmlTextStream::flush 
  0.32%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.32%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  0.21%        libc-2.31.so  __GI___libc_write 
  0.21%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 
  0.21%   [kernel.kallsyms]  _raw_spin_lock_irqsave 
  0.21%           libjvm.so  SpinPause 
  8.03%  <...other 68 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 83.30%         C2, level 4
  8.46%   [kernel.kallsyms]
  3.32%           libjvm.so
  3.00%        libc-2.31.so
  1.28%    libfcml.so.0.0.0
  0.11%        runtime stub
  0.11%  libpthread-2.31.so
  0.11%      perf-50538.map
  0.11%         interpreter
  0.11%           nvidia.ko
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (934). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       650.944          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
