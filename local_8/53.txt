# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1226.166 ns/op
# Warmup Iteration   2: 677.270 ns/op
# Warmup Iteration   3: 645.839 ns/op
# Warmup Iteration   4: 644.163 ns/op
# Warmup Iteration   5: 644.775 ns/op
Iteration   1: 647.883 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  647.883 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140710 total address lines.
Perf output processed (skipped 12.041 seconds):
 Column 1: cycles (899 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (569 bytes) 

            0x00007f8f15229979: vcvttss2si %xmm0,%r10d
  0.78%     0x00007f8f1522997d: cmp     $0x80000000,%r10d
         ╭  0x00007f8f15229984: jne     0x7f8f15229996
         │  0x00007f8f15229986: sub     $0x8,%rsp
         │  0x00007f8f1522998a: vmovss  %xmm0,(%rsp)
         │  0x00007f8f1522998f: callq   0x7f8f150520a0    ;   {runtime_call}
         │  0x00007f8f15229994: pop     %r10
         ↘  0x00007f8f15229996: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8f1522999a: mov     0x58(%rsp),%r11
  0.33%     0x00007f8f1522999f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f8f1522a0d1
            0x00007f8f152299a3: mov     0x90(%rsp),%ebp
            0x00007f8f152299aa: cmp     %r10d,%ebp
            0x00007f8f152299ad: jnb     0x7f8f15229f6d
            0x00007f8f152299b3: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.33%     0x00007f8f152299b8: mov     0x28(%rsp),%r10
  0.11%     0x00007f8f152299bd: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f8f152299c1: mov     %r9,%r10
            0x00007f8f152299c4: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.67%     0x00007f8f152299c6: shr     $0x9,%r10
            0x00007f8f152299ca: movabs  $0x7f8f2aab2000,%rcx
            0x00007f8f152299d4: mov     %r12l,(%rcx,%r10)
            0x00007f8f152299d8: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.67%     0x00007f8f152299db: test    %eax,0x17c9d61f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f8f152299e1: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f8f1522a0ed
  0.11%     0x00007f8f152299e5: cmp     %r10d,%ebp
            0x00007f8f152299e8: jnl     0x7f8f15229c13    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f8f152299ee: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.78%     0x00007f8f152299f1: mov     0x8(%rsp),%r8d
            0x00007f8f152299f6: mov     (%rsp),%edi
  3.34%     0x00007f8f152299f9: mov     0x18(%rsp),%r14
            0x00007f8f152299fe: mov     0x20(%rsp),%r11
            0x00007f8f15229a03: mov     0x30(%rsp),%r9
            0x00007f8f15229a08: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.67%     0x00007f8f15229a0d: mov     0x60(%r15),%rbx
            0x00007f8f15229a11: mov     %rbx,%r10
            0x00007f8f15229a14: add     $0x28,%r10
            0x00007f8f15229a18: cmp     0x70(%r15),%r10
            0x00007f8f15229a1c: jnb     0x7f8f15229c22
  0.67%     0x00007f8f15229a22: mov     %r10,0x60(%r15)
            0x00007f8f15229a26: prefetchnta 0x100(%r10)
            0x00007f8f15229a2e: mov     0xa8(%r11),%r10
            0x00007f8f15229a35: mov     %r10,(%rbx)
  0.56%     0x00007f8f15229a38: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f8f15229a3f: mov     %r12d,0xc(%rbx)
  0.22%     0x00007f8f15229a43: mov     %r12,0x10(%rbx)
            0x00007f8f15229a47: mov     %r12,0x18(%rbx)
  0.78%     0x00007f8f15229a4b: mov     %r12d,0x20(%rbx)
            0x00007f8f15229a4f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f8f15229a52: mov     0x60(%r15),%rax
            0x00007f8f15229a56: mov     %rax,%r10
  0.67%     0x00007f8f15229a59: add     $0x20,%r10
            0x00007f8f15229a5d: cmp     0x70(%r15),%r10
            0x00007f8f15229a61: jnb     0x7f8f15229ca8
            0x00007f8f15229a67: mov     %r10,0x60(%r15)
            0x00007f8f15229a6b: prefetchnta 0x100(%r10)
  0.56%     0x00007f8f15229a73: mov     0xa8(%r14),%r10
            0x00007f8f15229a7a: mov     %r10,(%rax)
            0x00007f8f15229a7d: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f8f15229a84: mov     %r12d,0xc(%rax)
  0.67%     0x00007f8f15229a88: mov     %r12,0x10(%rax)
            0x00007f8f15229a8c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229a90: mov     %rbx,%rcx
            0x00007f8f15229a93: mov     %rax,%r10
  0.33%     0x00007f8f15229a96: mov     %r10d,0xc(%rbx)
            0x00007f8f15229a9a: shr     $0x9,%rcx
            0x00007f8f15229a9e: movabs  $0x7f8f2aab2000,%r10
            0x00007f8f15229aa8: mov     %r12l,(%r10,%rcx)
  0.33%     0x00007f8f15229aac: mov     %r12d,0x14(%rbx)
  0.11%     0x00007f8f15229ab0: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 16.46%     0x00007f8f15229ab5: mov     0x60(%r15),%rdx
            0x00007f8f15229ab9: mov     %rdx,%r10
            0x00007f8f15229abc: add     $0x18,%r10
  0.22%     0x00007f8f15229ac0: cmp     0x70(%r15),%r10
            0x00007f8f15229ac4: jnb     0x7f8f15229d36
            0x00007f8f15229aca: mov     %r10,0x60(%r15)
            0x00007f8f15229ace: prefetchnta 0x100(%r10)
            0x00007f8f15229ad6: mov     0xa8(%rsi),%r10
  0.33%     0x00007f8f15229add: mov     %r10,(%rdx)
            0x00007f8f15229ae0: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f8f15229ae7: mov     %r12d,0xc(%rdx)
            0x00007f8f15229aeb: mov     %r12d,0x14(%rdx)
  0.44%     0x00007f8f15229aef: mov     %r13,0x58(%rsp)
            0x00007f8f15229af4: mov     %ebp,0x90(%rsp)
            0x00007f8f15229afb: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229afe: mov     0x60(%r15),%rbp
  0.56%     0x00007f8f15229b02: mov     %rbp,%r10
            0x00007f8f15229b05: add     $0x20,%r10
            0x00007f8f15229b09: cmp     0x70(%r15),%r10
            0x00007f8f15229b0d: jnb     0x7f8f15229dc7
            0x00007f8f15229b13: mov     %r10,0x60(%r15)
  0.44%     0x00007f8f15229b17: prefetchnta 0x100(%r10)
            0x00007f8f15229b1f: mov     0xa8(%r9),%r10
            0x00007f8f15229b26: mov     %r10,0x0(%rbp)
            0x00007f8f15229b2a: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.22%     0x00007f8f15229b31: mov     %r12d,0xc(%rbp)
            0x00007f8f15229b35: mov     %r12,0x10(%rbp)
            0x00007f8f15229b39: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229b3d: mov     0x60(%r15),%rax
  0.89%     0x00007f8f15229b41: mov     %rax,%r10
            0x00007f8f15229b44: add     $0x10,%r10
            0x00007f8f15229b48: cmp     0x70(%r15),%r10
            0x00007f8f15229b4c: jnb     0x7f8f15229e5d
  0.11%     0x00007f8f15229b52: mov     %r10,0x60(%r15)
  0.67%     0x00007f8f15229b56: prefetchnta 0x100(%r10)
            0x00007f8f15229b5e: mov     0x10(%rsp),%r10
            0x00007f8f15229b63: mov     0xa8(%r10),%r10
            0x00007f8f15229b6a: mov     %r10,(%rax)
  0.11%     0x00007f8f15229b6d: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f8f15229b74: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229b78: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229b7b: mov     %rax,%rcx
  0.44%     0x00007f8f15229b7e: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229b81: mov     %rbp,%rax
            0x00007f8f15229b84: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229b87: shr     $0x9,%rax
  0.89%     0x00007f8f15229b8b: movabs  $0x7f8f2aab2000,%r13
            0x00007f8f15229b95: mov     %r12l,0x0(%r13,%rax)
            0x00007f8f15229b9a: mov     %r12d,0x18(%rbp)
            0x00007f8f15229b9e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.80%     0x00007f8f15229ba3: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229ba7: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229bab: mov     %rdx,%r10
  0.56%     0x00007f8f15229bae: shr     $0x9,%r10
            0x00007f8f15229bb2: movabs  $0x7f8f2aab2000,%rdx
            0x00007f8f15229bbc: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229bc0: mov     %ecx,0x1c(%rbx)
  0.44%     0x00007f8f15229bc3: mov     %rbx,%r10
            0x00007f8f15229bc6: shr     $0x9,%r10
            0x00007f8f15229bca: movabs  $0x7f8f2aab2000,%rcx
            0x00007f8f15229bd4: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.44%     0x00007f8f15229bd8: cmp     $0x1,%r8d
            0x00007f8f15229bdc: jle     0x7f8f15229890    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229be2: mov     $0x1,%r10d
            0x00007f8f15229be8: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 52.95%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (217 bytes) 

            0x00007f8f1522988b: jmpq    0x7f8f15229a0d
            0x00007f8f15229890: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229895: cmp     $0x40000,%edx
            0x00007f8f1522989b: jnbe    0x7f8f15229f65
            0x00007f8f152298a1: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.44%     0x00007f8f152298a4: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f152298a7: cmp     $0x40000,%edx
            0x00007f8f152298ad: jnbe    0x7f8f15229ee7
            0x00007f8f152298b3: mov     %rbx,%rbp
            0x00007f8f152298b6: mov     %rsi,0x38(%rsp)
  1.22%     0x00007f8f152298bb: mov     %r9,0x30(%rsp)
            0x00007f8f152298c0: mov     %r11,0x20(%rsp)
            0x00007f8f152298c5: mov     %r14,0x18(%rsp)
            0x00007f8f152298ca: mov     %edi,(%rsp)
  0.67%     0x00007f8f152298cd: mov     %r8d,0x8(%rsp)
            0x00007f8f152298d2: mov     0x60(%r15),%r10
            0x00007f8f152298d6: shl     $0x2,%rcx
            0x00007f8f152298da: add     $0x17,%rcx
  0.44%     0x00007f8f152298de: mov     %rcx,%r11
            0x00007f8f152298e1: and     $0xfffffffffffffff8,%r11
            0x00007f8f152298e5: mov     %r10,%r8
            0x00007f8f152298e8: add     %r11,%r8
  1.00%     0x00007f8f152298eb: cmp     0x70(%r15),%r8
            0x00007f8f152298ef: jnb     0x7f8f15229f06
            0x00007f8f152298f5: mov     %r8,0x60(%r15)
            0x00007f8f152298f9: prefetchnta 0x100(%r8)
            0x00007f8f15229901: movq    $0x1,(%r10)
  0.67%     0x00007f8f15229908: prefetchnta 0x140(%r8)
            0x00007f8f15229910: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f8f15229918: mov     %edx,0xc(%r10)
            0x00007f8f1522991c: prefetchnta 0x180(%r8)
  0.22%     0x00007f8f15229924: mov     %r10,%rdi
            0x00007f8f15229927: add     $0x10,%rdi
            0x00007f8f1522992b: shr     $0x3,%rcx
            0x00007f8f1522992f: add     $0xfffffffffffffffe,%rcx
  0.33%     0x00007f8f15229933: xor     %rax,%rax
            0x00007f8f15229936: shl     $0x3,%rcx
            0x00007f8f1522993a: rep stosb (%rdi)
 10.12%     0x00007f8f1522993d: mov     %r10,%r11
            0x00007f8f15229940: mov     %rbp,%r8
            0x00007f8f15229943: mov     %r11d,0x20(%rbp)
  0.44%     0x00007f8f15229947: mov     %rbp,%r10
            0x00007f8f1522994a: shr     $0x9,%r10
            0x00007f8f1522994e: movabs  $0x7f8f2aab2000,%r11
            0x00007f8f15229958: mov     %r12l,(%r11,%r10)
  0.33%     0x00007f8f1522995c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.57%     0x00007f8f15229961: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8f15229965: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f8f1522a0c1
            0x00007f8f15229969: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.44%     0x00007f8f1522996e: mov     0x28(%rsp),%r10
            0x00007f8f15229973: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f8f15229979: vcvttss2si %xmm0,%r10d
  0.78%     0x00007f8f1522997d: cmp     $0x80000000,%r10d
         ╭  0x00007f8f15229984: jne     0x7f8f15229996
         │  0x00007f8f15229986: sub     $0x8,%rsp
         │  0x00007f8f1522998a: vmovss  %xmm0,(%rsp)
         │  0x00007f8f1522998f: callq   0x7f8f150520a0    ;   {runtime_call}
         │  0x00007f8f15229994: pop     %r10
         ↘  0x00007f8f15229996: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8f1522999a: mov     0x58(%rsp),%r11
  0.33%     0x00007f8f1522999f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f8f1522a0d1
            0x00007f8f152299a3: mov     0x90(%rsp),%ebp
....................................................................................................
 28.70%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.95%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (569 bytes) 
 28.70%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (217 bytes) 
  3.00%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.56%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (24 bytes) 
  1.00%   [kernel.kallsyms]  free_pcppages_bulk (16 bytes) 
  0.89%   [kernel.kallsyms]  zap_pte_range.isra.0 (11 bytes) 
  0.44%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (7 bytes) 
  0.44%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 549 (21 bytes) 
  0.44%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 570 (36 bytes) 
  0.44%           libjvm.so  SpinPause (0 bytes) 
  0.33%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 (31 bytes) 
  0.22%   [kernel.kallsyms]  psi_task_change (18 bytes) 
  0.22%   [kernel.kallsyms]  page_remove_rmap (25 bytes) 
  0.22%   [kernel.kallsyms]  mem_cgroup_update_lru_size (12 bytes) 
  0.22%   [kernel.kallsyms]  copy_user_enhanced_fast_string (0 bytes) 
  0.22%   [kernel.kallsyms]  __lock_text_start (6 bytes) 
  0.22%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.22%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_memory_alloc_clear (23 bytes) 
  0.22%           libjvm.so  fileStream::write (25 bytes) 
  7.68%  <...other 65 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.09%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 541 
  3.00%   [kernel.kallsyms]  native_write_msr 
  1.11%   [kernel.kallsyms]  free_pcppages_bulk 
  0.89%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.56%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 570 
  0.44%        libc-2.31.so  _int_malloc 
  0.44%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 549 
  0.44%           libjvm.so  SpinPause 
  0.33%        libc-2.31.so  malloc 
  0.33%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.33%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.33%   [kernel.kallsyms]  __mod_memcg_state 
  0.22%   [kernel.kallsyms]  page_remove_rmap 
  0.22%   [kernel.kallsyms]  copy_user_enhanced_fast_string 
  0.22%   [kernel.kallsyms]  mem_cgroup_update_lru_size 
  0.22%   [kernel.kallsyms]  __lock_text_start 
  0.22%        libc-2.31.so  _int_free 
  0.22%   [kernel.kallsyms]  psi_task_change 
  0.22%    libfcml.so.0.0.0  fcml_fn_env_memory_alloc_clear 
  0.22%           libjvm.so  fileStream::write 
  5.78%  <...other 49 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 85.09%         C2, level 4
 10.23%   [kernel.kallsyms]
  2.34%           libjvm.so
  1.33%        libc-2.31.so
  0.56%    libfcml.so.0.0.0
  0.11%  libpthread-2.31.so
  0.11%      perf-48831.map
  0.11%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (899). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       647.883          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
