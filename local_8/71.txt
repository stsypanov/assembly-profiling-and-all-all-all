# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1180.550 ns/op
# Warmup Iteration   2: 665.774 ns/op
# Warmup Iteration   3: 640.067 ns/op
# Warmup Iteration   4: 644.663 ns/op
# Warmup Iteration   5: 650.860 ns/op
Iteration   1: 637.033 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  637.033 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140669 total address lines.
Perf output processed (skipped 11.948 seconds):
 Column 1: cycles (939 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (569 bytes) 

            0x00007f18ad21e8b9: vcvttss2si %xmm0,%r10d
  0.64%     0x00007f18ad21e8bd: cmp     $0x80000000,%r10d
         ╭  0x00007f18ad21e8c4: jne     0x7f18ad21e8d6
         │  0x00007f18ad21e8c6: sub     $0x8,%rsp
         │  0x00007f18ad21e8ca: vmovss  %xmm0,(%rsp)
         │  0x00007f18ad21e8cf: callq   0x7f18ad0520a0    ;   {runtime_call}
         │  0x00007f18ad21e8d4: pop     %r10
         ↘  0x00007f18ad21e8d6: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f18ad21e8da: mov     0x58(%rsp),%r11
  0.75%     0x00007f18ad21e8df: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f18ad21f011
            0x00007f18ad21e8e3: mov     0x90(%rsp),%ebp
            0x00007f18ad21e8ea: cmp     %r10d,%ebp
            0x00007f18ad21e8ed: jnb     0x7f18ad21eead
            0x00007f18ad21e8f3: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.43%     0x00007f18ad21e8f8: mov     0x28(%rsp),%r10
            0x00007f18ad21e8fd: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f18ad21e901: mov     %r9,%r10
            0x00007f18ad21e904: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.64%     0x00007f18ad21e906: shr     $0x9,%r10
            0x00007f18ad21e90a: movabs  $0x7f18c2f99000,%rcx
            0x00007f18ad21e914: mov     %r12l,(%rcx,%r10)
            0x00007f18ad21e918: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.21%     0x00007f18ad21e91b: test    %eax,0x1818f6df(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f18ad21e921: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f18ad21f02d
            0x00007f18ad21e925: cmp     %r10d,%ebp
            0x00007f18ad21e928: jnl     0x7f18ad21eb53    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f18ad21e92e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.21%     0x00007f18ad21e931: mov     0x8(%rsp),%r8d
            0x00007f18ad21e936: mov     (%rsp),%edi
  3.94%     0x00007f18ad21e939: mov     0x18(%rsp),%r14
  0.11%     0x00007f18ad21e93e: mov     0x20(%rsp),%r11
            0x00007f18ad21e943: mov     0x30(%rsp),%r9
            0x00007f18ad21e948: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  1.28%     0x00007f18ad21e94d: mov     0x60(%r15),%rbx
            0x00007f18ad21e951: mov     %rbx,%r10
            0x00007f18ad21e954: add     $0x28,%r10
            0x00007f18ad21e958: cmp     0x70(%r15),%r10
            0x00007f18ad21e95c: jnb     0x7f18ad21eb62
  0.53%     0x00007f18ad21e962: mov     %r10,0x60(%r15)
            0x00007f18ad21e966: prefetchnta 0x100(%r10)
            0x00007f18ad21e96e: mov     0xa8(%r11),%r10
            0x00007f18ad21e975: mov     %r10,(%rbx)
  0.53%     0x00007f18ad21e978: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007f18ad21e97f: mov     %r12d,0xc(%rbx)
  0.11%     0x00007f18ad21e983: mov     %r12,0x10(%rbx)
            0x00007f18ad21e987: mov     %r12,0x18(%rbx)
  0.75%     0x00007f18ad21e98b: mov     %r12d,0x20(%rbx)
            0x00007f18ad21e98f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f18ad21e992: mov     0x60(%r15),%rax
            0x00007f18ad21e996: mov     %rax,%r10
  0.53%     0x00007f18ad21e999: add     $0x20,%r10
            0x00007f18ad21e99d: cmp     0x70(%r15),%r10
            0x00007f18ad21e9a1: jnb     0x7f18ad21ebe8
            0x00007f18ad21e9a7: mov     %r10,0x60(%r15)
  0.11%     0x00007f18ad21e9ab: prefetchnta 0x100(%r10)
  0.53%     0x00007f18ad21e9b3: mov     0xa8(%r14),%r10
            0x00007f18ad21e9ba: mov     %r10,(%rax)
            0x00007f18ad21e9bd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f18ad21e9c4: mov     %r12d,0xc(%rax)
  0.64%     0x00007f18ad21e9c8: mov     %r12,0x10(%rax)
            0x00007f18ad21e9cc: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21e9d0: mov     %rbx,%rcx
            0x00007f18ad21e9d3: mov     %rax,%r10
  0.43%     0x00007f18ad21e9d6: mov     %r10d,0xc(%rbx)
            0x00007f18ad21e9da: shr     $0x9,%rcx
            0x00007f18ad21e9de: movabs  $0x7f18c2f99000,%r10
            0x00007f18ad21e9e8: mov     %r12l,(%r10,%rcx)
  0.75%     0x00007f18ad21e9ec: mov     %r12d,0x14(%rbx)
            0x00007f18ad21e9f0: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.23%     0x00007f18ad21e9f5: mov     0x60(%r15),%rdx
  0.11%     0x00007f18ad21e9f9: mov     %rdx,%r10
            0x00007f18ad21e9fc: add     $0x18,%r10
  0.64%     0x00007f18ad21ea00: cmp     0x70(%r15),%r10
            0x00007f18ad21ea04: jnb     0x7f18ad21ec76
            0x00007f18ad21ea0a: mov     %r10,0x60(%r15)
            0x00007f18ad21ea0e: prefetchnta 0x100(%r10)
            0x00007f18ad21ea16: mov     0xa8(%rsi),%r10
  0.53%     0x00007f18ad21ea1d: mov     %r10,(%rdx)
            0x00007f18ad21ea20: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f18ad21ea27: mov     %r12d,0xc(%rdx)
            0x00007f18ad21ea2b: mov     %r12d,0x14(%rdx)
  0.53%     0x00007f18ad21ea2f: mov     %r13,0x58(%rsp)
            0x00007f18ad21ea34: mov     %ebp,0x90(%rsp)
            0x00007f18ad21ea3b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21ea3e: mov     0x60(%r15),%rbp
  0.32%     0x00007f18ad21ea42: mov     %rbp,%r10
            0x00007f18ad21ea45: add     $0x20,%r10
            0x00007f18ad21ea49: cmp     0x70(%r15),%r10
            0x00007f18ad21ea4d: jnb     0x7f18ad21ed07
            0x00007f18ad21ea53: mov     %r10,0x60(%r15)
  0.43%     0x00007f18ad21ea57: prefetchnta 0x100(%r10)
            0x00007f18ad21ea5f: mov     0xa8(%r9),%r10
            0x00007f18ad21ea66: mov     %r10,0x0(%rbp)
            0x00007f18ad21ea6a: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.53%     0x00007f18ad21ea71: mov     %r12d,0xc(%rbp)
            0x00007f18ad21ea75: mov     %r12,0x10(%rbp)
            0x00007f18ad21ea79: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21ea7d: mov     0x60(%r15),%rax
  0.96%     0x00007f18ad21ea81: mov     %rax,%r10
            0x00007f18ad21ea84: add     $0x10,%r10
            0x00007f18ad21ea88: cmp     0x70(%r15),%r10
            0x00007f18ad21ea8c: jnb     0x7f18ad21ed9d
            0x00007f18ad21ea92: mov     %r10,0x60(%r15)
  0.43%     0x00007f18ad21ea96: prefetchnta 0x100(%r10)
            0x00007f18ad21ea9e: mov     0x10(%rsp),%r10
            0x00007f18ad21eaa3: mov     0xa8(%r10),%r10
            0x00007f18ad21eaaa: mov     %r10,(%rax)
  0.32%     0x00007f18ad21eaad: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f18ad21eab4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eab8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eabb: mov     %rax,%rcx
  0.85%     0x00007f18ad21eabe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007f18ad21eac1: mov     %rbp,%rax
            0x00007f18ad21eac4: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eac7: shr     $0x9,%rax
  0.64%     0x00007f18ad21eacb: movabs  $0x7f18c2f99000,%r13
            0x00007f18ad21ead5: mov     %r12l,0x0(%r13,%rax)
            0x00007f18ad21eada: mov     %r12d,0x18(%rbp)
            0x00007f18ad21eade: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.55%     0x00007f18ad21eae3: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eae7: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eaeb: mov     %rdx,%r10
            0x00007f18ad21eaee: shr     $0x9,%r10
            0x00007f18ad21eaf2: movabs  $0x7f18c2f99000,%rdx
            0x00007f18ad21eafc: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eb00: mov     %ecx,0x1c(%rbx)
  0.64%     0x00007f18ad21eb03: mov     %rbx,%r10
            0x00007f18ad21eb06: shr     $0x9,%r10
            0x00007f18ad21eb0a: movabs  $0x7f18c2f99000,%rcx
            0x00007f18ad21eb14: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.43%     0x00007f18ad21eb18: cmp     $0x1,%r8d
            0x00007f18ad21eb1c: jle     0x7f18ad21e7d0    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21eb22: mov     $0x1,%r10d
            0x00007f18ad21eb28: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 50.69%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (217 bytes) 

            0x00007f18ad21e7cb: jmpq    0x7f18ad21e94d
            0x00007f18ad21e7d0: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21e7d5: cmp     $0x40000,%edx
            0x00007f18ad21e7db: jnbe    0x7f18ad21eea5
            0x00007f18ad21e7e1: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.85%     0x00007f18ad21e7e4: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21e7e7: cmp     $0x40000,%edx
            0x00007f18ad21e7ed: jnbe    0x7f18ad21ee27
            0x00007f18ad21e7f3: mov     %rbx,%rbp
            0x00007f18ad21e7f6: mov     %rsi,0x38(%rsp)
  0.43%     0x00007f18ad21e7fb: mov     %r9,0x30(%rsp)
            0x00007f18ad21e800: mov     %r11,0x20(%rsp)
            0x00007f18ad21e805: mov     %r14,0x18(%rsp)
            0x00007f18ad21e80a: mov     %edi,(%rsp)
  0.43%     0x00007f18ad21e80d: mov     %r8d,0x8(%rsp)
            0x00007f18ad21e812: mov     0x60(%r15),%r10
            0x00007f18ad21e816: shl     $0x2,%rcx
            0x00007f18ad21e81a: add     $0x17,%rcx
  0.64%     0x00007f18ad21e81e: mov     %rcx,%r11
            0x00007f18ad21e821: and     $0xfffffffffffffff8,%r11
            0x00007f18ad21e825: mov     %r10,%r8
            0x00007f18ad21e828: add     %r11,%r8
  1.17%     0x00007f18ad21e82b: cmp     0x70(%r15),%r8
            0x00007f18ad21e82f: jnb     0x7f18ad21ee46
            0x00007f18ad21e835: mov     %r8,0x60(%r15)
            0x00007f18ad21e839: prefetchnta 0x100(%r8)
            0x00007f18ad21e841: movq    $0x1,(%r10)
  1.06%     0x00007f18ad21e848: prefetchnta 0x140(%r8)
            0x00007f18ad21e850: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f18ad21e858: mov     %edx,0xc(%r10)
            0x00007f18ad21e85c: prefetchnta 0x180(%r8)
  0.64%     0x00007f18ad21e864: mov     %r10,%rdi
            0x00007f18ad21e867: add     $0x10,%rdi
            0x00007f18ad21e86b: shr     $0x3,%rcx
            0x00007f18ad21e86f: add     $0xfffffffffffffffe,%rcx
  0.11%     0x00007f18ad21e873: xor     %rax,%rax
            0x00007f18ad21e876: shl     $0x3,%rcx
            0x00007f18ad21e87a: rep stosb (%rdi)
  9.80%     0x00007f18ad21e87d: mov     %r10,%r11
  0.21%     0x00007f18ad21e880: mov     %rbp,%r8
            0x00007f18ad21e883: mov     %r11d,0x20(%rbp)
  1.06%     0x00007f18ad21e887: mov     %rbp,%r10
            0x00007f18ad21e88a: shr     $0x9,%r10
            0x00007f18ad21e88e: movabs  $0x7f18c2f99000,%r11
            0x00007f18ad21e898: mov     %r12l,(%r11,%r10)
  0.32%     0x00007f18ad21e89c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 11.40%     0x00007f18ad21e8a1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f18ad21e8a5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f18ad21f001
            0x00007f18ad21e8a9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.85%     0x00007f18ad21e8ae: mov     0x28(%rsp),%r10
            0x00007f18ad21e8b3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f18ad21e8b9: vcvttss2si %xmm0,%r10d
  0.64%     0x00007f18ad21e8bd: cmp     $0x80000000,%r10d
         ╭  0x00007f18ad21e8c4: jne     0x7f18ad21e8d6
         │  0x00007f18ad21e8c6: sub     $0x8,%rsp
         │  0x00007f18ad21e8ca: vmovss  %xmm0,(%rsp)
         │  0x00007f18ad21e8cf: callq   0x7f18ad0520a0    ;   {runtime_call}
         │  0x00007f18ad21e8d4: pop     %r10
         ↘  0x00007f18ad21e8d6: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f18ad21e8da: mov     0x58(%rsp),%r11
  0.75%     0x00007f18ad21e8df: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f18ad21f011
            0x00007f18ad21e8e3: mov     0x90(%rsp),%ebp
....................................................................................................
 29.61%  <total for region 2>

....[Hottest Regions]...............................................................................
 50.69%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (569 bytes) 
 29.61%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (217 bytes) 
  2.56%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.17%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (31 bytes) 
  0.64%   [kernel.kallsyms]  syscall_exit_to_user_mode (23 bytes) 
  0.53%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 533 (21 bytes) 
  0.43%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.43%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (0 bytes) 
  0.32%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.32%   [kernel.kallsyms]  free_unref_page_prepare.part.0 (16 bytes) 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  0.32%           libjvm.so  fileStream::write (20 bytes) 
  0.32%        libc-2.31.so  _int_free (24 bytes) 
  0.32%        libc-2.31.so  _int_malloc (13 bytes) 
  0.32%        libc-2.31.so  malloc (4 bytes) 
  0.21%   [kernel.kallsyms]  psi_group_change (18 bytes) 
  0.21%   [kernel.kallsyms]  find_get_pages_range_tag (0 bytes) 
  0.21%   [kernel.kallsyms]  __mod_lruvec_state (27 bytes) 
  0.21%   [kernel.kallsyms]  __find_get_block (0 bytes) 
  0.21%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 556 (24 bytes) 
 10.54%  <...other 90 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 82.11%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 
  2.56%   [kernel.kallsyms]  native_write_msr 
  1.06%        libc-2.31.so  _int_malloc 
  0.75%        libc-2.31.so  malloc 
  0.64%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.64%        libc-2.31.so  _int_free 
  0.53%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 556 
  0.53%   [kernel.kallsyms]  free_pcppages_bulk 
  0.53%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 533 
  0.53%        libc-2.31.so  malloc_consolidate 
  0.43%        libc-2.31.so  unlink_chunk.isra.0 
  0.32%           libjvm.so  fileStream::write 
  0.32%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.32%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.32%   [kernel.kallsyms]  free_unref_page_prepare.part.0 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  0.21%   [kernel.kallsyms]  vfs_write 
  0.21%   [kernel.kallsyms]  find_get_pages_range_tag 
  0.21%   [kernel.kallsyms]  psi_group_change 
  7.24%  <...other 63 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 83.17%         C2, level 4
  9.69%   [kernel.kallsyms]
  3.83%        libc-2.31.so
  1.49%           libjvm.so
  1.06%    libfcml.so.0.0.0
  0.32%         interpreter
  0.11%  libpthread-2.31.so
  0.11%           nvidia.ko
  0.11%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (939). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       637.033          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
