# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1324.742 ns/op
# Warmup Iteration   2: 687.718 ns/op
# Warmup Iteration   3: 636.831 ns/op
# Warmup Iteration   4: 645.809 ns/op
# Warmup Iteration   5: 649.334 ns/op
Iteration   1: 647.185 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  647.185 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140955 total address lines.
Perf output processed (skipped 11.960 seconds):
 Column 1: cycles (960 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (569 bytes) 

            0x00007fa3b5220e39: vcvttss2si %xmm0,%r10d
  0.83%     0x00007fa3b5220e3d: cmp     $0x80000000,%r10d
         ╭  0x00007fa3b5220e44: jne     0x7fa3b5220e56
         │  0x00007fa3b5220e46: sub     $0x8,%rsp
         │  0x00007fa3b5220e4a: vmovss  %xmm0,(%rsp)
         │  0x00007fa3b5220e4f: callq   0x7fa3b50520a0    ;   {runtime_call}
         │  0x00007fa3b5220e54: pop     %r10
         ↘  0x00007fa3b5220e56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa3b5220e5a: mov     0x58(%rsp),%r11
  0.42%     0x00007fa3b5220e5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fa3b5221591
            0x00007fa3b5220e63: mov     0x90(%rsp),%ebp
            0x00007fa3b5220e6a: cmp     %r10d,%ebp
            0x00007fa3b5220e6d: jnb     0x7fa3b522142d
            0x00007fa3b5220e73: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.31%     0x00007fa3b5220e78: mov     0x28(%rsp),%r10
            0x00007fa3b5220e7d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fa3b5220e81: mov     %r9,%r10
            0x00007fa3b5220e84: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.42%     0x00007fa3b5220e86: shr     $0x9,%r10
            0x00007fa3b5220e8a: movabs  $0x7fa3b47ff000,%rcx
            0x00007fa3b5220e94: mov     %r12l,(%rcx,%r10)
            0x00007fa3b5220e98: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.63%     0x00007fa3b5220e9b: test    %eax,0x14a2f15f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fa3b5220ea1: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fa3b52215ad
            0x00007fa3b5220ea5: cmp     %r10d,%ebp
            0x00007fa3b5220ea8: jnl     0x7fa3b52210d3    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fa3b5220eae: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.31%     0x00007fa3b5220eb1: mov     0x8(%rsp),%r8d
            0x00007fa3b5220eb6: mov     (%rsp),%edi
  3.85%     0x00007fa3b5220eb9: mov     0x18(%rsp),%r14
            0x00007fa3b5220ebe: mov     0x20(%rsp),%r11
            0x00007fa3b5220ec3: mov     0x30(%rsp),%r9
            0x00007fa3b5220ec8: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.73%     0x00007fa3b5220ecd: mov     0x60(%r15),%rbx
  0.10%     0x00007fa3b5220ed1: mov     %rbx,%r10
            0x00007fa3b5220ed4: add     $0x28,%r10
            0x00007fa3b5220ed8: cmp     0x70(%r15),%r10
            0x00007fa3b5220edc: jnb     0x7fa3b52210e2
  0.42%     0x00007fa3b5220ee2: mov     %r10,0x60(%r15)
            0x00007fa3b5220ee6: prefetchnta 0x100(%r10)
            0x00007fa3b5220eee: mov     0xa8(%r11),%r10
            0x00007fa3b5220ef5: mov     %r10,(%rbx)
  0.52%     0x00007fa3b5220ef8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.21%     0x00007fa3b5220eff: mov     %r12d,0xc(%rbx)
  0.21%     0x00007fa3b5220f03: mov     %r12,0x10(%rbx)
            0x00007fa3b5220f07: mov     %r12,0x18(%rbx)
  0.52%     0x00007fa3b5220f0b: mov     %r12d,0x20(%rbx)
            0x00007fa3b5220f0f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fa3b5220f12: mov     0x60(%r15),%rax
            0x00007fa3b5220f16: mov     %rax,%r10
  0.63%     0x00007fa3b5220f19: add     $0x20,%r10
            0x00007fa3b5220f1d: cmp     0x70(%r15),%r10
            0x00007fa3b5220f21: jnb     0x7fa3b5221168
            0x00007fa3b5220f27: mov     %r10,0x60(%r15)
            0x00007fa3b5220f2b: prefetchnta 0x100(%r10)
  0.10%     0x00007fa3b5220f33: mov     0xa8(%r14),%r10
            0x00007fa3b5220f3a: mov     %r10,(%rax)
            0x00007fa3b5220f3d: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.21%     0x00007fa3b5220f44: mov     %r12d,0xc(%rax)
  0.21%     0x00007fa3b5220f48: mov     %r12,0x10(%rax)
  0.31%     0x00007fa3b5220f4c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5220f50: mov     %rbx,%rcx
            0x00007fa3b5220f53: mov     %rax,%r10
  0.83%     0x00007fa3b5220f56: mov     %r10d,0xc(%rbx)
            0x00007fa3b5220f5a: shr     $0x9,%rcx
            0x00007fa3b5220f5e: movabs  $0x7fa3b47ff000,%r10
            0x00007fa3b5220f68: mov     %r12l,(%r10,%rcx)
  0.21%     0x00007fa3b5220f6c: mov     %r12d,0x14(%rbx)
  0.10%     0x00007fa3b5220f70: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.94%     0x00007fa3b5220f75: mov     0x60(%r15),%rdx
  0.10%     0x00007fa3b5220f79: mov     %rdx,%r10
            0x00007fa3b5220f7c: add     $0x18,%r10
  0.21%     0x00007fa3b5220f80: cmp     0x70(%r15),%r10
            0x00007fa3b5220f84: jnb     0x7fa3b52211f6
            0x00007fa3b5220f8a: mov     %r10,0x60(%r15)
            0x00007fa3b5220f8e: prefetchnta 0x100(%r10)
            0x00007fa3b5220f96: mov     0xa8(%rsi),%r10
  0.52%     0x00007fa3b5220f9d: mov     %r10,(%rdx)
            0x00007fa3b5220fa0: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fa3b5220fa7: mov     %r12d,0xc(%rdx)
            0x00007fa3b5220fab: mov     %r12d,0x14(%rdx)
  0.63%     0x00007fa3b5220faf: mov     %r13,0x58(%rsp)
            0x00007fa3b5220fb4: mov     %ebp,0x90(%rsp)
            0x00007fa3b5220fbb: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5220fbe: mov     0x60(%r15),%rbp
  0.83%     0x00007fa3b5220fc2: mov     %rbp,%r10
            0x00007fa3b5220fc5: add     $0x20,%r10
            0x00007fa3b5220fc9: cmp     0x70(%r15),%r10
            0x00007fa3b5220fcd: jnb     0x7fa3b5221287
  0.10%     0x00007fa3b5220fd3: mov     %r10,0x60(%r15)
  0.83%     0x00007fa3b5220fd7: prefetchnta 0x100(%r10)
            0x00007fa3b5220fdf: mov     0xa8(%r9),%r10
            0x00007fa3b5220fe6: mov     %r10,0x0(%rbp)
            0x00007fa3b5220fea: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.42%     0x00007fa3b5220ff1: mov     %r12d,0xc(%rbp)
            0x00007fa3b5220ff5: mov     %r12,0x10(%rbp)
            0x00007fa3b5220ff9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007fa3b5220ffd: mov     0x60(%r15),%rax
  0.63%     0x00007fa3b5221001: mov     %rax,%r10
            0x00007fa3b5221004: add     $0x10,%r10
            0x00007fa3b5221008: cmp     0x70(%r15),%r10
            0x00007fa3b522100c: jnb     0x7fa3b522131d
  0.10%     0x00007fa3b5221012: mov     %r10,0x60(%r15)
  0.52%     0x00007fa3b5221016: prefetchnta 0x100(%r10)
            0x00007fa3b522101e: mov     0x10(%rsp),%r10
            0x00007fa3b5221023: mov     0xa8(%r10),%r10
            0x00007fa3b522102a: mov     %r10,(%rax)
  0.52%     0x00007fa3b522102d: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fa3b5221034: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5221038: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b522103b: mov     %rax,%rcx
  0.63%     0x00007fa3b522103e: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5221041: mov     %rbp,%rax
            0x00007fa3b5221044: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5221047: shr     $0x9,%rax
  0.83%     0x00007fa3b522104b: movabs  $0x7fa3b47ff000,%r13
            0x00007fa3b5221055: mov     %r12l,0x0(%r13,%rax)
            0x00007fa3b522105a: mov     %r12d,0x18(%rbp)
            0x00007fa3b522105e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 19.79%     0x00007fa3b5221063: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5221067: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b522106b: mov     %rdx,%r10
  0.73%     0x00007fa3b522106e: shr     $0x9,%r10
            0x00007fa3b5221072: movabs  $0x7fa3b47ff000,%rdx
            0x00007fa3b522107c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5221080: mov     %ecx,0x1c(%rbx)
  0.83%     0x00007fa3b5221083: mov     %rbx,%r10
            0x00007fa3b5221086: shr     $0x9,%r10
            0x00007fa3b522108a: movabs  $0x7fa3b47ff000,%rcx
            0x00007fa3b5221094: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.31%     0x00007fa3b5221098: cmp     $0x1,%r8d
            0x00007fa3b522109c: jle     0x7fa3b5220d50    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b52210a2: mov     $0x1,%r10d
            0x00007fa3b52210a8: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 55.83%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (194 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5220d64: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa3b5220d67: cmp     $0x40000,%edx
            0x00007fa3b5220d6d: jnbe    0x7fa3b52213a7
            0x00007fa3b5220d73: mov     %rbx,%rbp
            0x00007fa3b5220d76: mov     %rsi,0x38(%rsp)
  0.73%     0x00007fa3b5220d7b: mov     %r9,0x30(%rsp)
            0x00007fa3b5220d80: mov     %r11,0x20(%rsp)
            0x00007fa3b5220d85: mov     %r14,0x18(%rsp)
            0x00007fa3b5220d8a: mov     %edi,(%rsp)
  0.21%     0x00007fa3b5220d8d: mov     %r8d,0x8(%rsp)
            0x00007fa3b5220d92: mov     0x60(%r15),%r10
            0x00007fa3b5220d96: shl     $0x2,%rcx
            0x00007fa3b5220d9a: add     $0x17,%rcx
  0.42%     0x00007fa3b5220d9e: mov     %rcx,%r11
            0x00007fa3b5220da1: and     $0xfffffffffffffff8,%r11
            0x00007fa3b5220da5: mov     %r10,%r8
            0x00007fa3b5220da8: add     %r11,%r8
  0.31%     0x00007fa3b5220dab: cmp     0x70(%r15),%r8
            0x00007fa3b5220daf: jnb     0x7fa3b52213c6
            0x00007fa3b5220db5: mov     %r8,0x60(%r15)
            0x00007fa3b5220db9: prefetchnta 0x100(%r8)
            0x00007fa3b5220dc1: movq    $0x1,(%r10)
  0.52%     0x00007fa3b5220dc8: prefetchnta 0x140(%r8)
            0x00007fa3b5220dd0: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fa3b5220dd8: mov     %edx,0xc(%r10)
            0x00007fa3b5220ddc: prefetchnta 0x180(%r8)
  0.52%     0x00007fa3b5220de4: mov     %r10,%rdi
            0x00007fa3b5220de7: add     $0x10,%rdi
            0x00007fa3b5220deb: shr     $0x3,%rcx
            0x00007fa3b5220def: add     $0xfffffffffffffffe,%rcx
  0.52%     0x00007fa3b5220df3: xor     %rax,%rax
            0x00007fa3b5220df6: shl     $0x3,%rcx
            0x00007fa3b5220dfa: rep stosb (%rdi)
  8.13%     0x00007fa3b5220dfd: mov     %r10,%r11
            0x00007fa3b5220e00: mov     %rbp,%r8
            0x00007fa3b5220e03: mov     %r11d,0x20(%rbp)
  0.63%     0x00007fa3b5220e07: mov     %rbp,%r10
            0x00007fa3b5220e0a: shr     $0x9,%r10
            0x00007fa3b5220e0e: movabs  $0x7fa3b47ff000,%r11
            0x00007fa3b5220e18: mov     %r12l,(%r11,%r10)
  0.42%     0x00007fa3b5220e1c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  9.27%     0x00007fa3b5220e21: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007fa3b5220e25: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa3b5221581
            0x00007fa3b5220e29: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.63%     0x00007fa3b5220e2e: mov     0x28(%rsp),%r10
            0x00007fa3b5220e33: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fa3b5220e39: vcvttss2si %xmm0,%r10d
  0.83%     0x00007fa3b5220e3d: cmp     $0x80000000,%r10d
         ╭  0x00007fa3b5220e44: jne     0x7fa3b5220e56
         │  0x00007fa3b5220e46: sub     $0x8,%rsp
         │  0x00007fa3b5220e4a: vmovss  %xmm0,(%rsp)
         │  0x00007fa3b5220e4f: callq   0x7fa3b50520a0    ;   {runtime_call}
         │  0x00007fa3b5220e54: pop     %r10
         ↘  0x00007fa3b5220e56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa3b5220e5a: mov     0x58(%rsp),%r11
  0.42%     0x00007fa3b5220e5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fa3b5221591
            0x00007fa3b5220e63: mov     0x90(%rsp),%ebp
....................................................................................................
 23.23%  <total for region 2>

....[Hottest Regions]...............................................................................
 55.83%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (569 bytes) 
 23.23%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (194 bytes) 
  3.75%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.94%   [kernel.kallsyms]  syscall_exit_to_user_mode (1 bytes) 
  0.94%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (7 bytes) 
  0.73%        libc-2.31.so  malloc (0 bytes) 
  0.52%   [kernel.kallsyms]  zap_pte_range.isra.0 (11 bytes) 
  0.52%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.52%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (0 bytes) 
  0.42%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.42%   [kernel.kallsyms]  syscall_return_via_sysret (3 bytes) 
  0.42%           libjvm.so  SpinPause (0 bytes) 
  0.42%        libc-2.31.so  _int_free (5 bytes) 
  0.31%           libjvm.so  PSScavengeKlassClosure::do_klass (0 bytes) 
  0.31%        libc-2.31.so  malloc_consolidate (18 bytes) 
  0.31%        libc-2.31.so  malloc_consolidate (16 bytes) 
  0.21%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.21%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  0.21%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (10 bytes) 
  9.48%  <...other 85 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 81.04%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 
  3.75%   [kernel.kallsyms]  native_write_msr 
  1.04%        libc-2.31.so  malloc 
  0.94%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.83%   [kernel.kallsyms]  release_pages 
  0.73%   [kernel.kallsyms]  free_pcppages_bulk 
  0.73%        libc-2.31.so  _int_free 
  0.63%        libc-2.31.so  malloc_consolidate 
  0.63%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.42%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.42%        libc-2.31.so  _int_malloc 
  0.42%           libjvm.so  SpinPause 
  0.31%           libjvm.so  PSScavengeKlassClosure::do_klass 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  0.21%        libc-2.31.so  __strlen_avx2 
  0.21%           libjvm.so  InstanceKlass::allocate_instance 
  0.21%           libjvm.so  fileStream::write 
  0.21%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 537 
  0.21%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  6.56%  <...other 61 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 81.35%         C2, level 4
 10.52%   [kernel.kallsyms]
  3.75%        libc-2.31.so
  3.13%           libjvm.so
  1.04%    libfcml.so.0.0.0
  0.10%         C1, level 3
....................................................................................................
 99.90%  <totals>

WARNING: The perf event count is suspiciously low (960). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       647.185          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
