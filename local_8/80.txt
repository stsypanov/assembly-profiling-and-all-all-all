# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1226.165 ns/op
# Warmup Iteration   2: 681.212 ns/op
# Warmup Iteration   3: 636.392 ns/op
# Warmup Iteration   4: 638.269 ns/op
# Warmup Iteration   5: 647.609 ns/op
Iteration   1: 642.904 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  642.904 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 141064 total address lines.
Perf output processed (skipped 12.057 seconds):
 Column 1: cycles (998 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (569 bytes) 

            0x00007fbbcd227ff9: vcvttss2si %xmm0,%r10d
  0.40%     0x00007fbbcd227ffd: cmp     $0x80000000,%r10d
         ╭  0x00007fbbcd228004: jne     0x7fbbcd228016
         │  0x00007fbbcd228006: sub     $0x8,%rsp
         │  0x00007fbbcd22800a: vmovss  %xmm0,(%rsp)
         │  0x00007fbbcd22800f: callq   0x7fbbcd0520a0    ;   {runtime_call}
         │  0x00007fbbcd228014: pop     %r10
         ↘  0x00007fbbcd228016: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fbbcd22801a: mov     0x58(%rsp),%r11
  0.40%     0x00007fbbcd22801f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fbbcd228751
            0x00007fbbcd228023: mov     0x90(%rsp),%ebp
            0x00007fbbcd22802a: cmp     %r10d,%ebp
            0x00007fbbcd22802d: jnb     0x7fbbcd2285ed
            0x00007fbbcd228033: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.80%     0x00007fbbcd228038: mov     0x28(%rsp),%r10
            0x00007fbbcd22803d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fbbcd228041: mov     %r9,%r10
            0x00007fbbcd228044: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.40%     0x00007fbbcd228046: shr     $0x9,%r10
            0x00007fbbcd22804a: movabs  $0x7fbbe0d78000,%rcx
            0x00007fbbcd228054: mov     %r12l,(%rcx,%r10)
            0x00007fbbcd228058: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.40%     0x00007fbbcd22805b: test    %eax,0x15f64f9f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fbbcd228061: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fbbcd22876d
            0x00007fbbcd228065: cmp     %r10d,%ebp
            0x00007fbbcd228068: jnl     0x7fbbcd228293    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fbbcd22806e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.40%     0x00007fbbcd228071: mov     0x8(%rsp),%r8d
            0x00007fbbcd228076: mov     (%rsp),%edi
  2.61%     0x00007fbbcd228079: mov     0x18(%rsp),%r14
            0x00007fbbcd22807e: mov     0x20(%rsp),%r11
            0x00007fbbcd228083: mov     0x30(%rsp),%r9
            0x00007fbbcd228088: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.40%     0x00007fbbcd22808d: mov     0x60(%r15),%rbx
  0.10%     0x00007fbbcd228091: mov     %rbx,%r10
  0.10%     0x00007fbbcd228094: add     $0x28,%r10
            0x00007fbbcd228098: cmp     0x70(%r15),%r10
            0x00007fbbcd22809c: jnb     0x7fbbcd2282a2
  0.50%     0x00007fbbcd2280a2: mov     %r10,0x60(%r15)
            0x00007fbbcd2280a6: prefetchnta 0x100(%r10)
            0x00007fbbcd2280ae: mov     0xa8(%r11),%r10
  0.10%     0x00007fbbcd2280b5: mov     %r10,(%rbx)
  0.30%     0x00007fbbcd2280b8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fbbcd2280bf: mov     %r12d,0xc(%rbx)
  0.20%     0x00007fbbcd2280c3: mov     %r12,0x10(%rbx)
            0x00007fbbcd2280c7: mov     %r12,0x18(%rbx)
  0.20%     0x00007fbbcd2280cb: mov     %r12d,0x20(%rbx)
            0x00007fbbcd2280cf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fbbcd2280d2: mov     0x60(%r15),%rax
            0x00007fbbcd2280d6: mov     %rax,%r10
  0.40%     0x00007fbbcd2280d9: add     $0x20,%r10
            0x00007fbbcd2280dd: cmp     0x70(%r15),%r10
            0x00007fbbcd2280e1: jnb     0x7fbbcd228328
            0x00007fbbcd2280e7: mov     %r10,0x60(%r15)
            0x00007fbbcd2280eb: prefetchnta 0x100(%r10)
  0.50%     0x00007fbbcd2280f3: mov     0xa8(%r14),%r10
            0x00007fbbcd2280fa: mov     %r10,(%rax)
            0x00007fbbcd2280fd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fbbcd228104: mov     %r12d,0xc(%rax)
  0.10%     0x00007fbbcd228108: mov     %r12,0x10(%rax)
            0x00007fbbcd22810c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd228110: mov     %rbx,%rcx
            0x00007fbbcd228113: mov     %rax,%r10
  0.20%     0x00007fbbcd228116: mov     %r10d,0xc(%rbx)
            0x00007fbbcd22811a: shr     $0x9,%rcx
            0x00007fbbcd22811e: movabs  $0x7fbbe0d78000,%r10
            0x00007fbbcd228128: mov     %r12l,(%r10,%rcx)
  0.50%     0x00007fbbcd22812c: mov     %r12d,0x14(%rbx)
            0x00007fbbcd228130: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.63%     0x00007fbbcd228135: mov     0x60(%r15),%rdx
            0x00007fbbcd228139: mov     %rdx,%r10
            0x00007fbbcd22813c: add     $0x18,%r10
  0.50%     0x00007fbbcd228140: cmp     0x70(%r15),%r10
            0x00007fbbcd228144: jnb     0x7fbbcd2283b6
            0x00007fbbcd22814a: mov     %r10,0x60(%r15)
            0x00007fbbcd22814e: prefetchnta 0x100(%r10)
            0x00007fbbcd228156: mov     0xa8(%rsi),%r10
  0.40%     0x00007fbbcd22815d: mov     %r10,(%rdx)
            0x00007fbbcd228160: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fbbcd228167: mov     %r12d,0xc(%rdx)
            0x00007fbbcd22816b: mov     %r12d,0x14(%rdx)
  0.80%     0x00007fbbcd22816f: mov     %r13,0x58(%rsp)
            0x00007fbbcd228174: mov     %ebp,0x90(%rsp)
            0x00007fbbcd22817b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd22817e: mov     0x60(%r15),%rbp
  0.50%     0x00007fbbcd228182: mov     %rbp,%r10
            0x00007fbbcd228185: add     $0x20,%r10
            0x00007fbbcd228189: cmp     0x70(%r15),%r10
            0x00007fbbcd22818d: jnb     0x7fbbcd228447
            0x00007fbbcd228193: mov     %r10,0x60(%r15)
  0.60%     0x00007fbbcd228197: prefetchnta 0x100(%r10)
            0x00007fbbcd22819f: mov     0xa8(%r9),%r10
            0x00007fbbcd2281a6: mov     %r10,0x0(%rbp)
            0x00007fbbcd2281aa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.40%     0x00007fbbcd2281b1: mov     %r12d,0xc(%rbp)
            0x00007fbbcd2281b5: mov     %r12,0x10(%rbp)
            0x00007fbbcd2281b9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd2281bd: mov     0x60(%r15),%rax
  1.20%     0x00007fbbcd2281c1: mov     %rax,%r10
            0x00007fbbcd2281c4: add     $0x10,%r10
            0x00007fbbcd2281c8: cmp     0x70(%r15),%r10
            0x00007fbbcd2281cc: jnb     0x7fbbcd2284dd
            0x00007fbbcd2281d2: mov     %r10,0x60(%r15)
  0.10%     0x00007fbbcd2281d6: prefetchnta 0x100(%r10)
            0x00007fbbcd2281de: mov     0x10(%rsp),%r10
            0x00007fbbcd2281e3: mov     0xa8(%r10),%r10
            0x00007fbbcd2281ea: mov     %r10,(%rax)
  0.90%     0x00007fbbcd2281ed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fbbcd2281f4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd2281f8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd2281fb: mov     %rax,%rcx
  0.40%     0x00007fbbcd2281fe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd228201: mov     %rbp,%rax
            0x00007fbbcd228204: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd228207: shr     $0x9,%rax
  0.40%     0x00007fbbcd22820b: movabs  $0x7fbbe0d78000,%r13
            0x00007fbbcd228215: mov     %r12l,0x0(%r13,%rax)
            0x00007fbbcd22821a: mov     %r12d,0x18(%rbp)
            0x00007fbbcd22821e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.43%     0x00007fbbcd228223: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd228227: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd22822b: mov     %rdx,%r10
  0.30%     0x00007fbbcd22822e: shr     $0x9,%r10
            0x00007fbbcd228232: movabs  $0x7fbbe0d78000,%rdx
            0x00007fbbcd22823c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd228240: mov     %ecx,0x1c(%rbx)
  0.40%     0x00007fbbcd228243: mov     %rbx,%r10
            0x00007fbbcd228246: shr     $0x9,%r10
            0x00007fbbcd22824a: movabs  $0x7fbbe0d78000,%rcx
            0x00007fbbcd228254: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  1.00%     0x00007fbbcd228258: cmp     $0x1,%r8d
            0x00007fbbcd22825c: jle     0x7fbbcd227f10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd228262: mov     $0x1,%r10d
            0x00007fbbcd228268: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 49.60%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (217 bytes) 

            0x00007fbbcd227f0b: jmpq    0x7fbbcd22808d
            0x00007fbbcd227f10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd227f15: cmp     $0x40000,%edx
            0x00007fbbcd227f1b: jnbe    0x7fbbcd2285e5
            0x00007fbbcd227f21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.80%     0x00007fbbcd227f24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbcd227f27: cmp     $0x40000,%edx
            0x00007fbbcd227f2d: jnbe    0x7fbbcd228567
            0x00007fbbcd227f33: mov     %rbx,%rbp
            0x00007fbbcd227f36: mov     %rsi,0x38(%rsp)
  0.50%     0x00007fbbcd227f3b: mov     %r9,0x30(%rsp)
            0x00007fbbcd227f40: mov     %r11,0x20(%rsp)
            0x00007fbbcd227f45: mov     %r14,0x18(%rsp)
            0x00007fbbcd227f4a: mov     %edi,(%rsp)
  0.40%     0x00007fbbcd227f4d: mov     %r8d,0x8(%rsp)
            0x00007fbbcd227f52: mov     0x60(%r15),%r10
            0x00007fbbcd227f56: shl     $0x2,%rcx
            0x00007fbbcd227f5a: add     $0x17,%rcx
  0.50%     0x00007fbbcd227f5e: mov     %rcx,%r11
            0x00007fbbcd227f61: and     $0xfffffffffffffff8,%r11
            0x00007fbbcd227f65: mov     %r10,%r8
            0x00007fbbcd227f68: add     %r11,%r8
  0.50%     0x00007fbbcd227f6b: cmp     0x70(%r15),%r8
            0x00007fbbcd227f6f: jnb     0x7fbbcd228586
  0.10%     0x00007fbbcd227f75: mov     %r8,0x60(%r15)
            0x00007fbbcd227f79: prefetchnta 0x100(%r8)
            0x00007fbbcd227f81: movq    $0x1,(%r10)
  0.20%     0x00007fbbcd227f88: prefetchnta 0x140(%r8)
            0x00007fbbcd227f90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fbbcd227f98: mov     %edx,0xc(%r10)
            0x00007fbbcd227f9c: prefetchnta 0x180(%r8)
  0.50%     0x00007fbbcd227fa4: mov     %r10,%rdi
            0x00007fbbcd227fa7: add     $0x10,%rdi
            0x00007fbbcd227fab: shr     $0x3,%rcx
            0x00007fbbcd227faf: add     $0xfffffffffffffffe,%rcx
  0.40%     0x00007fbbcd227fb3: xor     %rax,%rax
  0.10%     0x00007fbbcd227fb6: shl     $0x3,%rcx
            0x00007fbbcd227fba: rep stosb (%rdi)
  9.62%     0x00007fbbcd227fbd: mov     %r10,%r11
            0x00007fbbcd227fc0: mov     %rbp,%r8
            0x00007fbbcd227fc3: mov     %r11d,0x20(%rbp)
  0.50%     0x00007fbbcd227fc7: mov     %rbp,%r10
            0x00007fbbcd227fca: shr     $0x9,%r10
            0x00007fbbcd227fce: movabs  $0x7fbbe0d78000,%r11
            0x00007fbbcd227fd8: mov     %r12l,(%r11,%r10)
  0.40%     0x00007fbbcd227fdc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.82%     0x00007fbbcd227fe1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.20%     0x00007fbbcd227fe5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fbbcd228741
            0x00007fbbcd227fe9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.80%     0x00007fbbcd227fee: mov     0x28(%rsp),%r10
            0x00007fbbcd227ff3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fbbcd227ff9: vcvttss2si %xmm0,%r10d
  0.40%     0x00007fbbcd227ffd: cmp     $0x80000000,%r10d
         ╭  0x00007fbbcd228004: jne     0x7fbbcd228016
         │  0x00007fbbcd228006: sub     $0x8,%rsp
         │  0x00007fbbcd22800a: vmovss  %xmm0,(%rsp)
         │  0x00007fbbcd22800f: callq   0x7fbbcd0520a0    ;   {runtime_call}
         │  0x00007fbbcd228014: pop     %r10
         ↘  0x00007fbbcd228016: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fbbcd22801a: mov     0x58(%rsp),%r11
  0.40%     0x00007fbbcd22801f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fbbcd228751
            0x00007fbbcd228023: mov     0x90(%rsp),%ebp
....................................................................................................
 26.75%  <total for region 2>

....[Hottest Regions]...............................................................................
 49.60%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (569 bytes) 
 26.75%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (217 bytes) 
  4.11%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.90%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (16 bytes) 
  0.70%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.50%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.50%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (5 bytes) 
  0.40%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.40%           libjvm.so  SpinPause (0 bytes) 
  0.40%           libjvm.so  StringTable::buckets_unlink_or_oops_do (19 bytes) 
  0.40%        libc-2.31.so  unlink_chunk.isra.0 (20 bytes) 
  0.40%        libc-2.31.so  malloc (0 bytes) 
  0.30%   [kernel.kallsyms]  __perf_event_task_sched_in (0 bytes) 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.30%   [kernel.kallsyms]  mutex_lock (6 bytes) 
  0.30%        libc-2.31.so  malloc_consolidate (21 bytes) 
  0.30%        libc-2.31.so  _int_free (0 bytes) 
  0.30%        libc-2.31.so  malloc (22 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.20%   [kernel.kallsyms]  __perf_event_task_sched_in (4 bytes) 
 12.53%  <...other 113 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 78.16%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 
  4.11%   [kernel.kallsyms]  native_write_msr 
  1.00%        libc-2.31.so  malloc 
  0.70%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.70%        libc-2.31.so  _int_free 
  0.70%        libc-2.31.so  malloc_consolidate 
  0.60%   [kernel.kallsyms]  free_pcppages_bulk 
  0.60%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.60%   [kernel.kallsyms]  release_pages 
  0.50%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.50%        libc-2.31.so  _int_malloc 
  0.50%        libc-2.31.so  unlink_chunk.isra.0 
  0.40%           libjvm.so  SpinPause 
  0.40%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.40%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.30%   [kernel.kallsyms]  mutex_lock 
  0.30%   [kernel.kallsyms]  psi_group_change 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  __mod_node_page_state 
  0.20%   [kernel.kallsyms]  mutex_unlock 
  8.82%  <...other 79 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 78.46%         C2, level 4
 12.63%   [kernel.kallsyms]
  4.41%        libc-2.31.so
  2.81%           libjvm.so
  1.30%    libfcml.so.0.0.0
  0.10%         interpreter
  0.10%           nvidia.ko
  0.10%         C1, level 3
....................................................................................................
 99.90%  <totals>

WARNING: The perf event count is suspiciously low (998). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       642.904          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
