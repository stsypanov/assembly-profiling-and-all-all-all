# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1205.593 ns/op
# Warmup Iteration   2: 682.909 ns/op
# Warmup Iteration   3: 641.425 ns/op
# Warmup Iteration   4: 641.692 ns/op
# Warmup Iteration   5: 647.302 ns/op
Iteration   1: 653.515 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  653.515 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 139727 total address lines.
Perf output processed (skipped 11.962 seconds):
 Column 1: cycles (952 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (569 bytes) 

            0x00007fc951222df9: vcvttss2si %xmm0,%r10d
  0.84%     0x00007fc951222dfd: cmp     $0x80000000,%r10d
         ╭  0x00007fc951222e04: jne     0x7fc951222e16
         │  0x00007fc951222e06: sub     $0x8,%rsp
         │  0x00007fc951222e0a: vmovss  %xmm0,(%rsp)
         │  0x00007fc951222e0f: callq   0x7fc9510520a0    ;   {runtime_call}
         │  0x00007fc951222e14: pop     %r10
         ↘  0x00007fc951222e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fc951222e1a: mov     0x58(%rsp),%r11
  0.32%     0x00007fc951222e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fc951223551
            0x00007fc951222e23: mov     0x90(%rsp),%ebp
            0x00007fc951222e2a: cmp     %r10d,%ebp
            0x00007fc951222e2d: jnb     0x7fc9512233ed
            0x00007fc951222e33: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.21%     0x00007fc951222e38: mov     0x28(%rsp),%r10
            0x00007fc951222e3d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fc951222e41: mov     %r9,%r10
            0x00007fc951222e44: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.42%     0x00007fc951222e46: shr     $0x9,%r10
            0x00007fc951222e4a: movabs  $0x7fc966b06000,%rcx
            0x00007fc951222e54: mov     %r12l,(%rcx,%r10)
            0x00007fc951222e58: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  0.53%     0x00007fc951222e5b: test    %eax,0x17cf819f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fc951222e61: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fc95122356d
            0x00007fc951222e65: cmp     %r10d,%ebp
            0x00007fc951222e68: jnl     0x7fc951223093    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fc951222e6e: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.42%     0x00007fc951222e71: mov     0x8(%rsp),%r8d
            0x00007fc951222e76: mov     (%rsp),%edi
  3.36%     0x00007fc951222e79: mov     0x18(%rsp),%r14
            0x00007fc951222e7e: mov     0x20(%rsp),%r11
            0x00007fc951222e83: mov     0x30(%rsp),%r9
            0x00007fc951222e88: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.53%     0x00007fc951222e8d: mov     0x60(%r15),%rbx
            0x00007fc951222e91: mov     %rbx,%r10
            0x00007fc951222e94: add     $0x28,%r10
            0x00007fc951222e98: cmp     0x70(%r15),%r10
            0x00007fc951222e9c: jnb     0x7fc9512230a2
  0.53%     0x00007fc951222ea2: mov     %r10,0x60(%r15)
            0x00007fc951222ea6: prefetchnta 0x100(%r10)
            0x00007fc951222eae: mov     0xa8(%r11),%r10
            0x00007fc951222eb5: mov     %r10,(%rbx)
  0.84%     0x00007fc951222eb8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fc951222ebf: mov     %r12d,0xc(%rbx)
            0x00007fc951222ec3: mov     %r12,0x10(%rbx)
            0x00007fc951222ec7: mov     %r12,0x18(%rbx)
  0.21%     0x00007fc951222ecb: mov     %r12d,0x20(%rbx)
            0x00007fc951222ecf: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fc951222ed2: mov     0x60(%r15),%rax
            0x00007fc951222ed6: mov     %rax,%r10
  0.84%     0x00007fc951222ed9: add     $0x20,%r10
            0x00007fc951222edd: cmp     0x70(%r15),%r10
            0x00007fc951222ee1: jnb     0x7fc951223128
  0.11%     0x00007fc951222ee7: mov     %r10,0x60(%r15)
            0x00007fc951222eeb: prefetchnta 0x100(%r10)
  0.21%     0x00007fc951222ef3: mov     0xa8(%r14),%r10
            0x00007fc951222efa: mov     %r10,(%rax)
            0x00007fc951222efd: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
  0.32%     0x00007fc951222f04: mov     %r12d,0xc(%rax)
  0.63%     0x00007fc951222f08: mov     %r12,0x10(%rax)
            0x00007fc951222f0c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222f10: mov     %rbx,%rcx
            0x00007fc951222f13: mov     %rax,%r10
  0.74%     0x00007fc951222f16: mov     %r10d,0xc(%rbx)
            0x00007fc951222f1a: shr     $0x9,%rcx
            0x00007fc951222f1e: movabs  $0x7fc966b06000,%r10
            0x00007fc951222f28: mov     %r12l,(%r10,%rcx)
  0.53%     0x00007fc951222f2c: mov     %r12d,0x14(%rbx)
            0x00007fc951222f30: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.02%     0x00007fc951222f35: mov     0x60(%r15),%rdx
            0x00007fc951222f39: mov     %rdx,%r10
            0x00007fc951222f3c: add     $0x18,%r10
  0.42%     0x00007fc951222f40: cmp     0x70(%r15),%r10
            0x00007fc951222f44: jnb     0x7fc9512231b6
            0x00007fc951222f4a: mov     %r10,0x60(%r15)
            0x00007fc951222f4e: prefetchnta 0x100(%r10)
            0x00007fc951222f56: mov     0xa8(%rsi),%r10
  0.63%     0x00007fc951222f5d: mov     %r10,(%rdx)
  0.11%     0x00007fc951222f60: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fc951222f67: mov     %r12d,0xc(%rdx)
            0x00007fc951222f6b: mov     %r12d,0x14(%rdx)
  0.32%     0x00007fc951222f6f: mov     %r13,0x58(%rsp)
            0x00007fc951222f74: mov     %ebp,0x90(%rsp)
            0x00007fc951222f7b: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222f7e: mov     0x60(%r15),%rbp
  0.32%     0x00007fc951222f82: mov     %rbp,%r10
            0x00007fc951222f85: add     $0x20,%r10
            0x00007fc951222f89: cmp     0x70(%r15),%r10
            0x00007fc951222f8d: jnb     0x7fc951223247
            0x00007fc951222f93: mov     %r10,0x60(%r15)
  0.63%     0x00007fc951222f97: prefetchnta 0x100(%r10)
            0x00007fc951222f9f: mov     0xa8(%r9),%r10
            0x00007fc951222fa6: mov     %r10,0x0(%rbp)
            0x00007fc951222faa: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.95%     0x00007fc951222fb1: mov     %r12d,0xc(%rbp)
            0x00007fc951222fb5: mov     %r12,0x10(%rbp)
            0x00007fc951222fb9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222fbd: mov     0x60(%r15),%rax
  0.53%     0x00007fc951222fc1: mov     %rax,%r10
            0x00007fc951222fc4: add     $0x10,%r10
            0x00007fc951222fc8: cmp     0x70(%r15),%r10
            0x00007fc951222fcc: jnb     0x7fc9512232dd
  0.11%     0x00007fc951222fd2: mov     %r10,0x60(%r15)
  0.21%     0x00007fc951222fd6: prefetchnta 0x100(%r10)
  0.21%     0x00007fc951222fde: mov     0x10(%rsp),%r10
            0x00007fc951222fe3: mov     0xa8(%r10),%r10
            0x00007fc951222fea: mov     %r10,(%rax)
  0.95%     0x00007fc951222fed: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fc951222ff4: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222ff8: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222ffb: mov     %rax,%rcx
  0.63%     0x00007fc951222ffe: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951223001: mov     %rbp,%rax
            0x00007fc951223004: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951223007: shr     $0x9,%rax
  0.95%     0x00007fc95122300b: movabs  $0x7fc966b06000,%r13
            0x00007fc951223015: mov     %r12l,0x0(%r13,%rax)
            0x00007fc95122301a: mov     %r12d,0x18(%rbp)
            0x00007fc95122301e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 17.65%     0x00007fc951223023: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951223027: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc95122302b: mov     %rdx,%r10
  0.42%     0x00007fc95122302e: shr     $0x9,%r10
            0x00007fc951223032: movabs  $0x7fc966b06000,%rdx
            0x00007fc95122303c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951223040: mov     %ecx,0x1c(%rbx)
  0.42%     0x00007fc951223043: mov     %rbx,%r10
            0x00007fc951223046: shr     $0x9,%r10
            0x00007fc95122304a: movabs  $0x7fc966b06000,%rcx
            0x00007fc951223054: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007fc951223058: cmp     $0x1,%r8d
            0x00007fc95122305c: jle     0x7fc951222d10    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951223062: mov     $0x1,%r10d
            0x00007fc951223068: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 53.47%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (244 bytes) 

            0x00007fc951222cce: mov     $0x2001833d,%r11d  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fc951222cd4: movabs  $0x0,%r14
  0.11%     0x00007fc951222cde: lea     (%r14,%r11,8),%r14
            0x00007fc951222ce2: mov     $0x2001959f,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fc951222ce8: shl     $0x3,%r11
            0x00007fc951222cec: mov     $0x20000d06,%r9d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fc951222cf2: shl     $0x3,%r9
            0x00007fc951222cf6: mov     $0x200196b2,%ecx  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fc951222cfb: movabs  $0x0,%rsi
            0x00007fc951222d05: lea     (%rsi,%rcx,8),%rsi
  0.11%     0x00007fc951222d09: xor     %ebp,%ebp
            0x00007fc951222d0b: jmpq    0x7fc951222e8d
            0x00007fc951222d10: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222d15: cmp     $0x40000,%edx
            0x00007fc951222d1b: jnbe    0x7fc9512233e5
            0x00007fc951222d21: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.53%     0x00007fc951222d24: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc951222d27: cmp     $0x40000,%edx
            0x00007fc951222d2d: jnbe    0x7fc951223367
            0x00007fc951222d33: mov     %rbx,%rbp
            0x00007fc951222d36: mov     %rsi,0x38(%rsp)
  0.42%     0x00007fc951222d3b: mov     %r9,0x30(%rsp)
            0x00007fc951222d40: mov     %r11,0x20(%rsp)
            0x00007fc951222d45: mov     %r14,0x18(%rsp)
            0x00007fc951222d4a: mov     %edi,(%rsp)
  0.53%     0x00007fc951222d4d: mov     %r8d,0x8(%rsp)
            0x00007fc951222d52: mov     0x60(%r15),%r10
            0x00007fc951222d56: shl     $0x2,%rcx
            0x00007fc951222d5a: add     $0x17,%rcx
  0.53%     0x00007fc951222d5e: mov     %rcx,%r11
            0x00007fc951222d61: and     $0xfffffffffffffff8,%r11
            0x00007fc951222d65: mov     %r10,%r8
            0x00007fc951222d68: add     %r11,%r8
  0.42%     0x00007fc951222d6b: cmp     0x70(%r15),%r8
            0x00007fc951222d6f: jnb     0x7fc951223386
            0x00007fc951222d75: mov     %r8,0x60(%r15)
            0x00007fc951222d79: prefetchnta 0x100(%r8)
            0x00007fc951222d81: movq    $0x1,(%r10)
  0.32%     0x00007fc951222d88: prefetchnta 0x140(%r8)
            0x00007fc951222d90: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fc951222d98: mov     %edx,0xc(%r10)
            0x00007fc951222d9c: prefetchnta 0x180(%r8)
  0.84%     0x00007fc951222da4: mov     %r10,%rdi
            0x00007fc951222da7: add     $0x10,%rdi
            0x00007fc951222dab: shr     $0x3,%rcx
            0x00007fc951222daf: add     $0xfffffffffffffffe,%rcx
  0.63%     0x00007fc951222db3: xor     %rax,%rax
            0x00007fc951222db6: shl     $0x3,%rcx
            0x00007fc951222dba: rep stosb (%rdi)
  9.77%     0x00007fc951222dbd: mov     %r10,%r11
  0.11%     0x00007fc951222dc0: mov     %rbp,%r8
            0x00007fc951222dc3: mov     %r11d,0x20(%rbp)
  0.21%     0x00007fc951222dc7: mov     %rbp,%r10
            0x00007fc951222dca: shr     $0x9,%r10
            0x00007fc951222dce: movabs  $0x7fc966b06000,%r11
            0x00007fc951222dd8: mov     %r12l,(%r11,%r10)
  0.42%     0x00007fc951222ddc: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  8.82%     0x00007fc951222de1: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.21%     0x00007fc951222de5: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fc951223541
            0x00007fc951222de9: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.21%     0x00007fc951222dee: mov     0x28(%rsp),%r10
            0x00007fc951222df3: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fc951222df9: vcvttss2si %xmm0,%r10d
  0.84%     0x00007fc951222dfd: cmp     $0x80000000,%r10d
         ╭  0x00007fc951222e04: jne     0x7fc951222e16
         │  0x00007fc951222e06: sub     $0x8,%rsp
         │  0x00007fc951222e0a: vmovss  %xmm0,(%rsp)
         │  0x00007fc951222e0f: callq   0x7fc9510520a0    ;   {runtime_call}
         │  0x00007fc951222e14: pop     %r10
         ↘  0x00007fc951222e16: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fc951222e1a: mov     0x58(%rsp),%r11
  0.32%     0x00007fc951222e1f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fc951223551
            0x00007fc951222e23: mov     0x90(%rsp),%ebp
....................................................................................................
 24.89%  <total for region 2>

....[Hottest Regions]...............................................................................
 53.47%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (569 bytes) 
 24.89%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (244 bytes) 
  2.73%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.05%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (16 bytes) 
  0.74%   [kernel.kallsyms]  zap_pte_range.isra.0 (37 bytes) 
  0.74%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (47 bytes) 
  0.53%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.42%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.42%   [kernel.kallsyms]  _raw_spin_lock (0 bytes) 
  0.42%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (46 bytes) 
  0.42%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 (8 bytes) 
  0.42%        libc-2.31.so  malloc (0 bytes) 
  0.32%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (16 bytes) 
  0.32%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.32%           libjvm.so  SpinPause (9 bytes) 
  0.32%        libc-2.31.so  __GI___libc_write (2 bytes) 
  0.21%   [kernel.kallsyms]  rcu_read_unlock_strict (6 bytes) 
  0.21%   [kernel.kallsyms]  __mod_zone_page_state (17 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (13 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
 11.55%  <...other 100 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 81.30%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 
  2.73%   [kernel.kallsyms]  native_write_msr 
  1.16%   [kernel.kallsyms]  free_pcppages_bulk 
  0.95%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.74%        libc-2.31.so  malloc 
  0.74%        libc-2.31.so  _int_malloc 
  0.74%        libc-2.31.so  malloc_consolidate 
  0.53%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.42%        libc-2.31.so  __GI___libc_write 
  0.42%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 
  0.42%   [kernel.kallsyms]  _raw_spin_lock 
  0.32%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.32%           libjvm.so  SpinPause 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  0.21%   [kernel.kallsyms]  __mod_zone_page_state 
  0.21%        libc-2.31.so  _int_free 
  0.21%           libjvm.so  fileStream::write 
  0.21%   [kernel.kallsyms]  rcu_read_unlock_strict 
  0.21%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  7.56%  <...other 68 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 81.93%         C2, level 4
 10.19%   [kernel.kallsyms]
  3.26%        libc-2.31.so
  2.84%           libjvm.so
  1.58%    libfcml.so.0.0.0
  0.11%      perf-50345.map
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (952). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       653.515          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
