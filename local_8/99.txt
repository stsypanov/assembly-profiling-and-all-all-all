# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1276.568 ns/op
# Warmup Iteration   2: 734.565 ns/op
# Warmup Iteration   3: 683.578 ns/op
# Warmup Iteration   4: 690.106 ns/op
# Warmup Iteration   5: 691.254 ns/op
Iteration   1: 687.809 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  687.809 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140802 total address lines.
Perf output processed (skipped 11.919 seconds):
 Column 1: cycles (995 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (566 bytes) 

            0x00007f6a5d225a3a: vcvttss2si %xmm0,%r11d
  0.40%     0x00007f6a5d225a3e: cmp     $0x80000000,%r11d
         ╭  0x00007f6a5d225a45: jne     0x7f6a5d225a57
         │  0x00007f6a5d225a47: sub     $0x8,%rsp
         │  0x00007f6a5d225a4b: vmovss  %xmm0,(%rsp)
         │  0x00007f6a5d225a50: callq   0x7f6a5d0520a0    ;   {runtime_call}
         │  0x00007f6a5d225a55: pop     %r11
         ↘  0x00007f6a5d225a57: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f6a5d225a5b: mov     (%rsp),%r11
  5.93%     0x00007f6a5d225a5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f6a5d22617d
  2.91%     0x00007f6a5d225a63: mov     0x88(%rsp),%ebp
            0x00007f6a5d225a6a: cmp     %r10d,%ebp
            0x00007f6a5d225a6d: jnb     0x7f6a5d226051
  1.31%     0x00007f6a5d225a73: lea     0x10(%r11,%rbp,4),%rcx  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
            0x00007f6a5d225a78: mov     0x1c(%r9),%r11d   ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f6a5d225a7c: mov     %rcx,%r10
            0x00007f6a5d225a7f: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.80%     0x00007f6a5d225a81: shr     $0x9,%r10
            0x00007f6a5d225a85: movabs  $0x7f6a70016000,%rbx
            0x00007f6a5d225a8f: mov     %r12l,(%rbx,%r10)
  1.41%     0x00007f6a5d225a93: mov     %r8,%r10
            0x00007f6a5d225a96: mov     %r10d,(%rcx)      ; OopMap{r11=NarrowOop r9=Oop [12]=NarrowOop off=857}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
            0x00007f6a5d225a99: test    %eax,0x15205561(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007f6a5d225a9f: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f6a5d226195
  0.50%     0x00007f6a5d225aa3: cmp     %r8d,%ebp
            0x00007f6a5d225aa6: jnl     0x7f6a5d225cd2    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007f6a5d225aac: mov     %r11,%rbx         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007f6a5d225aaf: mov     0x8(%rsp),%r11d
            0x00007f6a5d225ab4: mov     0xc(%rsp),%r14d
  0.20%     0x00007f6a5d225ab9: mov     0x28(%rsp),%r8
            0x00007f6a5d225abe: mov     0x30(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
            0x00007f6a5d225ac3: mov     0x60(%r15),%rdi
            0x00007f6a5d225ac7: mov     %rdi,%r10
  0.50%     0x00007f6a5d225aca: add     $0x28,%r10
            0x00007f6a5d225ace: cmp     0x70(%r15),%r10
            0x00007f6a5d225ad2: jnb     0x7f6a5d225ce1
            0x00007f6a5d225ad8: mov     %r10,0x60(%r15)
            0x00007f6a5d225adc: prefetchnta 0x100(%r10)
  0.50%     0x00007f6a5d225ae4: mov     0x20(%rsp),%r10
            0x00007f6a5d225ae9: mov     0xa8(%r10),%r10
            0x00007f6a5d225af0: mov     %r10,(%rdi)
  0.10%     0x00007f6a5d225af3: movl    $0x2001959f,0x8(%rdi)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.40%     0x00007f6a5d225afa: mov     %r12d,0xc(%rdi)
            0x00007f6a5d225afe: mov     %r12,0x10(%rdi)
            0x00007f6a5d225b02: mov     %r12,0x18(%rdi)
            0x00007f6a5d225b06: mov     %r12d,0x20(%rdi)
  0.60%     0x00007f6a5d225b0a: mov     %r14d,0x24(%rdi)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007f6a5d225b0e: mov     0x60(%r15),%rax
            0x00007f6a5d225b12: mov     %rax,%r10
            0x00007f6a5d225b15: add     $0x20,%r10
  0.20%     0x00007f6a5d225b19: cmp     0x70(%r15),%r10
            0x00007f6a5d225b1d: jnb     0x7f6a5d225d6f
            0x00007f6a5d225b23: mov     %r10,0x60(%r15)
            0x00007f6a5d225b27: prefetchnta 0x100(%r10)
  0.10%     0x00007f6a5d225b2f: mov     0x18(%rsp),%r10
  0.90%     0x00007f6a5d225b34: mov     0xa8(%r10),%r10
            0x00007f6a5d225b3b: mov     %r10,(%rax)
            0x00007f6a5d225b3e: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007f6a5d225b45: mov     %r12d,0xc(%rax)
  0.70%     0x00007f6a5d225b49: mov     %r12,0x10(%rax)
            0x00007f6a5d225b4d: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225b51: mov     %rdi,%rcx
  0.10%     0x00007f6a5d225b54: mov     %rax,%r10
  0.20%     0x00007f6a5d225b57: mov     %r10d,0xc(%rdi)
            0x00007f6a5d225b5b: shr     $0x9,%rcx
            0x00007f6a5d225b5f: movabs  $0x7f6a70016000,%r10
            0x00007f6a5d225b69: mov     %r12l,(%r10,%rcx)
  0.50%     0x00007f6a5d225b6d: mov     %r12d,0x14(%rdi)
            0x00007f6a5d225b71: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 13.47%     0x00007f6a5d225b76: mov     0x60(%r15),%rdx
            0x00007f6a5d225b7a: mov     %rdx,%r10
            0x00007f6a5d225b7d: add     $0x18,%r10
  0.40%     0x00007f6a5d225b81: cmp     0x70(%r15),%r10
            0x00007f6a5d225b85: jnb     0x7f6a5d225e05
            0x00007f6a5d225b8b: mov     %r10,0x60(%r15)
            0x00007f6a5d225b8f: prefetchnta 0x100(%r10)
            0x00007f6a5d225b97: mov     0xa8(%rsi),%r10
  0.50%     0x00007f6a5d225b9e: mov     %r10,(%rdx)
            0x00007f6a5d225ba1: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f6a5d225ba8: mov     %r12d,0xc(%rdx)
            0x00007f6a5d225bac: mov     %r12d,0x14(%rdx)
  0.30%     0x00007f6a5d225bb0: mov     %ebp,0x88(%rsp)
            0x00007f6a5d225bb7: mov     %r14d,0x10(%rdx)  ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225bbb: mov     0x60(%r15),%rbp
            0x00007f6a5d225bbf: mov     %rbp,%r10
  0.40%     0x00007f6a5d225bc2: add     $0x20,%r10
            0x00007f6a5d225bc6: cmp     0x70(%r15),%r10
            0x00007f6a5d225bca: jnb     0x7f6a5d225e9c
            0x00007f6a5d225bd0: mov     %r10,0x60(%r15)
            0x00007f6a5d225bd4: prefetchnta 0x100(%r10)
  0.40%     0x00007f6a5d225bdc: mov     0xa8(%r8),%r10
            0x00007f6a5d225be3: mov     %r10,0x0(%rbp)
            0x00007f6a5d225be7: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f6a5d225bee: mov     %r12d,0xc(%rbp)
  0.40%     0x00007f6a5d225bf2: mov     %r12,0x10(%rbp)
            0x00007f6a5d225bf6: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225bfa: mov     0x60(%r15),%rax
            0x00007f6a5d225bfe: mov     %rax,%r10
  0.20%     0x00007f6a5d225c01: add     $0x10,%r10
            0x00007f6a5d225c05: cmp     0x70(%r15),%r10
            0x00007f6a5d225c09: jnb     0x7f6a5d225f15
            0x00007f6a5d225c0f: mov     %r10,0x60(%r15)
            0x00007f6a5d225c13: prefetchnta 0x100(%r10)
  0.50%     0x00007f6a5d225c1b: mov     0x10(%rsp),%r10
            0x00007f6a5d225c20: mov     0xa8(%r10),%r10
            0x00007f6a5d225c27: mov     %r10,(%rax)
            0x00007f6a5d225c2a: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.80%     0x00007f6a5d225c31: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225c35: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225c38: mov     %rax,%rcx
            0x00007f6a5d225c3b: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.20%     0x00007f6a5d225c3e: mov     %rbp,%rax
            0x00007f6a5d225c41: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225c44: shr     $0x9,%rax
            0x00007f6a5d225c48: movabs  $0x7f6a70016000,%r13
  0.90%     0x00007f6a5d225c52: mov     %r12l,0x0(%r13,%rax)
            0x00007f6a5d225c57: mov     %r12d,0x18(%rbp)
            0x00007f6a5d225c5b: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 14.07%     0x00007f6a5d225c60: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f6a5d225c64: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225c68: mov     %rdx,%r10
  0.60%     0x00007f6a5d225c6b: shr     $0x9,%r10
            0x00007f6a5d225c6f: movabs  $0x7f6a70016000,%rdx
            0x00007f6a5d225c79: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225c7d: mov     %ecx,0x1c(%rdi)
  0.70%     0x00007f6a5d225c80: mov     %rdi,%r10
            0x00007f6a5d225c83: shr     $0x9,%r10
            0x00007f6a5d225c87: movabs  $0x7f6a70016000,%rcx
            0x00007f6a5d225c91: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.50%     0x00007f6a5d225c95: cmp     $0x1,%r11d
            0x00007f6a5d225c99: jnle    0x7f6a5d225ca5    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6a5d225c9b: mov     $0x1,%edx
            0x00007f6a5d225ca0: jmpq    0x7f6a5d225959    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 52.36%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (93 bytes) 

            0x00007f6a5d2259aa: mov     %r10,%r8
  0.50%     0x00007f6a5d2259ad: add     %r11,%r8
            0x00007f6a5d2259b0: cmp     0x70(%r15),%r8
            0x00007f6a5d2259b4: jnb     0x7f6a5d225f9f
            0x00007f6a5d2259ba: mov     %r8,0x60(%r15)
            0x00007f6a5d2259be: prefetchnta 0x100(%r8)
            0x00007f6a5d2259c6: movq    $0x1,(%r10)
            0x00007f6a5d2259cd: prefetchnta 0x140(%r8)
            0x00007f6a5d2259d5: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007f6a5d2259dd: mov     %edx,0xc(%r10)
  0.60%     0x00007f6a5d2259e1: prefetchnta 0x180(%r8)
            0x00007f6a5d2259e9: mov     %r10,%rdi
            0x00007f6a5d2259ec: add     $0x10,%rdi
            0x00007f6a5d2259f0: shr     $0x3,%rcx
  0.50%     0x00007f6a5d2259f4: add     $0xfffffffffffffffe,%rcx
            0x00007f6a5d2259f8: xor     %rax,%rax
            0x00007f6a5d2259fb: shl     $0x3,%rcx
            0x00007f6a5d2259ff: rep stosb (%rdi)
  7.94%     0x00007f6a5d225a02: mov     0x38(%rsp),%r8
  0.40%     0x00007f6a5d225a07: mov     %r10d,0x20(%r8)
            0x00007f6a5d225a0b: mov     %r8,%r10
  0.70%     0x00007f6a5d225a0e: shr     $0x9,%r10
            0x00007f6a5d225a12: movabs  $0x7f6a70016000,%r11
  0.10%     0x00007f6a5d225a1c: mov     %r12l,(%r11,%r10)
            0x00007f6a5d225a20: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 10.45%     0x00007f6a5d225a25: mov     0x20(%r8),%r11d   ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f6a5d225a29: mov     0xc(%r11),%r10d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f6a5d22616d
            0x00007f6a5d225a2d: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.60%     0x00007f6a5d225a32: mov     %rbp,%r9
            0x00007f6a5d225a35: vmulss  0x14(%rbp),%xmm1,%xmm0
            0x00007f6a5d225a3a: vcvttss2si %xmm0,%r11d
  0.40%     0x00007f6a5d225a3e: cmp     $0x80000000,%r11d
         ╭  0x00007f6a5d225a45: jne     0x7f6a5d225a57
         │  0x00007f6a5d225a47: sub     $0x8,%rsp
         │  0x00007f6a5d225a4b: vmovss  %xmm0,(%rsp)
         │  0x00007f6a5d225a50: callq   0x7f6a5d0520a0    ;   {runtime_call}
         │  0x00007f6a5d225a55: pop     %r11
         ↘  0x00007f6a5d225a57: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f6a5d225a5b: mov     (%rsp),%r11
  5.93%     0x00007f6a5d225a5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007f6a5d22617d
  2.91%     0x00007f6a5d225a63: mov     0x88(%rsp),%ebp
....................................................................................................
 21.81%  <total for region 2>

....[Hottest Regions]...............................................................................
 52.36%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (566 bytes) 
 21.81%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (93 bytes) 
  3.42%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.11%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (131 bytes) 
  1.21%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  1.11%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 (53 bytes) 
  0.80%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.50%           libjvm.so  SpinPause (7 bytes) 
  0.50%        libc-2.31.so  malloc (0 bytes) 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  0.40%    libfcml.so.0.0.0  fcml_fn_coll_list_free (44 bytes) 
  0.40%           libjvm.so  StringTable::buckets_unlink_or_oops_do (19 bytes) 
  0.40%        libc-2.31.so  malloc_consolidate (12 bytes) 
  0.40%        libc-2.31.so  malloc_consolidate (63 bytes) 
  0.30%   [kernel.kallsyms]  __perf_event_task_sched_in (0 bytes) 
  0.30%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 561 (18 bytes) 
  0.30%        libc-2.31.so  unlink_chunk.isra.0 (25 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.20%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 538 (31 bytes) 
 12.46%  <...other 113 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 77.89%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 531 
  3.42%   [kernel.kallsyms]  native_write_msr 
  1.21%        libc-2.31.so  malloc 
  1.21%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  1.01%        libc-2.31.so  _int_malloc 
  0.80%        libc-2.31.so  malloc_consolidate 
  0.80%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.70%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 561 
  0.50%        libc-2.31.so  _int_free 
  0.50%           libjvm.so  SpinPause 
  0.40%    libfcml.so.0.0.0  fcml_fn_coll_list_free 
  0.40%           libjvm.so  StringTable::buckets_unlink_or_oops_do 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.30%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk 
  0.30%        libc-2.31.so  unlink_chunk.isra.0 
  0.30%           libjvm.so  fileStream::write 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.20%        libc-2.31.so  __GI___libc_write 
  0.20%   [kernel.kallsyms]  __mod_zone_page_state 
  8.84%  <...other 76 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 78.79%         C2, level 4
 10.75%   [kernel.kallsyms]
  4.52%        libc-2.31.so
  3.42%           libjvm.so
  2.11%    libfcml.so.0.0.0
  0.20%         interpreter
  0.10%         C1, level 3
....................................................................................................
 99.90%  <totals>

WARNING: The perf event count is suspiciously low (995). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:15

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       687.809          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
