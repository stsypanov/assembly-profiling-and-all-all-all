# JMH version: 1.33
# VM version: JDK 1.8.0_292, OpenJDK 64-Bit Server VM, 25.292-b10
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1202.503 ns/op
# Warmup Iteration   2: 669.727 ns/op
# Warmup Iteration   3: 638.176 ns/op
# Warmup Iteration   4: 639.261 ns/op
# Warmup Iteration   5: 647.886 ns/op
Iteration   1: 648.225 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  648.225 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 140967 total address lines.
Perf output processed (skipped 11.972 seconds):
 Column 1: cycles (941 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (569 bytes) 

            0x00007fa0c9222d39: vcvttss2si %xmm0,%r10d
  0.96%     0x00007fa0c9222d3d: cmp     $0x80000000,%r10d
         ╭  0x00007fa0c9222d44: jne     0x7fa0c9222d56
         │  0x00007fa0c9222d46: sub     $0x8,%rsp
         │  0x00007fa0c9222d4a: vmovss  %xmm0,(%rsp)
         │  0x00007fa0c9222d4f: callq   0x7fa0c90520a0    ;   {runtime_call}
         │  0x00007fa0c9222d54: pop     %r10
         ↘  0x00007fa0c9222d56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa0c9222d5a: mov     0x58(%rsp),%r11
  0.32%     0x00007fa0c9222d5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fa0c9223491
            0x00007fa0c9222d63: mov     0x90(%rsp),%ebp
            0x00007fa0c9222d6a: cmp     %r10d,%ebp
            0x00007fa0c9222d6d: jnb     0x7fa0c922332d
            0x00007fa0c9222d73: lea     0x10(%r11,%rbp,4),%r9  ;*aastore
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@144 (line 184)
  0.53%     0x00007fa0c9222d78: mov     0x28(%rsp),%r10
            0x00007fa0c9222d7d: mov     0x1c(%r10),%r11d  ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
            0x00007fa0c9222d81: mov     %r9,%r10
            0x00007fa0c9222d84: incl    %ebp              ;*iinc
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@145 (line 183)
  0.53%     0x00007fa0c9222d86: shr     $0x9,%r10
            0x00007fa0c9222d8a: movabs  $0x7fa0c87ff000,%rcx
            0x00007fa0c9222d94: mov     %r12l,(%rcx,%r10)
            0x00007fa0c9222d98: mov     %r8d,(%r9)        ; OopMap{r11=NarrowOop [0]=NarrowOop [40]=Oop off=859}
                                                          ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
  1.06%     0x00007fa0c9222d9b: test    %eax,0x14da625f(%rip)  ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
                                                          ;   {poll}
            0x00007fa0c9222da1: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fa0c92234ad
            0x00007fa0c9222da5: cmp     %r10d,%ebp
            0x00007fa0c9222da8: jnl     0x7fa0c9222fd3    ;*if_icmpge
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
            0x00007fa0c9222dae: mov     %r11,%r13         ;*getfield segments
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
  0.64%     0x00007fa0c9222db1: mov     0x8(%rsp),%r8d
            0x00007fa0c9222db6: mov     (%rsp),%edi
  4.04%     0x00007fa0c9222db9: mov     0x18(%rsp),%r14
            0x00007fa0c9222dbe: mov     0x20(%rsp),%r11
            0x00007fa0c9222dc3: mov     0x30(%rsp),%r9
            0x00007fa0c9222dc8: mov     0x38(%rsp),%rsi   ;*aload_0
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@128 (line 184)
  0.53%     0x00007fa0c9222dcd: mov     0x60(%r15),%rbx
            0x00007fa0c9222dd1: mov     %rbx,%r10
            0x00007fa0c9222dd4: add     $0x28,%r10
            0x00007fa0c9222dd8: cmp     0x70(%r15),%r10
            0x00007fa0c9222ddc: jnb     0x7fa0c9222fe2
  0.74%     0x00007fa0c9222de2: mov     %r10,0x60(%r15)
            0x00007fa0c9222de6: prefetchnta 0x100(%r10)
  0.11%     0x00007fa0c9222dee: mov     0xa8(%r11),%r10
            0x00007fa0c9222df5: mov     %r10,(%rbx)
  0.21%     0x00007fa0c9222df8: movl    $0x2001959f,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fa0c9222dff: mov     %r12d,0xc(%rbx)
  0.11%     0x00007fa0c9222e03: mov     %r12,0x10(%rbx)
            0x00007fa0c9222e07: mov     %r12,0x18(%rbx)
  0.21%     0x00007fa0c9222e0b: mov     %r12d,0x20(%rbx)
            0x00007fa0c9222e0f: mov     %edi,0x24(%rbx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
            0x00007fa0c9222e12: mov     0x60(%r15),%rax
            0x00007fa0c9222e16: mov     %rax,%r10
  0.53%     0x00007fa0c9222e19: add     $0x20,%r10
  0.11%     0x00007fa0c9222e1d: cmp     0x70(%r15),%r10
            0x00007fa0c9222e21: jnb     0x7fa0c9223068
            0x00007fa0c9222e27: mov     %r10,0x60(%r15)
            0x00007fa0c9222e2b: prefetchnta 0x100(%r10)
  0.74%     0x00007fa0c9222e33: mov     0xa8(%r14),%r10
  0.11%     0x00007fa0c9222e3a: mov     %r10,(%rax)
            0x00007fa0c9222e3d: movl    $0x2001833d,0x8(%rax)  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fa0c9222e44: mov     %r12d,0xc(%rax)
  0.32%     0x00007fa0c9222e48: mov     %r12,0x10(%rax)
            0x00007fa0c9222e4c: mov     %r12,0x18(%rax)   ;*new  ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@5 (line 257)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007fa0c9222e50: mov     %rbx,%rcx
            0x00007fa0c9222e53: mov     %rax,%r10
  0.53%     0x00007fa0c9222e56: mov     %r10d,0xc(%rbx)
            0x00007fa0c9222e5a: shr     $0x9,%rcx
            0x00007fa0c9222e5e: movabs  $0x7fa0c87ff000,%r10
            0x00007fa0c9222e68: mov     %r12l,(%r10,%rcx)
  0.43%     0x00007fa0c9222e6c: mov     %r12d,0x14(%rbx)
            0x00007fa0c9222e70: lock addl $0x0,(%rsp)     ;*putfield count
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 14.56%     0x00007fa0c9222e75: mov     0x60(%r15),%rdx
            0x00007fa0c9222e79: mov     %rdx,%r10
  0.11%     0x00007fa0c9222e7c: add     $0x18,%r10
  0.32%     0x00007fa0c9222e80: cmp     0x70(%r15),%r10
            0x00007fa0c9222e84: jnb     0x7fa0c92230f6
            0x00007fa0c9222e8a: mov     %r10,0x60(%r15)
            0x00007fa0c9222e8e: prefetchnta 0x100(%r10)
            0x00007fa0c9222e96: mov     0xa8(%rsi),%r10
  0.64%     0x00007fa0c9222e9d: mov     %r10,(%rdx)
            0x00007fa0c9222ea0: movl    $0x200196b2,0x8(%rdx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fa0c9222ea7: mov     %r12d,0xc(%rdx)
            0x00007fa0c9222eab: mov     %r12d,0x14(%rdx)
  0.43%     0x00007fa0c9222eaf: mov     %r13,0x58(%rsp)
            0x00007fa0c9222eb4: mov     %ebp,0x90(%rsp)
            0x00007fa0c9222ebb: mov     %edi,0x10(%rdx)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222ebe: mov     0x60(%r15),%rbp
  0.74%     0x00007fa0c9222ec2: mov     %rbp,%r10
            0x00007fa0c9222ec5: add     $0x20,%r10
            0x00007fa0c9222ec9: cmp     0x70(%r15),%r10
            0x00007fa0c9222ecd: jnb     0x7fa0c9223187
            0x00007fa0c9222ed3: mov     %r10,0x60(%r15)
  0.32%     0x00007fa0c9222ed7: prefetchnta 0x100(%r10)
            0x00007fa0c9222edf: mov     0xa8(%r9),%r10
            0x00007fa0c9222ee6: mov     %r10,0x0(%rbp)
            0x00007fa0c9222eea: movl    $0x20000d06,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.21%     0x00007fa0c9222ef1: mov     %r12d,0xc(%rbp)
            0x00007fa0c9222ef5: mov     %r12,0x10(%rbp)
            0x00007fa0c9222ef9: mov     %r12,0x18(%rbp)   ;*new  ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@10 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007fa0c9222efd: mov     0x60(%r15),%rax
  0.53%     0x00007fa0c9222f01: mov     %rax,%r10
            0x00007fa0c9222f04: add     $0x10,%r10
            0x00007fa0c9222f08: cmp     0x70(%r15),%r10
            0x00007fa0c9222f0c: jnb     0x7fa0c922321d
            0x00007fa0c9222f12: mov     %r10,0x60(%r15)
  0.21%     0x00007fa0c9222f16: prefetchnta 0x100(%r10)
            0x00007fa0c9222f1e: mov     0x10(%rsp),%r10
            0x00007fa0c9222f23: mov     0xa8(%r10),%r10
            0x00007fa0c9222f2a: mov     %r10,(%rax)
  1.28%     0x00007fa0c9222f2d: movl    $0x200034f1,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fa0c9222f34: mov     %r12d,0xc(%rax)   ;*new  ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222f38: mov     %rbp,%r10         ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222f3b: mov     %rax,%rcx
  0.43%     0x00007fa0c9222f3e: mov     %ecx,0xc(%rbp)    ;*putfield lock
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@13 (line 55)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222f41: mov     %rbp,%rax
            0x00007fa0c9222f44: mov     %rdx,%rcx         ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222f47: shr     $0x9,%rax
  0.96%     0x00007fa0c9222f4b: movabs  $0x7fa0c87ff000,%r13
            0x00007fa0c9222f55: mov     %r12l,0x0(%r13,%rax)
            0x00007fa0c9222f5a: mov     %r12d,0x18(%rbp)
            0x00007fa0c9222f5e: lock addl $0x0,(%rsp)     ;*putfield head
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@18 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 15.41%     0x00007fa0c9222f63: mov     %r10d,0xc(%rdx)   ;*putfield queue
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@17 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.11%     0x00007fa0c9222f67: mov     %r12,0x10(%rbp)   ;*putfield queueLength
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@23 (line 57)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222f6b: mov     %rdx,%r10
  0.64%     0x00007fa0c9222f6e: shr     $0x9,%r10
            0x00007fa0c9222f72: movabs  $0x7fa0c87ff000,%rdx
            0x00007fa0c9222f7c: mov     %r12l,(%rdx,%r10)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@-1 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222f80: mov     %ecx,0x1c(%rbx)
  0.64%     0x00007fa0c9222f83: mov     %rbx,%r10
            0x00007fa0c9222f86: shr     $0x9,%r10
            0x00007fa0c9222f8a: movabs  $0x7fa0c87ff000,%rcx
            0x00007fa0c9222f94: mov     %r12l,(%rcx,%r10)  ;*putfield referenceManager
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@19 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.32%     0x00007fa0c9222f98: cmp     $0x1,%r8d
            0x00007fa0c9222f9c: jle     0x7fa0c9222c50    ;*goto
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222fa2: mov     $0x1,%r10d
            0x00007fa0c9222fa8: xor     %ecx,%ecx         ;*iload_3
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
....................................................................................................
 49.84%  <total for region 1>

....[Hottest Region 2]..............................................................................
C2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (244 bytes) 

            0x00007fa0c9222c0e: mov     $0x2001833d,%r11d  ;   {metadata(&apos;java/util/concurrent/locks/ReentrantLock$NonfairSync&apos;)}
            0x00007fa0c9222c14: movabs  $0x0,%r14
            0x00007fa0c9222c1e: lea     (%r14,%r11,8),%r14
            0x00007fa0c9222c22: mov     $0x2001959f,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
            0x00007fa0c9222c28: shl     $0x3,%r11
            0x00007fa0c9222c2c: mov     $0x20000d06,%r9d  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fa0c9222c32: shl     $0x3,%r9
            0x00007fa0c9222c36: mov     $0x200196b2,%ecx  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fa0c9222c3b: movabs  $0x0,%rsi
            0x00007fa0c9222c45: lea     (%rsi,%rcx,8),%rsi
  0.11%     0x00007fa0c9222c49: xor     %ebp,%ebp
            0x00007fa0c9222c4b: jmpq    0x7fa0c9222dcd
            0x00007fa0c9222c50: mov     $0x1,%edx         ;*ishl
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222c55: cmp     $0x40000,%edx
            0x00007fa0c9222c5b: jnbe    0x7fa0c9223325
            0x00007fa0c9222c61: movsxd  %edx,%rcx         ;*anewarray
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.21%     0x00007fa0c9222c64: mov     %edx,0x10(%rbx)   ;*putfield initialSize
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222c67: cmp     $0x40000,%edx
            0x00007fa0c9222c6d: jnbe    0x7fa0c92232a7
            0x00007fa0c9222c73: mov     %rbx,%rbp
            0x00007fa0c9222c76: mov     %rsi,0x38(%rsp)
  0.64%     0x00007fa0c9222c7b: mov     %r9,0x30(%rsp)
            0x00007fa0c9222c80: mov     %r11,0x20(%rsp)
            0x00007fa0c9222c85: mov     %r14,0x18(%rsp)
            0x00007fa0c9222c8a: mov     %edi,(%rsp)
  0.43%     0x00007fa0c9222c8d: mov     %r8d,0x8(%rsp)
            0x00007fa0c9222c92: mov     0x60(%r15),%r10
            0x00007fa0c9222c96: shl     $0x2,%rcx
            0x00007fa0c9222c9a: add     $0x17,%rcx
  0.64%     0x00007fa0c9222c9e: mov     %rcx,%r11
            0x00007fa0c9222ca1: and     $0xfffffffffffffff8,%r11
            0x00007fa0c9222ca5: mov     %r10,%r8
            0x00007fa0c9222ca8: add     %r11,%r8
  0.74%     0x00007fa0c9222cab: cmp     0x70(%r15),%r8
            0x00007fa0c9222caf: jnb     0x7fa0c92232c6
            0x00007fa0c9222cb5: mov     %r8,0x60(%r15)
            0x00007fa0c9222cb9: prefetchnta 0x100(%r8)
            0x00007fa0c9222cc1: movq    $0x1,(%r10)
  0.43%     0x00007fa0c9222cc8: prefetchnta 0x140(%r8)
            0x00007fa0c9222cd0: movl    $0x20019730,0x8(%r10)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
            0x00007fa0c9222cd8: mov     %edx,0xc(%r10)
            0x00007fa0c9222cdc: prefetchnta 0x180(%r8)
  0.64%     0x00007fa0c9222ce4: mov     %r10,%rdi
            0x00007fa0c9222ce7: add     $0x10,%rdi
            0x00007fa0c9222ceb: shr     $0x3,%rcx
            0x00007fa0c9222cef: add     $0xfffffffffffffffe,%rcx
  0.96%     0x00007fa0c9222cf3: xor     %rax,%rax
            0x00007fa0c9222cf6: shl     $0x3,%rcx
            0x00007fa0c9222cfa: rep stosb (%rdi)
  9.03%     0x00007fa0c9222cfd: mov     %r10,%r11
  0.11%     0x00007fa0c9222d00: mov     %rbp,%r8
            0x00007fa0c9222d03: mov     %r11d,0x20(%rbp)
  0.64%     0x00007fa0c9222d07: mov     %rbp,%r10
            0x00007fa0c9222d0a: shr     $0x9,%r10
            0x00007fa0c9222d0e: movabs  $0x7fa0c87ff000,%r11
            0x00007fa0c9222d18: mov     %r12l,(%r11,%r10)
  0.74%     0x00007fa0c9222d1c: lock addl $0x0,(%rsp)     ;*putfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 12.01%     0x00007fa0c9222d21: mov     0x20(%rbp),%r10d  ;*getfield references
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa0c9222d25: mov     0xc(%r10),%r11d   ;*arraylength
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa0c9223481
            0x00007fa0c9222d29: vcvtsi2ssl %r11d,%xmm1,%xmm1
  0.43%     0x00007fa0c9222d2e: mov     0x28(%rsp),%r10
            0x00007fa0c9222d33: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fa0c9222d39: vcvttss2si %xmm0,%r10d
  0.96%     0x00007fa0c9222d3d: cmp     $0x80000000,%r10d
         ╭  0x00007fa0c9222d44: jne     0x7fa0c9222d56
         │  0x00007fa0c9222d46: sub     $0x8,%rsp
         │  0x00007fa0c9222d4a: vmovss  %xmm0,(%rsp)
         │  0x00007fa0c9222d4f: callq   0x7fa0c90520a0    ;   {runtime_call}
         │  0x00007fa0c9222d54: pop     %r10
         ↘  0x00007fa0c9222d56: mov     %r10d,0x18(%rbp)  ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa0c9222d5a: mov     0x58(%rsp),%r11
  0.32%     0x00007fa0c9222d5f: mov     0xc(%r11),%r10d   ; implicit exception: dispatches to 0x00007fa0c9223491
            0x00007fa0c9222d63: mov     0x90(%rsp),%ebp
....................................................................................................
 28.69%  <total for region 2>

....[Hottest Regions]...............................................................................
 49.84%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (569 bytes) 
 28.69%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (244 bytes) 
  1.91%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.85%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (27 bytes) 
  0.64%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (16 bytes) 
  0.53%   [kernel.kallsyms]  entry_SYSCALL_64 (56 bytes) 
  0.53%        libc-2.31.so  malloc (0 bytes) 
  0.43%   [kernel.kallsyms]  release_pages (41 bytes) 
  0.43%   [kernel.kallsyms]  mutex_unlock (0 bytes) 
  0.43%           libjvm.so  SpinPause (0 bytes) 
  0.43%        libc-2.31.so  malloc_consolidate (18 bytes) 
  0.32%   [kernel.kallsyms]  futex_wait_queue_me (0 bytes) 
  0.32%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 (21 bytes) 
  0.21%   [kernel.kallsyms]  available_idle_cpu (13 bytes) 
  0.21%   [kernel.kallsyms]  enqueue_task_fair (0 bytes) 
  0.21%   [kernel.kallsyms]  __perf_event_task_sched_in (19 bytes) 
  0.21%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.21%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
 12.96%  <...other 112 warm regions...>
....................................................................................................
 99.89%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 80.55%         C2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 
  1.91%   [kernel.kallsyms]  native_write_msr 
  0.85%        libc-2.31.so  malloc 
  0.74%        libc-2.31.so  _int_malloc 
  0.64%   [kernel.kallsyms]  release_pages 
  0.64%        libc-2.31.so  _int_free 
  0.64%        libc-2.31.so  malloc_consolidate 
  0.53%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.43%   [kernel.kallsyms]  mutex_unlock 
  0.43%           libjvm.so  SpinPause 
  0.32%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.32%   [kernel.kallsyms]  free_pcppages_bulk 
  0.32%   [kernel.kallsyms]  futex_wait_queue_me 
  0.32%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.32%         C2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 
  0.32%   [kernel.kallsyms]  enqueue_task_fair 
  0.21%   [kernel.kallsyms]  page_remove_rmap 
  0.21%         C2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  0.21%   [kernel.kallsyms]  free_unref_page_commit 
  0.21%   [kernel.kallsyms]  update_load_avg 
  9.78%  <...other 82 warm methods...>
....................................................................................................
 99.89%  <totals>

....[Distribution by Source]........................................................................
 81.08%         C2, level 4
 10.41%   [kernel.kallsyms]
  3.61%        libc-2.31.so
  2.66%           libjvm.so
  1.38%    libfcml.so.0.0.0
  0.43%  libpthread-2.31.so
  0.21%         interpreter
  0.11%         C1, level 3
....................................................................................................
 99.89%  <totals>

WARNING: The perf event count is suspiciously low (941). The performance data might be
inaccurate or misleading. Try to do the profiling again, or tune up the sampling frequency.
With some profilers on Mac OS X, System Integrity Protection (SIP) may prevent profiling.
In such case, temporarily disabling SIP with 'csrutil disable' might help.


# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       648.225          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
