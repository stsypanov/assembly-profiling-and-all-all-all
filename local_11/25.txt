# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 989.980 ns/op
# Warmup Iteration   2: 547.852 ns/op
# Warmup Iteration   3: 530.391 ns/op
# Warmup Iteration   4: 530.764 ns/op
# Warmup Iteration   5: 532.456 ns/op
Iteration   1: 529.276 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  529.276 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120096 total address lines.
Perf output processed (skipped 11.208 seconds):
 Column 1: cycles (1984 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (262 bytes) 

            0x00007f6e50369b6b: mov     0x8(%rsp),%r8d
            0x00007f6e50369b70: mov     0x10(%rsp),%rbx
         ╭  0x00007f6e50369b75: jmp     0x7f6e50369b84
         │  0x00007f6e50369b77: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f6e50369b7c: add     $0xfffffffffffffff8,%r9
         │  0x00007f6e50369b80: mov     %r9,0x70(%r15)
  0.86%  ↘  0x00007f6e50369b84: movl    $0x0,0x14(%rbx)
            0x00007f6e50369b8b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.65%     0x00007f6e50369b91: mov     0x118(%r15),%r13
  0.10%     0x00007f6e50369b98: mov     %r13,%r10
            0x00007f6e50369b9b: add     $0x18,%r10
  0.91%     0x00007f6e50369b9f: cmp     0x128(%r15),%r10
            0x00007f6e50369ba6: jnb     0x7f6e5036a25a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f6e50369bac: mov     %r10,0x118(%r15)
            0x00007f6e50369bb3: prefetchnta 0x100(%r10)
            0x00007f6e50369bbb: mov     0x18(%rsp),%r10
  0.50%     0x00007f6e50369bc0: mov     0xb8(%r10),%r10
            0x00007f6e50369bc7: mov     %r10,0x0(%r13)
            0x00007f6e50369bcb: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
  0.10%     0x00007f6e50369bd3: movl    $0x0,0xc(%r13)
  0.60%     0x00007f6e50369bdb: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6e50369be3: mov     %r14d,0x10(%r13)
            0x00007f6e50369be7: mov     0x118(%r15),%rcx
            0x00007f6e50369bee: mov     %rcx,%r10
  1.06%     0x00007f6e50369bf1: add     $0x20,%r10
            0x00007f6e50369bf5: cmp     0x128(%r15),%r10
            0x00007f6e50369bfc: jnb     0x7f6e5036a2c5
  0.05%     0x00007f6e50369c02: mov     %r10,0x118(%r15)
            0x00007f6e50369c09: prefetchnta 0x100(%r10)
  0.76%     0x00007f6e50369c11: mov     0xb8(%rsi),%r10
            0x00007f6e50369c18: mov     %r10,(%rcx)
            0x00007f6e50369c1b: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f6e50369c22: movl    $0x0,0xc(%rcx)
  0.71%     0x00007f6e50369c29: movq    $0x0,0x10(%rcx)
            0x00007f6e50369c31: movq    $0x0,0x18(%rcx)
            0x00007f6e50369c39: mov     0x118(%r15),%rax
  0.05%     0x00007f6e50369c40: mov     %rax,%r10
  0.60%     0x00007f6e50369c43: add     $0x10,%r10
            0x00007f6e50369c47: cmp     0x128(%r15),%r10
            0x00007f6e50369c4e: jnb     0x7f6e5036a33a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f6e50369c54: mov     %r10,0x118(%r15)
            0x00007f6e50369c5b: prefetchnta 0x100(%r10)
  0.45%     0x00007f6e50369c63: mov     0x28(%rsp),%r10
            0x00007f6e50369c68: mov     0xb8(%r10),%r10
  0.05%     0x00007f6e50369c6f: mov     %r10,(%rax)
  0.05%     0x00007f6e50369c72: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.91%     0x00007f6e50369c79: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6e50369c80: mov     %rcx,%r9
            0x00007f6e50369c83: mov     %rax,%r10
            0x00007f6e50369c86: mov     %r10d,0xc(%rcx)
  0.66%     0x00007f6e50369c8a: mov     %rax,%r10
            0x00007f6e50369c8d: xor     %r9,%r10
            0x00007f6e50369c90: shr     $0x14,%r10
            0x00007f6e50369c94: test    %r10,%r10
            0x00007f6e50369c97: je      0x7f6e50369d24
            0x00007f6e50369c9d: shr     $0x9,%r9
            0x00007f6e50369ca1: movabs  $0x7f6e63d36000,%rdi
            0x00007f6e50369cab: add     %r9,%rdi
            0x00007f6e50369cae: cmpb    $0x20,(%rdi)
            0x00007f6e50369cb1: je      0x7f6e50369d24
            0x00007f6e50369cb3: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.11%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (33 bytes) 

            0x00007f6e50369fd8: jmp     0x7f6e50369fe7
            0x00007f6e50369fda: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6e50369fdf: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f6e50369fe3: mov     %r10,0x70(%r15)
  0.05%     0x00007f6e50369fe7: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.46%     0x00007f6e50369fed: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f6e50369ff1: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f6e5036a6d8
            0x00007f6e50369ff5: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.55%     0x00007f6e50369ffa: mov     (%rsp),%r10
            0x00007f6e50369ffe: vmulss  0x14(%r10),%xmm0,%xmm1
  0.05%     0x00007f6e5036a004: vcvttss2si %xmm1,%r11d
  0.81%     0x00007f6e5036a008: cmp     $0x80000000,%r11d
         ╭  0x00007f6e5036a00f: jne     0x7f6e5036a021
         │  0x00007f6e5036a011: sub     $0x8,%rsp
         │  0x00007f6e5036a015: vmovss  %xmm1,(%rsp)
         │  0x00007f6e5036a01a: callq   0x7f6e488b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f6e5036a01f: pop     %r11
         ↘  0x00007f6e5036a021: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f6e5036a025: mov     0xc(%rsp),%r11d
  1.01%     0x00007f6e5036a02a: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f6e5036a6e4
            0x00007f6e5036a02e: mov     0x14(%rsp),%r8d
....................................................................................................
 28.02%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (262 bytes) 
 28.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (33 bytes) 
  7.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (231 bytes) 
  4.94%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (158 bytes) 
  3.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (46 bytes) 
  3.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (52 bytes) 
  2.17%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (35 bytes) 
  1.81%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (13 bytes) 
  1.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (65 bytes) 
  1.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (168 bytes) 
  0.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 (36 bytes) 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.35%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.30%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 555 (58 bytes) 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 (17 bytes) 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk (29 bytes) 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 555 (63 bytes) 
  0.20%   [kernel.kallsyms]  finish_task_switch (0 bytes) 
  9.58%  <...other 155 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 86.84%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 525 
  1.81%   [kernel.kallsyms]  native_write_msr 
  0.55%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 555 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.35%        libc-2.31.so  malloc 
  0.35%   [kernel.kallsyms]  free_pcppages_bulk 
  0.35%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%        libc-2.31.so  _int_malloc 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.25%   [kernel.kallsyms]  finish_task_switch 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.20%   [kernel.kallsyms]  release_pages 
  0.20%        libc-2.31.so  _int_free 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%   [kernel.kallsyms]  psi_group_change 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  SpinPause 
  0.15%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%   [kernel.kallsyms]  __schedule 
  6.55%  <...other 110 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.50%         c2, level 4
  6.60%   [kernel.kallsyms]
  2.62%           libjvm.so
  1.92%        libc-2.31.so
  0.81%    libfcml.so.0.0.0
  0.20%           nvidia.ko
  0.10%          ld-2.31.so
  0.10%         interpreter
  0.05%        runtime stub
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       529.276          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
