# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 874.472 ns/op
# Warmup Iteration   2: 529.983 ns/op
# Warmup Iteration   3: 513.507 ns/op
# Warmup Iteration   4: 540.508 ns/op
# Warmup Iteration   5: 531.676 ns/op
Iteration   1: 512.319 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  512.319 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119620 total address lines.
Perf output processed (skipped 11.088 seconds):
 Column 1: cycles (1960 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f2c4036a677: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f2c4036a67b: mov     %r10,0x70(%r15)
            0x00007f2c4036a67f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.05%     0x00007f2c4036a685: mov     0x20(%r8),%r10d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f2c4036a689: mov     0xc(%r10),%r11d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f2c4036ad68
            0x00007f2c4036a68d: vcvtsi2ssl %r11d,%xmm0,%xmm0
  0.92%     0x00007f2c4036a692: mov     (%rsp),%r10
            0x00007f2c4036a696: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f2c4036a69c: vcvttss2si %xmm1,%r10d
  0.56%     0x00007f2c4036a6a0: cmp     $0x80000000,%r10d
         ╭  0x00007f2c4036a6a7: jne     0x7f2c4036a6b9
         │  0x00007f2c4036a6a9: sub     $0x8,%rsp
         │  0x00007f2c4036a6ad: vmovss  %xmm1,(%rsp)
         │  0x00007f2c4036a6b2: callq   0x7f2c388b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f2c4036a6b7: pop     %r10
         ↘  0x00007f2c4036a6b9: mov     %r10d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f2c4036a6bd: mov     0xc(%rsp),%r11d
  0.71%     0x00007f2c4036a6c2: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f2c4036ad74
            0x00007f2c4036a6c6: mov     0x14(%rsp),%r10d
....................................................................................................
 26.68%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (20 bytes) 

            0x00007f2c4036a201: mov     0x10(%rsp),%r13
         ╭  0x00007f2c4036a206: jmp     0x7f2c4036a215
         │  0x00007f2c4036a208: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f2c4036a20d: add     $0xfffffffffffffff8,%r9
         │  0x00007f2c4036a211: mov     %r9,0x70(%r15)
         ↘  0x00007f2c4036a215: movl    $0x0,0x14(%r13)
  0.56%     0x00007f2c4036a21d: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.54%     0x00007f2c4036a223: mov     0x118(%r15),%r14
  0.05%     0x00007f2c4036a22a: mov     %r14,%r8
            0x00007f2c4036a22d: add     $0x18,%r8
  0.92%     0x00007f2c4036a231: cmp     0x128(%r15),%r8
            0x00007f2c4036a238: jnb     0x7f2c4036a8e9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f2c4036a23e: mov     %r8,0x118(%r15)
            0x00007f2c4036a245: prefetchnta 0x100(%r8)
            0x00007f2c4036a24d: mov     0x18(%rsp),%r8
  0.97%     0x00007f2c4036a252: mov     0xb8(%r8),%r8
            0x00007f2c4036a259: mov     %r8,(%r14)
            0x00007f2c4036a25c: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f2c4036a264: movl    $0x0,0xc(%r14)
....................................................................................................
 26.07%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (27 bytes) 
 26.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (20 bytes) 
  9.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (245 bytes) 
  9.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (229 bytes) 
  6.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (201 bytes) 
  2.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (53 bytes) 
  2.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (35 bytes) 
  1.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (18 bytes) 
  1.02%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (19 bytes) 
  0.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (0 bytes) 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (59 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (36 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (36 bytes) 
  0.26%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 (8 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 543 (72 bytes) 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk (14 bytes) 
  9.95%  <...other 149 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 539 
  1.02%   [kernel.kallsyms]  native_write_msr 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.46%        libc-2.31.so  _int_malloc 
  0.46%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.46%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 570 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%        libc-2.31.so  _int_free 
  0.36%        libc-2.31.so  malloc_consolidate 
  0.31%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.26%        libc-2.31.so  malloc 
  0.26%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 543 
  0.20%           libjvm.so  RSHashTableIter::has_next 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%           libjvm.so  SharedRuntime::on_slowpath_allocation_exit 
  0.10%           libjvm.so  Monitor::lock 
  0.10%           libjvm.so  Monitor::ILock 
  5.87%  <...other 103 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.72%         c2, level 4
  4.74%   [kernel.kallsyms]
  2.91%           libjvm.so
  2.35%        libc-2.31.so
  0.97%    libfcml.so.0.0.0
  0.15%         interpreter
  0.05%  libpthread-2.31.so
  0.05%      perf-24752.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       512.319          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
