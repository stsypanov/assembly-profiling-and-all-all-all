# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 822.731 ns/op
# Warmup Iteration   2: 555.895 ns/op
# Warmup Iteration   3: 545.236 ns/op
# Warmup Iteration   4: 541.953 ns/op
# Warmup Iteration   5: 547.848 ns/op
Iteration   1: 549.878 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  549.878 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121749 total address lines.
Perf output processed (skipped 11.029 seconds):
 Column 1: cycles (2001 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (254 bytes) 

            0x00007fa1f836b201: mov     0x10(%rsp),%r13
         ╭  0x00007fa1f836b206: jmp     0x7fa1f836b215
         │  0x00007fa1f836b208: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fa1f836b20d: add     $0xfffffffffffffff8,%r9
         │  0x00007fa1f836b211: mov     %r9,0x70(%r15)
         ↘  0x00007fa1f836b215: movl    $0x0,0x14(%r13)
  1.00%     0x00007fa1f836b21d: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.59%     0x00007fa1f836b223: mov     0x118(%r15),%r14
            0x00007fa1f836b22a: mov     %r14,%r8
            0x00007fa1f836b22d: add     $0x18,%r8
  0.65%     0x00007fa1f836b231: cmp     0x128(%r15),%r8
            0x00007fa1f836b238: jnb     0x7fa1f836b8e9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa1f836b23e: mov     %r8,0x118(%r15)
            0x00007fa1f836b245: prefetchnta 0x100(%r8)
  0.05%     0x00007fa1f836b24d: mov     0x18(%rsp),%r8
  0.65%     0x00007fa1f836b252: mov     0xb8(%r8),%r8
  0.05%     0x00007fa1f836b259: mov     %r8,(%r14)
            0x00007fa1f836b25c: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fa1f836b264: movl    $0x0,0xc(%r14)
  0.80%     0x00007fa1f836b26c: movl    $0x0,0x14(%r14)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa1f836b274: mov     %ebx,0x10(%r14)
            0x00007fa1f836b278: mov     0x118(%r15),%rcx
            0x00007fa1f836b27f: mov     %rcx,%r8
  0.80%     0x00007fa1f836b282: add     $0x20,%r8
            0x00007fa1f836b286: cmp     0x128(%r15),%r8
            0x00007fa1f836b28d: jnb     0x7fa1f836b954
  0.05%     0x00007fa1f836b293: mov     %r8,0x118(%r15)
            0x00007fa1f836b29a: prefetchnta 0x100(%r8)
  1.10%     0x00007fa1f836b2a2: mov     0xb8(%rsi),%r8
            0x00007fa1f836b2a9: mov     %r8,(%rcx)
            0x00007fa1f836b2ac: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fa1f836b2b3: movl    $0x0,0xc(%rcx)
  1.05%     0x00007fa1f836b2ba: movq    $0x0,0x10(%rcx)
            0x00007fa1f836b2c2: movq    $0x0,0x18(%rcx)
            0x00007fa1f836b2ca: mov     0x118(%r15),%rax
            0x00007fa1f836b2d1: mov     %rax,%r8
  0.45%     0x00007fa1f836b2d4: add     $0x10,%r8
  0.05%     0x00007fa1f836b2d8: cmp     0x128(%r15),%r8
            0x00007fa1f836b2df: jnb     0x7fa1f836b9c9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007fa1f836b2e5: mov     %r8,0x118(%r15)
            0x00007fa1f836b2ec: prefetchnta 0x100(%r8)
  0.75%     0x00007fa1f836b2f4: mov     0x28(%rsp),%r8
            0x00007fa1f836b2f9: mov     0xb8(%r8),%r8
            0x00007fa1f836b300: mov     %r8,(%rax)
            0x00007fa1f836b303: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  1.05%     0x00007fa1f836b30a: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa1f836b311: mov     %rcx,%r8
            0x00007fa1f836b314: mov     %rax,%r9
            0x00007fa1f836b317: mov     %r9d,0xc(%rcx)
  0.95%     0x00007fa1f836b31b: mov     %rax,%r9
            0x00007fa1f836b31e: xor     %r8,%r9
            0x00007fa1f836b321: shr     $0x14,%r9
            0x00007fa1f836b325: test    %r9,%r9
            0x00007fa1f836b328: je      0x7fa1f836b3b5
            0x00007fa1f836b32e: shr     $0x9,%r8
            0x00007fa1f836b332: movabs  $0x7fa20e2cb000,%rdi
            0x00007fa1f836b33c: add     %r8,%rdi
            0x00007fa1f836b33f: cmpb    $0x20,(%rdi)
            0x00007fa1f836b342: je      0x7fa1f836b3b5
            0x00007fa1f836b344: mov     0x80(%r15),%r8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.08%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (33 bytes) 

            0x00007fa1f836b670: jmp     0x7fa1f836b67f
            0x00007fa1f836b672: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fa1f836b677: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fa1f836b67b: mov     %r10,0x70(%r15)
  0.05%     0x00007fa1f836b67f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.84%     0x00007fa1f836b685: mov     0x20(%r8),%r10d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007fa1f836b689: mov     0xc(%r10),%r11d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fa1f836bd68
            0x00007fa1f836b68d: vcvtsi2ssl %r11d,%xmm0,%xmm0
  0.35%     0x00007fa1f836b692: mov     (%rsp),%r10
            0x00007fa1f836b696: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007fa1f836b69c: vcvttss2si %xmm1,%r10d
  0.60%     0x00007fa1f836b6a0: cmp     $0x80000000,%r10d
         ╭  0x00007fa1f836b6a7: jne     0x7fa1f836b6b9
         │  0x00007fa1f836b6a9: sub     $0x8,%rsp
         │  0x00007fa1f836b6ad: vmovss  %xmm1,(%rsp)
         │  0x00007fa1f836b6b2: callq   0x7fa1f08b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fa1f836b6b7: pop     %r10
         ↘  0x00007fa1f836b6b9: mov     %r10d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fa1f836b6bd: mov     0xc(%rsp),%r11d
  0.95%     0x00007fa1f836b6c2: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007fa1f836bd74
            0x00007fa1f836b6c6: mov     0x14(%rsp),%r10d
....................................................................................................
 26.99%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (254 bytes) 
 26.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (33 bytes) 
  8.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (229 bytes) 
  5.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (157 bytes) 
  3.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (53 bytes) 
  2.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (55 bytes) 
  2.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (35 bytes) 
  1.50%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (89 bytes) 
  1.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (13 bytes) 
  0.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (0 bytes) 
  0.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (36 bytes) 
  0.50%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (29 bytes) 
  0.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (94 bytes) 
  0.35%        libc-2.31.so  malloc (0 bytes) 
  0.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (32 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 (11 bytes) 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  9.70%  <...other 143 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 
  1.50%   [kernel.kallsyms]  native_write_msr 
  0.85%        libc-2.31.so  malloc 
  0.50%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.50%        libc-2.31.so  malloc_consolidate 
  0.45%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 567 
  0.35%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.20%        libc-2.31.so  _int_malloc 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.20%           libjvm.so  fileStream::write 
  0.15%           libjvm.so  RSHashTableIter::has_next 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 
  0.15%   [kernel.kallsyms]  free_pcppages_bulk 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  SpinPause 
  0.10%           libjvm.so  HeapRegionManager::iterate 
  5.80%  <...other 101 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.26%         c2, level 4
  4.80%   [kernel.kallsyms]
  3.00%           libjvm.so
  2.70%        libc-2.31.so
  0.75%    libfcml.so.0.0.0
  0.15%         interpreter
  0.10%  libpthread-2.31.so
  0.05%              [vdso]
  0.05%              kvm.ko
  0.05%    Unknown, level 0
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       549.878          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
