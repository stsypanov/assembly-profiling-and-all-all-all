# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 919.657 ns/op
# Warmup Iteration   2: 528.950 ns/op
# Warmup Iteration   3: 511.050 ns/op
# Warmup Iteration   4: 508.212 ns/op
# Warmup Iteration   5: 518.550 ns/op
Iteration   1: 509.621 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  509.621 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120792 total address lines.
Perf output processed (skipped 11.176 seconds):
 Column 1: cycles (1934 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcccc36b95f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fcccc36b963: mov     %r10,0x70(%r15)
            0x00007fcccc36b967: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.59%     0x00007fcccc36b96d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fcccc36b971: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fcccc36c058
            0x00007fcccc36b975: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.41%     0x00007fcccc36b97a: mov     (%rsp),%r10
            0x00007fcccc36b97e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007fcccc36b984: vcvttss2si %xmm1,%r11d
  1.09%     0x00007fcccc36b988: cmp     $0x80000000,%r11d
         ╭  0x00007fcccc36b98f: jne     0x7fcccc36b9a1
         │  0x00007fcccc36b991: sub     $0x8,%rsp
         │  0x00007fcccc36b995: vmovss  %xmm1,(%rsp)
         │  0x00007fcccc36b99a: callq   0x7fccc48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fcccc36b99f: pop     %r11
         ↘  0x00007fcccc36b9a1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fcccc36b9a5: mov     0xc(%rsp),%r11d
  0.67%     0x00007fcccc36b9aa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007fcccc36c064
  0.05%     0x00007fcccc36b9ae: mov     0x14(%rsp),%r8d
....................................................................................................
 27.09%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 

            0x00007fcccc36b4eb: mov     0x8(%rsp),%r8d
            0x00007fcccc36b4f0: mov     0x10(%rsp),%rbx
         ╭  0x00007fcccc36b4f5: jmp     0x7fcccc36b504
         │  0x00007fcccc36b4f7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fcccc36b4fc: add     $0xfffffffffffffff8,%r9
         │  0x00007fcccc36b500: mov     %r9,0x70(%r15)
  0.72%  ↘  0x00007fcccc36b504: movl    $0x0,0x14(%rbx)
  0.10%     0x00007fcccc36b50b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.68%     0x00007fcccc36b511: mov     0x118(%r15),%r13
  0.05%     0x00007fcccc36b518: mov     %r13,%r10
            0x00007fcccc36b51b: add     $0x18,%r10
  0.52%     0x00007fcccc36b51f: cmp     0x128(%r15),%r10
            0x00007fcccc36b526: jnb     0x7fcccc36bbda    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fcccc36b52c: mov     %r10,0x118(%r15)
            0x00007fcccc36b533: prefetchnta 0x100(%r10)
            0x00007fcccc36b53b: mov     0x18(%rsp),%r10
  1.34%     0x00007fcccc36b540: mov     0xb8(%r10),%r10
            0x00007fcccc36b547: mov     %r10,0x0(%r13)
            0x00007fcccc36b54b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fcccc36b553: movl    $0x0,0xc(%r13)
....................................................................................................
 25.08%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 
 25.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 
  8.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (231 bytes) 
  8.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (202 bytes) 
  6.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (196 bytes) 
  2.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (52 bytes) 
  2.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (39 bytes) 
  2.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (46 bytes) 
  1.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (116 bytes) 
  1.50%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (13 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (39 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (73 bytes) 
  0.47%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 550 (44 bytes) 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.41%   [kernel.kallsyms]  entry_SYSCALL_64 (41 bytes) 
  0.36%        libc-2.31.so  malloc (0 bytes) 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk (25 bytes) 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 (47 bytes) 
  0.26%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  9.10%  <...other 151 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.23%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 
  1.50%   [kernel.kallsyms]  native_write_msr 
  0.47%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 550 
  0.47%        libc-2.31.so  malloc 
  0.47%   [kernel.kallsyms]  free_pcppages_bulk 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.31%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.26%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.21%        libc-2.31.so  _int_free 
  0.16%        libc-2.31.so  _int_malloc 
  0.16%           libjvm.so  SpinPause 
  0.16%   [kernel.kallsyms]  release_pages 
  0.16%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.16%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.10%   [kernel.kallsyms]  __mod_node_page_state 
  0.10%   [kernel.kallsyms]  mutex_unlock 
  6.15%  <...other 109 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.11%         c2, level 4
  6.10%   [kernel.kallsyms]
  3.05%           libjvm.so
  1.91%        libc-2.31.so
  0.57%    libfcml.so.0.0.0
  0.05%                    
  0.05%        runtime stub
  0.05%              kvm.ko
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       509.621          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
