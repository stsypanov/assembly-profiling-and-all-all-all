# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 891.107 ns/op
# Warmup Iteration   2: 540.644 ns/op
# Warmup Iteration   3: 550.423 ns/op
# Warmup Iteration   4: 591.678 ns/op
# Warmup Iteration   5: 583.941 ns/op
Iteration   1: 580.872 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  580.872 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 122301 total address lines.
Perf output processed (skipped 11.309 seconds):
 Column 1: cycles (1986 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (262 bytes) 

            0x00007f072036b9eb: mov     0x8(%rsp),%r8d
            0x00007f072036b9f0: mov     0x10(%rsp),%rbx
         ╭  0x00007f072036b9f5: jmp     0x7f072036ba04
         │  0x00007f072036b9f7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f072036b9fc: add     $0xfffffffffffffff8,%r9
         │  0x00007f072036ba00: mov     %r9,0x70(%r15)
  0.30%  ↘  0x00007f072036ba04: movl    $0x0,0x14(%rbx)
            0x00007f072036ba0b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.41%     0x00007f072036ba11: mov     0x118(%r15),%r13
            0x00007f072036ba18: mov     %r13,%r10
            0x00007f072036ba1b: add     $0x18,%r10
  0.70%     0x00007f072036ba1f: cmp     0x128(%r15),%r10
            0x00007f072036ba26: jnb     0x7f072036c0da    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f072036ba2c: mov     %r10,0x118(%r15)
            0x00007f072036ba33: prefetchnta 0x100(%r10)
  0.05%     0x00007f072036ba3b: mov     0x18(%rsp),%r10
  0.96%     0x00007f072036ba40: mov     0xb8(%r10),%r10
  0.05%     0x00007f072036ba47: mov     %r10,0x0(%r13)
            0x00007f072036ba4b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f072036ba53: movl    $0x0,0xc(%r13)
  0.86%     0x00007f072036ba5b: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f072036ba63: mov     %r14d,0x10(%r13)
            0x00007f072036ba67: mov     0x118(%r15),%rcx
            0x00007f072036ba6e: mov     %rcx,%r10
  0.55%     0x00007f072036ba71: add     $0x20,%r10
            0x00007f072036ba75: cmp     0x128(%r15),%r10
            0x00007f072036ba7c: jnb     0x7f072036c145
            0x00007f072036ba82: mov     %r10,0x118(%r15)
            0x00007f072036ba89: prefetchnta 0x100(%r10)
  0.55%     0x00007f072036ba91: mov     0xb8(%rsi),%r10
  0.05%     0x00007f072036ba98: mov     %r10,(%rcx)
            0x00007f072036ba9b: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f072036baa2: movl    $0x0,0xc(%rcx)
  0.86%     0x00007f072036baa9: movq    $0x0,0x10(%rcx)
            0x00007f072036bab1: movq    $0x0,0x18(%rcx)
            0x00007f072036bab9: mov     0x118(%r15),%rax
  0.10%     0x00007f072036bac0: mov     %rax,%r10
  0.96%     0x00007f072036bac3: add     $0x10,%r10
            0x00007f072036bac7: cmp     0x128(%r15),%r10
            0x00007f072036bace: jnb     0x7f072036c1ba    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f072036bad4: mov     %r10,0x118(%r15)
            0x00007f072036badb: prefetchnta 0x100(%r10)
  0.96%     0x00007f072036bae3: mov     0x28(%rsp),%r10
            0x00007f072036bae8: mov     0xb8(%r10),%r10
            0x00007f072036baef: mov     %r10,(%rax)
  0.05%     0x00007f072036baf2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.70%     0x00007f072036baf9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f072036bb00: mov     %rcx,%r9
            0x00007f072036bb03: mov     %rax,%r10
  0.05%     0x00007f072036bb06: mov     %r10d,0xc(%rcx)
  0.55%     0x00007f072036bb0a: mov     %rax,%r10
            0x00007f072036bb0d: xor     %r9,%r10
            0x00007f072036bb10: shr     $0x14,%r10
            0x00007f072036bb14: test    %r10,%r10
            0x00007f072036bb17: je      0x7f072036bba4
            0x00007f072036bb1d: shr     $0x9,%r9
            0x00007f072036bb21: movabs  $0x7f0735545000,%rdi
            0x00007f072036bb2b: add     %r9,%rdi
            0x00007f072036bb2e: cmpb    $0x20,(%rdi)
            0x00007f072036bb31: je      0x7f072036bba4
            0x00007f072036bb33: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 31.77%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f072036be5f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f072036be63: mov     %r10,0x70(%r15)
            0x00007f072036be67: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 27.64%     0x00007f072036be6d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f072036be71: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f072036c558
            0x00007f072036be75: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.81%     0x00007f072036be7a: mov     (%rsp),%r10
            0x00007f072036be7e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f072036be84: vcvttss2si %xmm1,%r11d
  0.60%     0x00007f072036be88: cmp     $0x80000000,%r11d
         ╭  0x00007f072036be8f: jne     0x7f072036bea1
         │  0x00007f072036be91: sub     $0x8,%rsp
         │  0x00007f072036be95: vmovss  %xmm1,(%rsp)
         │  0x00007f072036be9a: callq   0x7f07188b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f072036be9f: pop     %r11
         ↘  0x00007f072036bea1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f072036bea5: mov     0xc(%rsp),%r11d
  0.70%     0x00007f072036beaa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f072036c564
            0x00007f072036beae: mov     0x14(%rsp),%r8d
....................................................................................................
 29.20%  <total for region 2>

....[Hottest Regions]...............................................................................
 31.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (262 bytes) 
 29.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (27 bytes) 
  8.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (231 bytes) 
  7.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (240 bytes) 
  2.57%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (52 bytes) 
  2.32%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (35 bytes) 
  1.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (13 bytes) 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (76 bytes) 
  0.45%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (88 bytes) 
  0.35%            r8169.ko  rtl8169_interrupt (0 bytes) 
  0.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (46 bytes) 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 (25 bytes) 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 558 (8 bytes) 
  0.25%        libc-2.31.so  malloc_consolidate (17 bytes) 
  0.25%        libc-2.31.so  malloc (0 bytes) 
  0.25%        libc-2.31.so  __memset_avx2_unaligned_erms (19 bytes) 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  9.52%  <...other 159 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 85.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 553 
  2.57%   [kernel.kallsyms]  native_write_msr 
  0.50%   [kernel.kallsyms]  free_pcppages_bulk 
  0.50%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 
  0.45%        libc-2.31.so  malloc 
  0.45%        libc-2.31.so  _int_malloc 
  0.40%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.40%        libc-2.31.so  _int_free 
  0.40%            r8169.ko  rtl8169_interrupt 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 558 
  0.25%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%           libjvm.so  RSHashTableIter::has_next 
  0.15%           libjvm.so  Monitor::ILock 
  0.15%   [kernel.kallsyms]  psi_group_change 
  0.15%   [kernel.kallsyms]  release_pages 
  0.10%           libjvm.so  OptoRuntime::new_instance_C 
  6.29%  <...other 110 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 86.51%         c2, level 4
  6.95%   [kernel.kallsyms]
  2.97%           libjvm.so
  2.06%        libc-2.31.so
  0.55%    libfcml.so.0.0.0
  0.50%            r8169.ko
  0.15%         interpreter
  0.05%          ld-2.31.so
  0.05%         c1, level 3
  0.05%  libpthread-2.31.so
  0.05%           nvidia.ko
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       580.872          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
