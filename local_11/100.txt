# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 950.191 ns/op
# Warmup Iteration   2: 553.928 ns/op
# Warmup Iteration   3: 537.696 ns/op
# Warmup Iteration   4: 535.262 ns/op
# Warmup Iteration   5: 539.793 ns/op
Iteration   1: 536.929 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  536.929 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120408 total address lines.
Perf output processed (skipped 11.147 seconds):
 Column 1: cycles (1955 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (340 bytes) 

            0x00007f9d78369487: callq   %r10
         ╭  0x00007f9d7836948a: jmp     0x7f9d78369499
         │  0x00007f9d7836948c: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │  0x00007f9d78369491: add     $0xfffffffffffffff8,%r10
         │                                                ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │  0x00007f9d78369495: mov     %r10,0x70(%r15)
  0.05%  ↘  0x00007f9d78369499: mov     0x10(%rsp),%r10
            0x00007f9d7836949e: movl    $0x0,0x14(%r10)
  0.15%     0x00007f9d783694a6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 23.99%     0x00007f9d783694ac: mov     0x8(%rsp),%r10
            0x00007f9d783694b1: test    %r10,%r10
            0x00007f9d783694b4: je      0x7f9d78369ad0
            0x00007f9d783694ba: mov     0x118(%r15),%rbx
  0.72%     0x00007f9d783694c1: mov     %rbx,%r10
            0x00007f9d783694c4: add     $0x18,%r10
            0x00007f9d783694c8: cmp     0x128(%r15),%r10
            0x00007f9d783694cf: jnb     0x7f9d78369a50    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f9d783694d5: mov     %r10,0x118(%r15)
  0.56%     0x00007f9d783694dc: prefetchnta 0x100(%r10)
  0.05%     0x00007f9d783694e4: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f9d783694ea: movabs  $0x800000000,%r10
            0x00007f9d783694f4: lea     (%r10,%r11,8),%r10
  0.82%     0x00007f9d783694f8: mov     0xb8(%r10),%r10
            0x00007f9d783694ff: mov     %r10,(%rbx)
            0x00007f9d78369502: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f9d78369509: movl    $0x0,0xc(%rbx)
  0.66%     0x00007f9d78369510: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
            0x00007f9d78369517: mov     0x8(%rsp),%r10
  0.05%     0x00007f9d7836951c: mov     %r10,%r11
            0x00007f9d7836951f: mov     %r11d,0x10(%rbx)
  0.87%     0x00007f9d78369523: mov     0x118(%r15),%rbp
            0x00007f9d7836952a: mov     %rbp,%r10
            0x00007f9d7836952d: add     $0x20,%r10
            0x00007f9d78369531: cmp     0x128(%r15),%r10
            0x00007f9d78369538: jnb     0x7f9d78369a68
  0.66%     0x00007f9d7836953e: mov     %r10,0x118(%r15)
            0x00007f9d78369545: prefetchnta 0x100(%r10)
            0x00007f9d7836954d: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f9d78369553: movabs  $0x800000000,%r10
  0.51%     0x00007f9d7836955d: lea     (%r10,%r11,8),%r10
            0x00007f9d78369561: mov     0xb8(%r10),%r10
            0x00007f9d78369568: mov     %r10,0x0(%rbp)
            0x00007f9d7836956c: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.56%     0x00007f9d78369573: movl    $0x0,0xc(%rbp)
            0x00007f9d7836957a: movq    $0x0,0x10(%rbp)
            0x00007f9d78369582: movq    $0x0,0x18(%rbp)
            0x00007f9d7836958a: mov     0x118(%r15),%rax
  0.72%     0x00007f9d78369591: mov     %rax,%r10
            0x00007f9d78369594: add     $0x10,%r10
            0x00007f9d78369598: cmp     0x128(%r15),%r10
            0x00007f9d7836959f: jnb     0x7f9d78369a91    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f9d783695a5: mov     %r10,0x118(%r15)
  1.02%     0x00007f9d783695ac: prefetchnta 0x100(%r10)
  0.05%     0x00007f9d783695b4: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f9d783695ba: movabs  $0x800000000,%r10
            0x00007f9d783695c4: lea     (%r10,%r11,8),%r10
  0.31%     0x00007f9d783695c8: mov     0xb8(%r10),%r10
  0.10%     0x00007f9d783695cf: mov     %r10,(%rax)
            0x00007f9d783695d2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f9d783695d9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.51%     0x00007f9d783695e0: mov     %rbp,%r10
            0x00007f9d783695e3: mov     %rax,%r8
            0x00007f9d783695e6: mov     %r8d,0xc(%rbp)
            0x00007f9d783695ea: mov     %rax,%r11
  0.92%     0x00007f9d783695ed: xor     %r10,%r11
            0x00007f9d783695f0: shr     $0x14,%r11
            0x00007f9d783695f4: test    %r11,%r11
            0x00007f9d783695f7: je      0x7f9d7836964c
            0x00007f9d783695f9: shr     $0x9,%r10
            0x00007f9d783695fd: movabs  $0x7f9d8bc46000,%rdi
            0x00007f9d78369607: add     %r10,%rdi
            0x00007f9d7836960a: cmpb    $0x20,(%rdi)
            0x00007f9d7836960d: je      0x7f9d7836964c
            0x00007f9d7836960f: mov     0x70(%r15),%r10
            0x00007f9d78369613: mov     0x80(%r15),%r11
....................................................................................................
 33.30%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (29 bytes) 

            0x00007f9d78369883: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
            0x00007f9d78369888: add     $0xfffffffffffffff8,%r10
                                                          ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f9d7836988c: mov     %r10,0x70(%r15)
            0x00007f9d78369890: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 15.70%     0x00007f9d78369896: mov     0x10(%rsp),%r10
            0x00007f9d7836989b: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
  0.05%     0x00007f9d7836989f: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; implicit exception: dispatches to 0x00007f9d78369b60
  0.51%     0x00007f9d783698a3: vcvtsi2ssl %r10d,%xmm1,%xmm1
            0x00007f9d783698a8: mov     0x8(%rsp),%r10
            0x00007f9d783698ad: vmulss  0x14(%r10),%xmm1,%xmm0
  0.66%     0x00007f9d783698b3: vcvttss2si %xmm0,%r11d
            0x00007f9d783698b7: cmp     $0x80000000,%r11d
         ╭  0x00007f9d783698be: jne     0x7f9d783698d0
         │  0x00007f9d783698c0: sub     $0x8,%rsp
         │  0x00007f9d783698c4: vmovss  %xmm0,(%rsp)
         │  0x00007f9d783698c9: callq   0x7f9d708b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f9d783698ce: pop     %r11
         ↘  0x00007f9d783698d0: mov     0x10(%rsp),%r10
  0.72%     0x00007f9d783698d5: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
....................................................................................................
 16.93%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (340 bytes) 
 16.93%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (29 bytes) 
  9.82%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (256 bytes) 
  6.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (111 bytes) 
  4.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (67 bytes) 
  4.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (140 bytes) 
  3.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (93 bytes) 
  2.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (31 bytes) 
  2.40%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (15 bytes) 
  1.99%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (45 bytes) 
  1.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 (16 bytes) 
  0.46%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (32 bytes) 
  0.46%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (37 bytes) 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (15 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.26%           libjvm.so  RSHashTableIter::has_next (13 bytes) 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 (41 bytes) 
  0.20%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (16 bytes) 
  7.93%  <...other 123 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 75.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 521 
 13.71%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  2.40%   [kernel.kallsyms]  native_write_msr 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.36%        libc-2.31.so  malloc 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%           libjvm.so  RSHashTableIter::has_next 
  0.26%        libc-2.31.so  _int_malloc 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%           libjvm.so  HeapRegionRemSetIterator::HeapRegionRemSetIterator 
  0.15%   [kernel.kallsyms]  update_rq_clock 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.15%        libc-2.31.so  _int_free 
  0.15%           libjvm.so  fileStream::write 
  0.10%   [kernel.kallsyms]  page_remove_rmap 
  0.10%   [kernel.kallsyms]  mutex_lock 
  4.86%  <...other 81 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 89.10%         c2, level 4
  5.32%   [kernel.kallsyms]
  3.22%           libjvm.so
  1.79%        libc-2.31.so
  0.36%    libfcml.so.0.0.0
  0.10%              [vdso]
  0.05%         interpreter
  0.05%      perf-27305.map
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       536.929          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
