# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 962.059 ns/op
# Warmup Iteration   2: 532.544 ns/op
# Warmup Iteration   3: 530.661 ns/op
# Warmup Iteration   4: 529.319 ns/op
# Warmup Iteration   5: 534.513 ns/op
Iteration   1: 528.389 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  528.389 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120332 total address lines.
Perf output processed (skipped 11.235 seconds):
 Column 1: cycles (1932 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (338 bytes) 

            0x00007f885036ab04: callq   %r10
         ╭  0x00007f885036ab07: jmp     0x7f885036ab16
         │  0x00007f885036ab09: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │  0x00007f885036ab0e: add     $0xfffffffffffffff8,%r10
         │                                                ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │  0x00007f885036ab12: mov     %r10,0x70(%r15)
  0.72%  ↘  0x00007f885036ab16: mov     0x10(%rsp),%r10
  0.05%     0x00007f885036ab1b: movl    $0x0,0x14(%r10)
  0.16%     0x00007f885036ab23: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 25.31%     0x00007f885036ab29: mov     (%rsp),%r10
  0.05%     0x00007f885036ab2d: test    %r10,%r10
            0x00007f885036ab30: je      0x7f885036b140
            0x00007f885036ab36: mov     0x118(%r15),%rbx
  0.57%     0x00007f885036ab3d: mov     %rbx,%r10
            0x00007f885036ab40: add     $0x18,%r10
            0x00007f885036ab44: cmp     0x128(%r15),%r10
            0x00007f885036ab4b: jnb     0x7f885036b0c0    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f885036ab51: mov     %r10,0x118(%r15)
  0.72%     0x00007f885036ab58: prefetchnta 0x100(%r10)
            0x00007f885036ab60: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f885036ab66: movabs  $0x800000000,%r10
            0x00007f885036ab70: lea     (%r10,%r11,8),%r10
  0.41%     0x00007f885036ab74: mov     0xb8(%r10),%r10
  0.10%     0x00007f885036ab7b: mov     %r10,(%rbx)
            0x00007f885036ab7e: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f885036ab85: movl    $0x0,0xc(%rbx)
  0.88%     0x00007f885036ab8c: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
            0x00007f885036ab93: mov     (%rsp),%r10
            0x00007f885036ab97: mov     %r10,%r11
            0x00007f885036ab9a: mov     %r11d,0x10(%rbx)
  0.93%     0x00007f885036ab9e: mov     0x118(%r15),%rbp
            0x00007f885036aba5: mov     %rbp,%r10
            0x00007f885036aba8: add     $0x20,%r10
            0x00007f885036abac: cmp     0x128(%r15),%r10
            0x00007f885036abb3: jnb     0x7f885036b0d8
  0.98%     0x00007f885036abb9: mov     %r10,0x118(%r15)
            0x00007f885036abc0: prefetchnta 0x100(%r10)
            0x00007f885036abc8: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f885036abce: movabs  $0x800000000,%r10
  1.04%     0x00007f885036abd8: lea     (%r10,%r11,8),%r10
            0x00007f885036abdc: mov     0xb8(%r10),%r10
            0x00007f885036abe3: mov     %r10,0x0(%rbp)
            0x00007f885036abe7: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.47%     0x00007f885036abee: movl    $0x0,0xc(%rbp)
            0x00007f885036abf5: movq    $0x0,0x10(%rbp)
            0x00007f885036abfd: movq    $0x0,0x18(%rbp)
            0x00007f885036ac05: mov     0x118(%r15),%rax
  0.83%     0x00007f885036ac0c: mov     %rax,%r10
            0x00007f885036ac0f: add     $0x10,%r10
            0x00007f885036ac13: cmp     0x128(%r15),%r10
            0x00007f885036ac1a: jnb     0x7f885036b101    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f885036ac20: mov     %r10,0x118(%r15)
  0.57%     0x00007f885036ac27: prefetchnta 0x100(%r10)
  0.05%     0x00007f885036ac2f: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f885036ac35: movabs  $0x800000000,%r10
            0x00007f885036ac3f: lea     (%r10,%r11,8),%r10
  0.31%     0x00007f885036ac43: mov     0xb8(%r10),%r10
            0x00007f885036ac4a: mov     %r10,(%rax)
            0x00007f885036ac4d: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f885036ac54: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.62%     0x00007f885036ac5b: mov     %rbp,%r11
            0x00007f885036ac5e: mov     %rax,%r10
            0x00007f885036ac61: mov     %r10d,0xc(%rbp)
            0x00007f885036ac65: mov     %rax,%r10
  0.67%     0x00007f885036ac68: xor     %r11,%r10
            0x00007f885036ac6b: shr     $0x14,%r10
            0x00007f885036ac6f: test    %r10,%r10
            0x00007f885036ac72: je      0x7f885036acc7
            0x00007f885036ac74: shr     $0x9,%r11
            0x00007f885036ac78: movabs  $0x7f8866904000,%rdi
            0x00007f885036ac82: add     %r11,%rdi
            0x00007f885036ac85: cmpb    $0x20,(%rdi)
            0x00007f885036ac88: je      0x7f885036acc7
            0x00007f885036ac8a: mov     0x70(%r15),%r10
            0x00007f885036ac8e: mov     0x80(%r15),%r11
....................................................................................................
 35.46%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (84 bytes) 

             0x00007f885036af1f: movabs  $0x7f8868a9b290,%r10
             0x00007f885036af29: callq   %r10
         ╭   0x00007f885036af2c: jmp     0x7f885036af3b
         │   0x00007f885036af2e: mov     %rbp,0xfffffffffffffff8(%r11,%r10)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │   0x00007f885036af33: add     $0xfffffffffffffff8,%r10
         │                                                 ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │   0x00007f885036af37: mov     %r10,0x70(%r15)
  0.67%  ↘   0x00007f885036af3b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 15.79%      0x00007f885036af41: mov     0x10(%rsp),%r10
  0.10%      0x00007f885036af46: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
  0.31%      0x00007f885036af4a: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; implicit exception: dispatches to 0x00007f885036b1e0
  0.72%      0x00007f885036af4e: vcvtsi2ssl %r10d,%xmm1,%xmm1
             0x00007f885036af53: mov     (%rsp),%r10
             0x00007f885036af57: vmulss  0x14(%r10),%xmm1,%xmm0
  0.57%      0x00007f885036af5d: vcvttss2si %xmm0,%r11d
             0x00007f885036af61: cmp     $0x80000000,%r11d
          ╭  0x00007f885036af68: jne     0x7f885036af7a
          │  0x00007f885036af6a: sub     $0x8,%rsp
          │  0x00007f885036af6e: vmovss  %xmm0,(%rsp)
          │  0x00007f885036af73: callq   0x7f88488b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007f885036af78: pop     %r11
  0.05%   ↘  0x00007f885036af7a: mov     0x10(%rsp),%r10
  0.67%      0x00007f885036af7f: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
             0x00007f885036af83: add     $0x60,%rsp
             0x00007f885036af87: pop     %rbp
             0x00007f885036af88: mov     0x108(%r15),%r10
  0.72%      0x00007f885036af8f: test    %eax,(%r10)       ;   {poll_return}
             0x00007f885036af92: retq
             0x00007f885036af93: mov     %rsi,0x10(%rsp)
             0x00007f885036af98: mov     0x24(%rsi),%r11d
             0x00007f885036af9c: test    %r11d,%r11d
             0x00007f885036af9f: je      0x7f885036a9b4
             0x00007f885036afa5: mov     0x38(%r15),%r10
             0x00007f885036afa9: mov     %r11,%rdi
             0x00007f885036afac: test    %r10,%r10
             0x00007f885036afaf: je      0x7f885036b154
             0x00007f885036afb5: mov     0x48(%r15),%r11
....................................................................................................
 19.62%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 (247 bytes) 

             0x00007f8850372b9f: callq   %r10
             0x00007f8850372ba2: mov     %ebx,%r10d
             0x00007f8850372ba5: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007f8850372bb0: mov     0x108(%r15),%r8
         ││  0x00007f8850372bb7: mov     0x18(%rsp),%r13
  0.52%  ││  0x00007f8850372bbc: mov     0x1c(%r13),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f8850372bc0: incl    %r10d             ; ImmutableOopMap{r11=NarrowOop r13=Oop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f8850372bc3: test    %eax,(%r8)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
         ││  0x00007f8850372bc6: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f885037313c
  0.67%  ││  0x00007f8850372bca: cmp     %r8d,%r10d
         ││  0x00007f8850372bcd: jnl     0x7f8850372871    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f8850372bd3: mov     0x70(%rsp),%r8
         ││  0x00007f8850372bd8: mov     0x20(%rsp),%r9
         ││  0x00007f8850372bdd: mov     0x10(%rsp),%rbx
  0.83%  ││  0x00007f8850372be2: mov     0x28(%rsp),%ebp
  0.05%  ││  0x00007f8850372be6: mov     0x118(%r15),%rax
         ││  0x00007f8850372bed: mov     %rax,%rcx
         ││  0x00007f8850372bf0: add     $0x28,%rcx
  0.41%  ││  0x00007f8850372bf4: cmp     0x128(%r15),%rcx
         ││  0x00007f8850372bfb: jnb     0x7f8850372d4e    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f8850372c01: mov     %rcx,0x118(%r15)
         ││  0x00007f8850372c08: prefetchnta 0x100(%rcx)
  0.16%  ││  0x00007f8850372c0f: mov     (%rsp),%rdi
  0.52%  ││  0x00007f8850372c13: mov     0xb8(%rdi),%rcx
  0.05%  ││  0x00007f8850372c1a: mov     %rcx,(%rax)
         ││  0x00007f8850372c1d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.05%  ││  0x00007f8850372c24: movl    $0x0,0xc(%rax)
  0.47%  ││  0x00007f8850372c2b: movq    $0x0,0x10(%rax)
         ││  0x00007f8850372c33: movq    $0x0,0x18(%rax)
         ││  0x00007f8850372c3b: movq    $0x0,0x20(%rax)
  0.10%  ││  0x00007f8850372c43: mov     %r8,0x70(%rsp)
  0.47%  ││  0x00007f8850372c48: mov     %r9,0x20(%rsp)
         ││  0x00007f8850372c4d: mov     %rbx,0x10(%rsp)
         ││  0x00007f8850372c52: mov     %r13,0x18(%rsp)
  0.05%  ││  0x00007f8850372c57: mov     %ebp,0x28(%rsp)
  0.98%  ││  0x00007f8850372c5b: mov     %r11d,0x2c(%rsp)
         ││  0x00007f8850372c60: mov     %r10d,0x30(%rsp)
         ││  0x00007f8850372c65: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f8850372c6a: mov     %rax,%rsi
  0.72%  ││  0x00007f8850372c6d: mov     0x18(%rsp),%rdx
  0.36%  ││  0x00007f8850372c72: mov     0x28(%rsp),%ecx
         ││  0x00007f8850372c76: nop
  0.05%  ││  0x00007f8850372c77: callq   0x7f884889d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007f8850372c7c: mov     0x2c(%rsp),%r8d
  1.09%  ││  0x00007f8850372c81: mov     0xc(%r8),%r9d     ; implicit exception: dispatches to 0x00007f8850373130
         ││  0x00007f8850372c85: mov     0x30(%rsp),%r10d
         ││  0x00007f8850372c8a: cmp     %r9d,%r10d
         ││  0x00007f8850372c8d: jnb     0x7f8850372e2a
  0.05%  ││  0x00007f8850372c93: mov     %r8,%r11          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.88%  ││  0x00007f8850372c96: lea     0x10(%r8,%r10,4),%rbx
         ││  0x00007f8850372c9b: cmpb    $0x0,0x30(%r15)
         ││  0x00007f8850372ca0: jne     0x7f8850372d1c
         ││  0x00007f8850372ca2: mov     0x38(%rsp),%r11
  0.57%  ││  0x00007f8850372ca7: mov     %r11,%r8
         ││  0x00007f8850372caa: mov     %r11d,(%rbx)
         ││  0x00007f8850372cad: mov     %rbx,%r11
  0.05%  ││  0x00007f8850372cb0: xor     %r11,%r8
  1.09%  ││  0x00007f8850372cb3: shr     $0x14,%r8
         ││  0x00007f8850372cb7: test    %r8,%r8
         ╰│  0x00007f8850372cba: je      0x7f8850372bb0
          │  0x00007f8850372cc0: shr     $0x9,%r11
          │  0x00007f8850372cc4: movabs  $0x7f8866904000,%rdi
          │  0x00007f8850372cce: add     %r11,%rdi
          │  0x00007f8850372cd1: cmpb    $0x20,(%rdi)
          ╰  0x00007f8850372cd4: je      0x7f8850372bb0
             0x00007f8850372cda: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 10.20%  <total for region 3>

....[Hottest Regions]...............................................................................
 35.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (338 bytes) 
 19.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (84 bytes) 
 10.20%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 (247 bytes) 
  6.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (188 bytes) 
  5.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (140 bytes) 
  4.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (65 bytes) 
  2.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (39 bytes) 
  1.60%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 (26 bytes) 
  1.35%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (15 bytes) 
  0.67%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 (51 bytes) 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 (98 bytes) 
  0.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 (0 bytes) 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 545 (8 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  0.21%           libjvm.so  ObjAllocator::initialize (0 bytes) 
  0.16%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  8.02%  <...other 131 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 75.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 540 
 13.51%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 
  1.35%   [kernel.kallsyms]  native_write_msr 
  0.57%        libc-2.31.so  malloc 
  0.52%   [kernel.kallsyms]  free_pcppages_bulk 
  0.47%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 545 
  0.21%        libc-2.31.so  _int_malloc 
  0.21%   [kernel.kallsyms]  release_pages 
  0.21%           libjvm.so  ObjAllocator::initialize 
  0.16%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.16%        libc-2.31.so  unlink_chunk.isra.0 
  0.16%           libjvm.so  JfrAllocationTracer::JfrAllocationTracer 
  0.16%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.16%        libc-2.31.so  _int_free 
  0.16%        libc-2.31.so  malloc_consolidate 
  0.10%        libc-2.31.so  __strncpy_avx2 
  0.10%           libjvm.so  HeapRegion::report_region_type_change 
  0.10%   [kernel.kallsyms]  lock_page_memcg 
  5.33%  <...other 93 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.44%         c2, level 4
  5.12%   [kernel.kallsyms]
  2.85%           libjvm.so
  1.55%        libc-2.31.so
  0.62%    libfcml.so.0.0.0
  0.21%  libpthread-2.31.so
  0.10%         interpreter
  0.05%              kvm.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       528.389          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
