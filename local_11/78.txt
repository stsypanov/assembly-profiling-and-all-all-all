# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1063.774 ns/op
# Warmup Iteration   2: 520.993 ns/op
# Warmup Iteration   3: 513.594 ns/op
# Warmup Iteration   4: 509.599 ns/op
# Warmup Iteration   5: 512.737 ns/op
Iteration   1: 510.170 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  510.170 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 122478 total address lines.
Perf output processed (skipped 11.206 seconds):
 Column 1: cycles (1965 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (33 bytes) 

            0x00007ff47036c3e7: jmp     0x7ff47036c3f6
            0x00007ff47036c3e9: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff47036c3ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff47036c3f2: mov     %r10,0x70(%r15)
  0.05%     0x00007ff47036c3f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.21%     0x00007ff47036c3fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007ff47036c400: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff47036caf0
            0x00007ff47036c404: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.66%     0x00007ff47036c409: mov     (%rsp),%r10
            0x00007ff47036c40d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007ff47036c413: vcvttss2si %xmm0,%r11d
  0.51%     0x00007ff47036c417: cmp     $0x80000000,%r11d
         ╭  0x00007ff47036c41e: jne     0x7ff47036c430
         │  0x00007ff47036c420: sub     $0x8,%rsp
         │  0x00007ff47036c424: vmovss  %xmm0,(%rsp)
         │  0x00007ff47036c429: callq   0x7ff4688b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007ff47036c42e: pop     %r11
         ↘  0x00007ff47036c430: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff47036c434: mov     0xc(%rsp),%r11d
  1.07%     0x00007ff47036c439: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007ff47036cafc
            0x00007ff47036c43d: mov     0x14(%rsp),%r8d
....................................................................................................
 27.53%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (27 bytes) 

            0x00007ff47036bf7a: mov     0x8(%rsp),%r8d
            0x00007ff47036bf7f: mov     0x10(%rsp),%rbx
         ╭  0x00007ff47036bf84: jmp     0x7ff47036bf93
         │  0x00007ff47036bf86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007ff47036bf8b: add     $0xfffffffffffffff8,%r9
         │  0x00007ff47036bf8f: mov     %r9,0x70(%r15)
  0.76%  ↘  0x00007ff47036bf93: movl    $0x0,0x14(%rbx)
  0.05%     0x00007ff47036bf9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.05%     0x00007ff47036bfa0: mov     0x118(%r15),%r13
            0x00007ff47036bfa7: mov     %r13,%r10
            0x00007ff47036bfaa: add     $0x18,%r10
  0.71%     0x00007ff47036bfae: cmp     0x128(%r15),%r10
            0x00007ff47036bfb5: jnb     0x7ff47036c66a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff47036bfbb: mov     %r10,0x118(%r15)
            0x00007ff47036bfc2: prefetchnta 0x100(%r10)
            0x00007ff47036bfca: mov     0x18(%rsp),%r10
  0.92%     0x00007ff47036bfcf: mov     0xb8(%r10),%r10
            0x00007ff47036bfd6: mov     %r10,0x0(%r13)
            0x00007ff47036bfda: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007ff47036bfe2: movl    $0x0,0xc(%r13)
....................................................................................................
 24.58%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (33 bytes) 
 24.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (27 bytes) 
  9.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (231 bytes) 
  8.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (236 bytes) 
  7.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (202 bytes) 
  3.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (52 bytes) 
  2.60%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (35 bytes) 
  1.98%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (26 bytes) 
  1.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (13 bytes) 
  0.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (68 bytes) 
  0.56%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (41 bytes) 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 (21 bytes) 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 583 (58 bytes) 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk (25 bytes) 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode (1 bytes) 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (0 bytes) 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  8.75%  <...other 139 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.79%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 
  1.98%   [kernel.kallsyms]  native_write_msr 
  0.56%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.51%        libc-2.31.so  _int_malloc 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 583 
  0.31%        libc-2.31.so  malloc 
  0.31%        libc-2.31.so  _int_free 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk 
  0.25%        libc-2.31.so  malloc_consolidate 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.20%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.20%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  0.15%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.15%           libjvm.so  OtherRegionsTable::occupied 
  0.10%        libc-2.31.so  __GI___libc_write 
  0.10%   [kernel.kallsyms]  __perf_event_task_sched_in 
  5.60%  <...other 97 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.50%         c2, level 4
  5.24%   [kernel.kallsyms]
  3.16%           libjvm.so
  2.04%        libc-2.31.so
  0.71%    libfcml.so.0.0.0
  0.15%         interpreter
  0.05%          ld-2.31.so
  0.05%              kvm.ko
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       510.170          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
