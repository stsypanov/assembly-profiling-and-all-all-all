# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 995.646 ns/op
# Warmup Iteration   2: 555.006 ns/op
# Warmup Iteration   3: 531.603 ns/op
# Warmup Iteration   4: 531.161 ns/op
# Warmup Iteration   5: 533.059 ns/op
Iteration   1: 527.924 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  527.924 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121288 total address lines.
Perf output processed (skipped 11.256 seconds):
 Column 1: cycles (1959 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (262 bytes) 

            0x00007f6164368e6b: mov     0x8(%rsp),%r8d
            0x00007f6164368e70: mov     0x10(%rsp),%rbx
         ╭  0x00007f6164368e75: jmp     0x7f6164368e84
         │  0x00007f6164368e77: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f6164368e7c: add     $0xfffffffffffffff8,%r9
         │  0x00007f6164368e80: mov     %r9,0x70(%r15)
  1.12%  ↘  0x00007f6164368e84: movl    $0x0,0x14(%rbx)
            0x00007f6164368e8b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.55%     0x00007f6164368e91: mov     0x118(%r15),%r13
  0.15%     0x00007f6164368e98: mov     %r13,%r10
            0x00007f6164368e9b: add     $0x18,%r10
  0.66%     0x00007f6164368e9f: cmp     0x128(%r15),%r10
            0x00007f6164368ea6: jnb     0x7f616436955a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f6164368eac: mov     %r10,0x118(%r15)
            0x00007f6164368eb3: prefetchnta 0x100(%r10)
  0.05%     0x00007f6164368ebb: mov     0x18(%rsp),%r10
  0.87%     0x00007f6164368ec0: mov     0xb8(%r10),%r10
            0x00007f6164368ec7: mov     %r10,0x0(%r13)
            0x00007f6164368ecb: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f6164368ed3: movl    $0x0,0xc(%r13)
  0.66%     0x00007f6164368edb: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6164368ee3: mov     %r14d,0x10(%r13)
            0x00007f6164368ee7: mov     0x118(%r15),%rcx
            0x00007f6164368eee: mov     %rcx,%r10
  0.46%     0x00007f6164368ef1: add     $0x20,%r10
            0x00007f6164368ef5: cmp     0x128(%r15),%r10
            0x00007f6164368efc: jnb     0x7f61643695c5
            0x00007f6164368f02: mov     %r10,0x118(%r15)
            0x00007f6164368f09: prefetchnta 0x100(%r10)
  1.02%     0x00007f6164368f11: mov     0xb8(%rsi),%r10
            0x00007f6164368f18: mov     %r10,(%rcx)
            0x00007f6164368f1b: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f6164368f22: movl    $0x0,0xc(%rcx)
  0.82%     0x00007f6164368f29: movq    $0x0,0x10(%rcx)
            0x00007f6164368f31: movq    $0x0,0x18(%rcx)
  0.05%     0x00007f6164368f39: mov     0x118(%r15),%rax
            0x00007f6164368f40: mov     %rax,%r10
  0.56%     0x00007f6164368f43: add     $0x10,%r10
            0x00007f6164368f47: cmp     0x128(%r15),%r10
            0x00007f6164368f4e: jnb     0x7f616436963a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f6164368f54: mov     %r10,0x118(%r15)
            0x00007f6164368f5b: prefetchnta 0x100(%r10)
  0.82%     0x00007f6164368f63: mov     0x28(%rsp),%r10
            0x00007f6164368f68: mov     0xb8(%r10),%r10
            0x00007f6164368f6f: mov     %r10,(%rax)
            0x00007f6164368f72: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.82%     0x00007f6164368f79: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6164368f80: mov     %rcx,%r9
            0x00007f6164368f83: mov     %rax,%r10
            0x00007f6164368f86: mov     %r10d,0xc(%rcx)
  0.61%     0x00007f6164368f8a: mov     %rax,%r10
            0x00007f6164368f8d: xor     %r9,%r10
            0x00007f6164368f90: shr     $0x14,%r10
            0x00007f6164368f94: test    %r10,%r10
            0x00007f6164368f97: je      0x7f6164369024
            0x00007f6164368f9d: shr     $0x9,%r9
            0x00007f6164368fa1: movabs  $0x7f6179e55000,%rdi
            0x00007f6164368fab: add     %r9,%rdi
            0x00007f6164368fae: cmpb    $0x20,(%rdi)
            0x00007f6164368fb1: je      0x7f6164369024
            0x00007f6164368fb3: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.23%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f61643692df: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f61643692e3: mov     %r10,0x70(%r15)
            0x00007f61643692e7: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.27%     0x00007f61643692ed: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f61643692f1: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f61643699d8
            0x00007f61643692f5: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.71%     0x00007f61643692fa: mov     (%rsp),%r10
            0x00007f61643692fe: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f6164369304: vcvttss2si %xmm1,%r11d
  0.56%     0x00007f6164369308: cmp     $0x80000000,%r11d
         ╭  0x00007f616436930f: jne     0x7f6164369321
         │  0x00007f6164369311: sub     $0x8,%rsp
         │  0x00007f6164369315: vmovss  %xmm1,(%rsp)
         │  0x00007f616436931a: callq   0x7f615c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f616436931f: pop     %r11
  0.05%  ↘  0x00007f6164369321: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f6164369325: mov     0xc(%rsp),%r11d
  0.71%     0x00007f616436932a: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f61643699e4
            0x00007f616436932e: mov     0x14(%rsp),%r8d
            0x00007f6164369333: cmp     %ecx,%r8d
            0x00007f6164369336: jnb     0x7f616436977c
            0x00007f616436933c: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.41%     0x00007f616436933f: lea     0x10(%r11,%r8,4),%rbx
            0x00007f6164369344: cmpb    $0x0,0x30(%r15)
            0x00007f6164369349: jne     0x7f616436946e
            0x00007f616436934f: mov     %r9,%r11
  0.77%     0x00007f6164369352: mov     %r9,%r10
            0x00007f6164369355: mov     %r10d,(%rbx)
            0x00007f6164369358: mov     %rbx,%r10
            0x00007f616436935b: xor     %r10,%r11
  1.02%     0x00007f616436935e: shr     $0x14,%r11
            0x00007f6164369362: test    %r11,%r11
            0x00007f6164369365: je      0x7f6164368d0b
            0x00007f616436936b: shr     $0x9,%r10
            0x00007f616436936f: movabs  $0x7f6179e55000,%rdi
            0x00007f6164369379: add     %r10,%rdi
            0x00007f616436937c: cmpb    $0x20,(%rdi)
            0x00007f616436937f: je      0x7f6164368d0b
            0x00007f6164369385: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 29.56%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.23%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (262 bytes) 
 29.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (113 bytes) 
  9.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (231 bytes) 
  7.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (250 bytes) 
  2.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (35 bytes) 
  1.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (13 bytes) 
  1.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (105 bytes) 
  1.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (30 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (113 bytes) 
  0.56%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 582 (79 bytes) 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 550 (52 bytes) 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 (4 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (23 bytes) 
  0.26%        libc-2.31.so  __memset_avx2_unaligned_erms (31 bytes) 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.20%        libc-2.31.so  malloc (0 bytes) 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 (29 bytes) 
  0.15%        libc-2.31.so  malloc_consolidate (23 bytes) 
  9.75%  <...other 172 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 
  0.56%   [kernel.kallsyms]  native_write_msr 
  0.51%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 582 
  0.46%        libc-2.31.so  malloc 
  0.41%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 550 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%        libc-2.31.so  _int_free 
  0.31%        libc-2.31.so  _int_malloc 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.26%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%    libfcml.so.0.0.0  fcml_fn_mp_parse_mnemonics 
  0.15%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%   [kernel.kallsyms]  pipe_write 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  0.10%   [kernel.kallsyms]  ksys_write 
  0.10%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.10%        libc-2.31.so  unlink_chunk.isra.0 
  7.04%  <...other 122 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.51%         c2, level 4
  5.00%   [kernel.kallsyms]
  3.37%           libjvm.so
  2.09%        libc-2.31.so
  0.77%    libfcml.so.0.0.0
  0.10%         c1, level 3
  0.05%              kvm.ko
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       527.924          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
