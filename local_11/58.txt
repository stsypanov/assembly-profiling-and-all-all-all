# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 988.805 ns/op
# Warmup Iteration   2: 568.022 ns/op
# Warmup Iteration   3: 554.398 ns/op
# Warmup Iteration   4: 556.058 ns/op
# Warmup Iteration   5: 556.924 ns/op
Iteration   1: 551.991 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  551.991 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119250 total address lines.
Perf output processed (skipped 11.157 seconds):
 Column 1: cycles (1915 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (340 bytes) 

            0x00007fb730367587: callq   %r10
         ╭  0x00007fb73036758a: jmp     0x7fb730367599
         │  0x00007fb73036758c: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │  0x00007fb730367591: add     $0xfffffffffffffff8,%r10
         │                                                ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │  0x00007fb730367595: mov     %r10,0x70(%r15)
  1.04%  ↘  0x00007fb730367599: mov     0x10(%rsp),%r10
            0x00007fb73036759e: movl    $0x0,0x14(%r10)
            0x00007fb7303675a6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 26.06%     0x00007fb7303675ac: mov     0x8(%rsp),%r10
  0.16%     0x00007fb7303675b1: test    %r10,%r10
            0x00007fb7303675b4: je      0x7fb730367bd0
            0x00007fb7303675ba: mov     0x118(%r15),%rbx
  0.73%     0x00007fb7303675c1: mov     %rbx,%r10
            0x00007fb7303675c4: add     $0x18,%r10
            0x00007fb7303675c8: cmp     0x128(%r15),%r10
            0x00007fb7303675cf: jnb     0x7fb730367b50    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007fb7303675d5: mov     %r10,0x118(%r15)
  0.94%     0x00007fb7303675dc: prefetchnta 0x100(%r10)
            0x00007fb7303675e4: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fb7303675ea: movabs  $0x800000000,%r10
            0x00007fb7303675f4: lea     (%r10,%r11,8),%r10
  0.52%     0x00007fb7303675f8: mov     0xb8(%r10),%r10
  0.05%     0x00007fb7303675ff: mov     %r10,(%rbx)
            0x00007fb730367602: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fb730367609: movl    $0x0,0xc(%rbx)
  0.37%     0x00007fb730367610: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.05%     0x00007fb730367617: mov     0x8(%rsp),%r10
            0x00007fb73036761c: mov     %r10,%r11
            0x00007fb73036761f: mov     %r11d,0x10(%rbx)
  0.68%     0x00007fb730367623: mov     0x118(%r15),%rbp
  0.05%     0x00007fb73036762a: mov     %rbp,%r10
            0x00007fb73036762d: add     $0x20,%r10
            0x00007fb730367631: cmp     0x128(%r15),%r10
            0x00007fb730367638: jnb     0x7fb730367b68
  0.73%     0x00007fb73036763e: mov     %r10,0x118(%r15)
            0x00007fb730367645: prefetchnta 0x100(%r10)
  0.05%     0x00007fb73036764d: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fb730367653: movabs  $0x800000000,%r10
  0.99%     0x00007fb73036765d: lea     (%r10,%r11,8),%r10
            0x00007fb730367661: mov     0xb8(%r10),%r10
            0x00007fb730367668: mov     %r10,0x0(%rbp)
            0x00007fb73036766c: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.84%     0x00007fb730367673: movl    $0x0,0xc(%rbp)
  0.05%     0x00007fb73036767a: movq    $0x0,0x10(%rbp)
            0x00007fb730367682: movq    $0x0,0x18(%rbp)
            0x00007fb73036768a: mov     0x118(%r15),%rax
  0.94%     0x00007fb730367691: mov     %rax,%r10
            0x00007fb730367694: add     $0x10,%r10
            0x00007fb730367698: cmp     0x128(%r15),%r10
            0x00007fb73036769f: jnb     0x7fb730367b91    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007fb7303676a5: mov     %r10,0x118(%r15)
  0.52%     0x00007fb7303676ac: prefetchnta 0x100(%r10)
            0x00007fb7303676b4: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fb7303676ba: movabs  $0x800000000,%r10
            0x00007fb7303676c4: lea     (%r10,%r11,8),%r10
  0.73%     0x00007fb7303676c8: mov     0xb8(%r10),%r10
            0x00007fb7303676cf: mov     %r10,(%rax)
            0x00007fb7303676d2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.05%     0x00007fb7303676d9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.57%     0x00007fb7303676e0: mov     %rbp,%r10
            0x00007fb7303676e3: mov     %rax,%r8
            0x00007fb7303676e6: mov     %r8d,0xc(%rbp)
            0x00007fb7303676ea: mov     %rax,%r11
  0.73%     0x00007fb7303676ed: xor     %r10,%r11
            0x00007fb7303676f0: shr     $0x14,%r11
            0x00007fb7303676f4: test    %r11,%r11
            0x00007fb7303676f7: je      0x7fb73036774c
            0x00007fb7303676f9: shr     $0x9,%r10
            0x00007fb7303676fd: movabs  $0x7fb746155000,%rdi
            0x00007fb730367707: add     %r10,%rdi
            0x00007fb73036770a: cmpb    $0x20,(%rdi)
            0x00007fb73036770d: je      0x7fb73036774c
            0x00007fb73036770f: mov     0x70(%r15),%r10
            0x00007fb730367713: mov     0x80(%r15),%r11
....................................................................................................
 36.87%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (82 bytes) 

            0x00007fb730367983: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
            0x00007fb730367988: add     $0xfffffffffffffff8,%r10
                                                          ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007fb73036798c: mov     %r10,0x70(%r15)
            0x00007fb730367990: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 16.34%     0x00007fb730367996: mov     0x10(%rsp),%r10
            0x00007fb73036799b: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
            0x00007fb73036799f: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; implicit exception: dispatches to 0x00007fb730367c60
  0.73%     0x00007fb7303679a3: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.05%     0x00007fb7303679a8: mov     0x8(%rsp),%r10
            0x00007fb7303679ad: vmulss  0x14(%r10),%xmm1,%xmm0
  0.89%     0x00007fb7303679b3: vcvttss2si %xmm0,%r11d
  0.05%     0x00007fb7303679b7: cmp     $0x80000000,%r11d
         ╭  0x00007fb7303679be: jne     0x7fb7303679d0
         │  0x00007fb7303679c0: sub     $0x8,%rsp
         │  0x00007fb7303679c4: vmovss  %xmm0,(%rsp)
         │  0x00007fb7303679c9: callq   0x7fb7288b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fb7303679ce: pop     %r11
         ↘  0x00007fb7303679d0: mov     0x10(%rsp),%r10
  0.68%     0x00007fb7303679d5: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
            0x00007fb7303679d9: add     $0x60,%rsp
            0x00007fb7303679dd: pop     %rbp
  0.05%     0x00007fb7303679de: mov     0x108(%r15),%r10
  0.57%     0x00007fb7303679e5: test    %eax,(%r10)       ;   {poll_return}
  0.05%     0x00007fb7303679e8: retq                      ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
            0x00007fb7303679e9: mov     $0x1,%ebp
            0x00007fb7303679ee: xor     %ecx,%ecx
            0x00007fb7303679f0: movabs  $0x7fb746155000,%r11
            0x00007fb7303679fa: mov     %r11,0x18(%rsp)   ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
            0x00007fb7303679ff: cmp     $0x40000000,%ebp
            0x00007fb730367a05: jnl     0x7fb730367c4d    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 19.43%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (251 bytes) 

             0x00007fb73036f296: callq   %r10
             0x00007fb73036f299: mov     %ebx,%r10d
             0x00007fb73036f29c: nopl    0x0(%rax)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007fb73036f2a0: mov     0x108(%r15),%r8
         ││  0x00007fb73036f2a7: mov     0x18(%rsp),%r13
  0.52%  ││  0x00007fb73036f2ac: mov     0x1c(%r13),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fb73036f2b0: incl    %r10d             ; ImmutableOopMap{r11=NarrowOop r13=Oop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fb73036f2b3: test    %eax,(%r8)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
         ││  0x00007fb73036f2b6: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fb73036f828
  0.73%  ││  0x00007fb73036f2ba: cmp     %r8d,%r10d
         ││  0x00007fb73036f2bd: jnl     0x7fb73036ef71    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.16%  ││  0x00007fb73036f2c3: mov     0x70(%rsp),%r8
         ││  0x00007fb73036f2c8: mov     0x20(%rsp),%r9
         ││  0x00007fb73036f2cd: mov     0x10(%rsp),%rbx
  0.52%  ││  0x00007fb73036f2d2: mov     0x28(%rsp),%ebp
  0.05%  ││  0x00007fb73036f2d6: mov     0x118(%r15),%rax
         ││  0x00007fb73036f2dd: mov     %rax,%rcx
         ││  0x00007fb73036f2e0: add     $0x28,%rcx
  0.63%  ││  0x00007fb73036f2e4: cmp     0x128(%r15),%rcx
         ││  0x00007fb73036f2eb: jnb     0x7fb73036f43e    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fb73036f2f1: mov     %rcx,0x118(%r15)
         ││  0x00007fb73036f2f8: prefetchnta 0x100(%rcx)
  0.05%  ││  0x00007fb73036f2ff: mov     (%rsp),%rdi
  0.73%  ││  0x00007fb73036f303: mov     0xb8(%rdi),%rcx
         ││  0x00007fb73036f30a: mov     %rcx,(%rax)
         ││  0x00007fb73036f30d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.10%  ││  0x00007fb73036f314: movl    $0x0,0xc(%rax)
  0.84%  ││  0x00007fb73036f31b: movq    $0x0,0x10(%rax)
         ││  0x00007fb73036f323: movq    $0x0,0x18(%rax)
         ││  0x00007fb73036f32b: movq    $0x0,0x20(%rax)
  0.10%  ││  0x00007fb73036f333: mov     %r8,0x70(%rsp)
  0.78%  ││  0x00007fb73036f338: mov     %r9,0x20(%rsp)
  0.05%  ││  0x00007fb73036f33d: mov     %rbx,0x10(%rsp)
         ││  0x00007fb73036f342: mov     %r13,0x18(%rsp)
  0.10%  ││  0x00007fb73036f347: mov     %ebp,0x28(%rsp)
  0.73%  ││  0x00007fb73036f34b: mov     %r11d,0x2c(%rsp)
         ││  0x00007fb73036f350: mov     %r10d,0x30(%rsp)
         ││  0x00007fb73036f355: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fb73036f35a: mov     %rax,%rsi
  0.37%  ││  0x00007fb73036f35d: mov     0x18(%rsp),%rdx
  0.68%  ││  0x00007fb73036f362: mov     0x28(%rsp),%ecx
  0.05%  ││  0x00007fb73036f366: nop
  0.05%  ││  0x00007fb73036f367: callq   0x7fb72889d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007fb73036f36c: mov     0x2c(%rsp),%r8d
  0.78%  ││  0x00007fb73036f371: mov     0xc(%r8),%r9d     ; implicit exception: dispatches to 0x00007fb73036f81c
         ││  0x00007fb73036f375: mov     0x30(%rsp),%r10d
         ││  0x00007fb73036f37a: cmp     %r9d,%r10d
         ││  0x00007fb73036f37d: jnb     0x7fb73036f51a
         ││  0x00007fb73036f383: mov     %r8,%r11          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.68%  ││  0x00007fb73036f386: lea     0x10(%r8,%r10,4),%rbx
         ││  0x00007fb73036f38b: cmpb    $0x0,0x30(%r15)
         ││  0x00007fb73036f390: jne     0x7fb73036f40c
         ││  0x00007fb73036f392: mov     0x38(%rsp),%r11
  0.37%  ││  0x00007fb73036f397: mov     %r11,%r8
         ││  0x00007fb73036f39a: mov     %r11d,(%rbx)
  0.05%  ││  0x00007fb73036f39d: mov     %rbx,%r11
         ││  0x00007fb73036f3a0: xor     %r11,%r8
  0.94%  ││  0x00007fb73036f3a3: shr     $0x14,%r8
  0.10%  ││  0x00007fb73036f3a7: test    %r8,%r8
         ╰│  0x00007fb73036f3aa: je      0x7fb73036f2a0
          │  0x00007fb73036f3b0: shr     $0x9,%r11
          │  0x00007fb73036f3b4: movabs  $0x7fb746155000,%rdi
          │  0x00007fb73036f3be: add     %r11,%rdi
          │  0x00007fb73036f3c1: cmpb    $0x20,(%rdi)
          ╰  0x00007fb73036f3c4: je      0x7fb73036f2a0
             0x00007fb73036f3ca: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
....................................................................................................
 10.18%  <total for region 3>

....[Hottest Regions]...............................................................................
 36.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (340 bytes) 
 19.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (82 bytes) 
 10.18%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (251 bytes) 
  8.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (239 bytes) 
  4.60%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (130 bytes) 
  4.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (67 bytes) 
  2.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (39 bytes) 
  1.62%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (26 bytes) 
  1.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 (15 bytes) 
  0.63%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.63%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (55 bytes) 
  0.52%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (67 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 534 (13 bytes) 
  0.26%        libc-2.31.so  _int_free (12 bytes) 
  0.21%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.21%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 (23 bytes) 
  0.21%        libc-2.31.so  malloc_consolidate (20 bytes) 
  0.16%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.16%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  7.78%  <...other 124 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 76.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 525 
 13.47%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 559 
  0.63%   [kernel.kallsyms]  native_write_msr 
  0.57%        libc-2.31.so  _int_malloc 
  0.37%        libc-2.31.so  _int_free 
  0.31%        libc-2.31.so  malloc 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 534 
  0.21%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.16%           libjvm.so  OptoRuntime::new_instance_C 
  0.16%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.16%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.10%  libpthread-2.31.so  pthread_getattr_np 
  0.10%   [kernel.kallsyms]  page_remove_rmap 
  0.10%   [kernel.kallsyms]  clear_page_erms 
  0.10%   [kernel.kallsyms]  free_pcppages_bulk 
  0.10%    libfcml.so.0.0.0  fcml_ifn_dasm_decode_instruction 
  0.10%        libc-2.31.so  unlink_chunk.isra.0 
  5.33%  <...other 89 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.55%         c2, level 4
  3.60%   [kernel.kallsyms]
  2.51%           libjvm.so
  1.98%        libc-2.31.so
  1.04%    libfcml.so.0.0.0
  0.16%         interpreter
  0.10%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       551.991          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
