# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 846.147 ns/op
# Warmup Iteration   2: 531.531 ns/op
# Warmup Iteration   3: 516.773 ns/op
# Warmup Iteration   4: 517.163 ns/op
# Warmup Iteration   5: 517.474 ns/op
Iteration   1: 513.126 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  513.126 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 123514 total address lines.
Perf output processed (skipped 11.276 seconds):
 Column 1: cycles (1933 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9cec36b4df: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9cec36b4e3: mov     %r10,0x70(%r15)
            0x00007f9cec36b4e7: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.09%     0x00007f9cec36b4ed: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f9cec36b4f1: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f9cec36bbd8
            0x00007f9cec36b4f5: vcvtsi2ssl %r10d,%xmm0,%xmm0
  1.03%     0x00007f9cec36b4fa: mov     (%rsp),%r10
            0x00007f9cec36b4fe: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f9cec36b504: vcvttss2si %xmm1,%r11d
  0.83%     0x00007f9cec36b508: cmp     $0x80000000,%r11d
         ╭  0x00007f9cec36b50f: jne     0x7f9cec36b521
         │  0x00007f9cec36b511: sub     $0x8,%rsp
         │  0x00007f9cec36b515: vmovss  %xmm1,(%rsp)
         │  0x00007f9cec36b51a: callq   0x7f9ce48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f9cec36b51f: pop     %r11
         ↘  0x00007f9cec36b521: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f9cec36b525: mov     0xc(%rsp),%r11d
  0.93%     0x00007f9cec36b52a: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f9cec36bbe4
            0x00007f9cec36b52e: mov     0x14(%rsp),%r8d
....................................................................................................
 27.00%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (27 bytes) 

            0x00007f9cec36b06b: mov     0x8(%rsp),%r8d
            0x00007f9cec36b070: mov     0x10(%rsp),%rbx
         ╭  0x00007f9cec36b075: jmp     0x7f9cec36b084
         │  0x00007f9cec36b077: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f9cec36b07c: add     $0xfffffffffffffff8,%r9
         │  0x00007f9cec36b080: mov     %r9,0x70(%r15)
  0.67%  ↘  0x00007f9cec36b084: movl    $0x0,0x14(%rbx)
            0x00007f9cec36b08b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.83%     0x00007f9cec36b091: mov     0x118(%r15),%r13
            0x00007f9cec36b098: mov     %r13,%r10
            0x00007f9cec36b09b: add     $0x18,%r10
  0.57%     0x00007f9cec36b09f: cmp     0x128(%r15),%r10
            0x00007f9cec36b0a6: jnb     0x7f9cec36b75a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9cec36b0ac: mov     %r10,0x118(%r15)
            0x00007f9cec36b0b3: prefetchnta 0x100(%r10)
            0x00007f9cec36b0bb: mov     0x18(%rsp),%r10
  1.14%     0x00007f9cec36b0c0: mov     0xb8(%r10),%r10
            0x00007f9cec36b0c7: mov     %r10,0x0(%r13)
            0x00007f9cec36b0cb: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f9cec36b0d3: movl    $0x0,0xc(%r13)
....................................................................................................
 26.07%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (27 bytes) 
 26.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (27 bytes) 
  8.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (231 bytes) 
  7.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (202 bytes) 
  5.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (158 bytes) 
  3.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (52 bytes) 
  2.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (35 bytes) 
  2.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (43 bytes) 
  1.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (13 bytes) 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (28 bytes) 
  1.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (140 bytes) 
  0.98%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (136 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 (54 bytes) 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  0.31%           libjvm.so  SpinPause (9 bytes) 
  0.31%        libc-2.31.so  malloc (0 bytes) 
  0.26%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 580 (37 bytes) 
  0.21%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  8.12%  <...other 127 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 549 
  0.98%   [kernel.kallsyms]  native_write_msr 
  0.57%        libc-2.31.so  malloc 
  0.52%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 580 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%           libjvm.so  SpinPause 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.26%        libc-2.31.so  _int_malloc 
  0.26%        libc-2.31.so  malloc_consolidate 
  0.21%        libc-2.31.so  unlink_chunk.isra.0 
  0.21%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%        libc-2.31.so  _int_free 
  0.16%           libjvm.so  RSHashTableIter::has_next 
  0.16%   [kernel.kallsyms]  free_pcppages_bulk 
  0.16%           libjvm.so  ConstantPool::impl_signature_ref_at 
  0.16%           libjvm.so  MemAllocator::allocate 
  0.16%   [kernel.kallsyms]  release_pages 
  0.16%           libjvm.so  G1CollectedHeap::attempt_allocation_slow 
  0.10%           libjvm.so  RegisterHumongousWithInCSetFastTestClosure::do_heap_region 
  5.07%  <...other 87 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.02%         c2, level 4
  3.62%   [kernel.kallsyms]
  3.57%           libjvm.so
  1.76%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%         classes.jsa
  0.05%          ld-2.31.so
  0.05%         c1, level 3
  0.05%              [vdso]
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       513.126          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
