# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 939.041 ns/op
# Warmup Iteration   2: 559.569 ns/op
# Warmup Iteration   3: 530.310 ns/op
# Warmup Iteration   4: 531.480 ns/op
# Warmup Iteration   5: 531.926 ns/op
Iteration   1: 533.991 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  533.991 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119252 total address lines.
Perf output processed (skipped 11.185 seconds):
 Column 1: cycles (1975 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fe27436adee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe27436adf2: mov     %r10,0x70(%r15)
            0x00007fe27436adf6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 24.86%     0x00007fe27436adfc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007fe27436ae00: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fe27436b4f0
  0.05%     0x00007fe27436ae04: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.86%     0x00007fe27436ae09: mov     (%rsp),%r10
            0x00007fe27436ae0d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fe27436ae13: vcvttss2si %xmm0,%r11d
  0.56%     0x00007fe27436ae17: cmp     $0x80000000,%r11d
         ╭  0x00007fe27436ae1e: jne     0x7fe27436ae30
         │  0x00007fe27436ae20: sub     $0x8,%rsp
         │  0x00007fe27436ae24: vmovss  %xmm0,(%rsp)
         │  0x00007fe27436ae29: callq   0x7fe26c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fe27436ae2e: pop     %r11
         ↘  0x00007fe27436ae30: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fe27436ae34: mov     0xc(%rsp),%r11d
  0.61%     0x00007fe27436ae39: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007fe27436b4fc
  0.05%     0x00007fe27436ae3d: mov     0x14(%rsp),%r8d
....................................................................................................
 26.43%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (27 bytes) 

            0x00007fe27436a97a: mov     0x8(%rsp),%r8d
            0x00007fe27436a97f: mov     0x10(%rsp),%rbx
         ╭  0x00007fe27436a984: jmp     0x7fe27436a993
         │  0x00007fe27436a986: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fe27436a98b: add     $0xfffffffffffffff8,%r9
         │  0x00007fe27436a98f: mov     %r9,0x70(%r15)
  0.56%  ↘  0x00007fe27436a993: movl    $0x0,0x14(%rbx)
            0x00007fe27436a99a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.65%     0x00007fe27436a9a0: mov     0x118(%r15),%r13
  0.05%     0x00007fe27436a9a7: mov     %r13,%r10
            0x00007fe27436a9aa: add     $0x18,%r10
  0.76%     0x00007fe27436a9ae: cmp     0x128(%r15),%r10
            0x00007fe27436a9b5: jnb     0x7fe27436b06a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fe27436a9bb: mov     %r10,0x118(%r15)
            0x00007fe27436a9c2: prefetchnta 0x100(%r10)
            0x00007fe27436a9ca: mov     0x18(%rsp),%r10
  0.66%     0x00007fe27436a9cf: mov     0xb8(%r10),%r10
            0x00007fe27436a9d6: mov     %r10,0x0(%r13)
            0x00007fe27436a9da: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fe27436a9e2: movl    $0x0,0xc(%r13)
....................................................................................................
 25.01%  <total for region 2>

....[Hottest Regions]...............................................................................
 26.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (27 bytes) 
 25.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (27 bytes) 
  9.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (246 bytes) 
  9.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (231 bytes) 
  6.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (202 bytes) 
  3.24%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  3.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (35 bytes) 
  3.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (56 bytes) 
  1.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (24 bytes) 
  1.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (0 bytes) 
  0.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (19 bytes) 
  0.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (107 bytes) 
  0.61%   [kernel.kallsyms]  syscall_exit_to_user_mode (1 bytes) 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.35%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 (36 bytes) 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 (15 bytes) 
  0.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (32 bytes) 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 542 (65 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 (31 bytes) 
  0.20%           libjvm.so  SpinPause (7 bytes) 
  7.90%  <...other 127 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 
  3.24%   [kernel.kallsyms]  native_write_msr 
  0.61%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.61%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 
  0.41%        libc-2.31.so  malloc 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk 
  0.30%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 542 
  0.25%        libc-2.31.so  malloc_consolidate 
  0.20%           libjvm.so  SpinPause 
  0.20%   [kernel.kallsyms]  release_pages 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%           libjvm.so  Monitor::ILock 
  0.15%   [kernel.kallsyms]  __mod_node_page_state 
  0.15%        libc-2.31.so  _int_malloc 
  0.15%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  0.10%           libjvm.so  RegisterHumongousWithInCSetFastTestClosure::do_heap_region 
  4.91%  <...other 79 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.90%         c2, level 4
  6.99%   [kernel.kallsyms]
  3.14%           libjvm.so
  1.37%        libc-2.31.so
  0.30%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%        runtime stub
  0.05%      libz.so.1.2.11
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       533.991          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
