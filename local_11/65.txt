# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1002.170 ns/op
# Warmup Iteration   2: 543.326 ns/op
# Warmup Iteration   3: 534.882 ns/op
# Warmup Iteration   4: 529.294 ns/op
# Warmup Iteration   5: 543.666 ns/op
Iteration   1: 529.320 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  529.320 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 123891 total address lines.
Perf output processed (skipped 11.344 seconds):
 Column 1: cycles (2018 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (117 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f40d436c55f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f40d436c563: mov     %r10,0x70(%r15)
            0x00007f40d436c567: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.67%     0x00007f40d436c56d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f40d436c571: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f40d436cc58
            0x00007f40d436c575: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.40%     0x00007f40d436c57a: mov     (%rsp),%r10
            0x00007f40d436c57e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f40d436c584: vcvttss2si %xmm1,%r11d
  0.59%     0x00007f40d436c588: cmp     $0x80000000,%r11d
         ╭  0x00007f40d436c58f: jne     0x7f40d436c5a1
         │  0x00007f40d436c591: sub     $0x8,%rsp
         │  0x00007f40d436c595: vmovss  %xmm1,(%rsp)
         │  0x00007f40d436c59a: callq   0x7f40cc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f40d436c59f: pop     %r11
  0.05%  ↘  0x00007f40d436c5a1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f40d436c5a5: mov     0xc(%rsp),%r11d
  0.25%     0x00007f40d436c5aa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f40d436cc64
  0.05%     0x00007f40d436c5ae: mov     0x14(%rsp),%r8d
            0x00007f40d436c5b3: cmp     %ecx,%r8d
            0x00007f40d436c5b6: jnb     0x7f40d436c9fc
            0x00007f40d436c5bc: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.84%     0x00007f40d436c5bf: lea     0x10(%r11,%r8,4),%rbx
            0x00007f40d436c5c4: cmpb    $0x0,0x30(%r15)
            0x00007f40d436c5c9: jne     0x7f40d436c6ee
            0x00007f40d436c5cf: mov     %r9,%r11
  0.74%     0x00007f40d436c5d2: mov     %r9,%r10
            0x00007f40d436c5d5: mov     %r10d,(%rbx)
            0x00007f40d436c5d8: mov     %rbx,%r10
            0x00007f40d436c5db: xor     %r10,%r11
  0.74%     0x00007f40d436c5de: shr     $0x14,%r11
  0.05%     0x00007f40d436c5e2: test    %r11,%r11
            0x00007f40d436c5e5: je      0x7f40d436bf8b
            0x00007f40d436c5eb: shr     $0x9,%r10
            0x00007f40d436c5ef: movabs  $0x7f40ea88e000,%rdi
            0x00007f40d436c5f9: add     %r10,%rdi
            0x00007f40d436c5fc: cmpb    $0x20,(%rdi)
            0x00007f40d436c5ff: je      0x7f40d436bf8b
            0x00007f40d436c605: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f40d436c60c: mov     0x70(%r15),%r11
....................................................................................................
 29.48%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (27 bytes) 

            0x00007f40d436c0eb: mov     0x8(%rsp),%r8d
            0x00007f40d436c0f0: mov     0x10(%rsp),%rbx
         ╭  0x00007f40d436c0f5: jmp     0x7f40d436c104
         │  0x00007f40d436c0f7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f40d436c0fc: add     $0xfffffffffffffff8,%r9
         │  0x00007f40d436c100: mov     %r9,0x70(%r15)
  0.69%  ↘  0x00007f40d436c104: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f40d436c10b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.79%     0x00007f40d436c111: mov     0x118(%r15),%r13
            0x00007f40d436c118: mov     %r13,%r10
            0x00007f40d436c11b: add     $0x18,%r10
  0.55%     0x00007f40d436c11f: cmp     0x128(%r15),%r10
            0x00007f40d436c126: jnb     0x7f40d436c7da    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f40d436c12c: mov     %r10,0x118(%r15)
            0x00007f40d436c133: prefetchnta 0x100(%r10)
            0x00007f40d436c13b: mov     0x18(%rsp),%r10
  0.89%     0x00007f40d436c140: mov     0xb8(%r10),%r10
            0x00007f40d436c147: mov     %r10,0x0(%r13)
            0x00007f40d436c14b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f40d436c153: movl    $0x0,0xc(%r13)
....................................................................................................
 25.07%  <total for region 2>

....[Hottest Regions]...............................................................................
 29.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (117 bytes) 
 25.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (27 bytes) 
  9.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (231 bytes) 
  7.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (212 bytes) 
  5.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (158 bytes) 
  2.48%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (53 bytes) 
  2.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (35 bytes) 
  1.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (99 bytes) 
  1.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (16 bytes) 
  0.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (91 bytes) 
  0.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (36 bytes) 
  0.40%   [kernel.kallsyms]  free_pcppages_bulk (48 bytes) 
  0.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 (113 bytes) 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 (32 bytes) 
  0.30%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 548 (52 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 (37 bytes) 
  0.25%   [kernel.kallsyms]  syscall_return_via_sysret (26 bytes) 
 10.46%  <...other 162 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 85.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 544 
  2.48%   [kernel.kallsyms]  native_write_msr 
  0.69%        libc-2.31.so  malloc 
  0.64%   [kernel.kallsyms]  free_pcppages_bulk 
  0.50%        libc-2.31.so  _int_free 
  0.45%        libc-2.31.so  _int_malloc 
  0.45%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.40%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 575 
  0.40%        libc-2.31.so  malloc_consolidate 
  0.30%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 548 
  0.25%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.25%           libjvm.so  G1FromCardCache::clear 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%           libjvm.so  RSHashTableIter::has_next 
  0.20%        libc-2.31.so  unlink_chunk.isra.0 
  0.20%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%           libjvm.so  OptoRuntime::new_instance_C 
  0.15%   [kernel.kallsyms]  switch_fpu_return 
  0.15%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  6.29%  <...other 110 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 85.98%         c2, level 4
  7.04%   [kernel.kallsyms]
  3.42%           libjvm.so
  2.63%        libc-2.31.so
  0.64%    libfcml.so.0.0.0
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%              [vdso]
  0.05%         interpreter
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       529.320          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
