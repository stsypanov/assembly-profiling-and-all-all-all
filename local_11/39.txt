# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1016.423 ns/op
# Warmup Iteration   2: 547.482 ns/op
# Warmup Iteration   3: 530.565 ns/op
# Warmup Iteration   4: 527.629 ns/op
# Warmup Iteration   5: 532.912 ns/op
Iteration   1: 528.316 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  528.316 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119815 total address lines.
Perf output processed (skipped 11.203 seconds):
 Column 1: cycles (1984 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (262 bytes) 

            0x00007ff56c369eeb: mov     0x8(%rsp),%r8d
            0x00007ff56c369ef0: mov     0x10(%rsp),%rbx
         ╭  0x00007ff56c369ef5: jmp     0x7ff56c369f04
         │  0x00007ff56c369ef7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007ff56c369efc: add     $0xfffffffffffffff8,%r9
         │  0x00007ff56c369f00: mov     %r9,0x70(%r15)
  0.96%  ↘  0x00007ff56c369f04: movl    $0x0,0x14(%rbx)
  0.05%     0x00007ff56c369f0b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.85%     0x00007ff56c369f11: mov     0x118(%r15),%r13
  0.15%     0x00007ff56c369f18: mov     %r13,%r10
            0x00007ff56c369f1b: add     $0x18,%r10
  0.50%     0x00007ff56c369f1f: cmp     0x128(%r15),%r10
            0x00007ff56c369f26: jnb     0x7ff56c36a5da    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff56c369f2c: mov     %r10,0x118(%r15)
            0x00007ff56c369f33: prefetchnta 0x100(%r10)
  0.10%     0x00007ff56c369f3b: mov     0x18(%rsp),%r10
  0.91%     0x00007ff56c369f40: mov     0xb8(%r10),%r10
            0x00007ff56c369f47: mov     %r10,0x0(%r13)
            0x00007ff56c369f4b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007ff56c369f53: movl    $0x0,0xc(%r13)
  0.76%     0x00007ff56c369f5b: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff56c369f63: mov     %r14d,0x10(%r13)
            0x00007ff56c369f67: mov     0x118(%r15),%rcx
            0x00007ff56c369f6e: mov     %rcx,%r10
  0.60%     0x00007ff56c369f71: add     $0x20,%r10
            0x00007ff56c369f75: cmp     0x128(%r15),%r10
            0x00007ff56c369f7c: jnb     0x7ff56c36a645
            0x00007ff56c369f82: mov     %r10,0x118(%r15)
            0x00007ff56c369f89: prefetchnta 0x100(%r10)
  0.71%     0x00007ff56c369f91: mov     0xb8(%rsi),%r10
  0.05%     0x00007ff56c369f98: mov     %r10,(%rcx)
            0x00007ff56c369f9b: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007ff56c369fa2: movl    $0x0,0xc(%rcx)
  0.91%     0x00007ff56c369fa9: movq    $0x0,0x10(%rcx)
            0x00007ff56c369fb1: movq    $0x0,0x18(%rcx)
            0x00007ff56c369fb9: mov     0x118(%r15),%rax
  0.05%     0x00007ff56c369fc0: mov     %rax,%r10
  1.01%     0x00007ff56c369fc3: add     $0x10,%r10
            0x00007ff56c369fc7: cmp     0x128(%r15),%r10
            0x00007ff56c369fce: jnb     0x7ff56c36a6ba    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff56c369fd4: mov     %r10,0x118(%r15)
            0x00007ff56c369fdb: prefetchnta 0x100(%r10)
  0.71%     0x00007ff56c369fe3: mov     0x28(%rsp),%r10
            0x00007ff56c369fe8: mov     0xb8(%r10),%r10
  0.05%     0x00007ff56c369fef: mov     %r10,(%rax)
  0.05%     0x00007ff56c369ff2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.55%     0x00007ff56c369ff9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff56c36a000: mov     %rcx,%r9
            0x00007ff56c36a003: mov     %rax,%r10
            0x00007ff56c36a006: mov     %r10d,0xc(%rcx)
  0.71%     0x00007ff56c36a00a: mov     %rax,%r10
            0x00007ff56c36a00d: xor     %r9,%r10
            0x00007ff56c36a010: shr     $0x14,%r10
            0x00007ff56c36a014: test    %r10,%r10
            0x00007ff56c36a017: je      0x7ff56c36a0a4
            0x00007ff56c36a01d: shr     $0x9,%r9
            0x00007ff56c36a021: movabs  $0x7ff580a2c000,%rdi
            0x00007ff56c36a02b: add     %r9,%rdi
            0x00007ff56c36a02e: cmpb    $0x20,(%rdi)
            0x00007ff56c36a031: je      0x7ff56c36a0a4
            0x00007ff56c36a033: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.67%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (117 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff56c36a35f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff56c36a363: mov     %r10,0x70(%r15)
            0x00007ff56c36a367: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 24.75%     0x00007ff56c36a36d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007ff56c36a371: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff56c36aa58
            0x00007ff56c36a375: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.86%     0x00007ff56c36a37a: mov     (%rsp),%r10
            0x00007ff56c36a37e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007ff56c36a384: vcvttss2si %xmm1,%r11d
  0.81%     0x00007ff56c36a388: cmp     $0x80000000,%r11d
         ╭  0x00007ff56c36a38f: jne     0x7ff56c36a3a1
         │  0x00007ff56c36a391: sub     $0x8,%rsp
         │  0x00007ff56c36a395: vmovss  %xmm1,(%rsp)
         │  0x00007ff56c36a39a: callq   0x7ff5648b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007ff56c36a39f: pop     %r11
  0.05%  ↘  0x00007ff56c36a3a1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
  0.05%     0x00007ff56c36a3a5: mov     0xc(%rsp),%r11d
  0.60%     0x00007ff56c36a3aa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007ff56c36aa64
            0x00007ff56c36a3ae: mov     0x14(%rsp),%r8d
            0x00007ff56c36a3b3: cmp     %ecx,%r8d
            0x00007ff56c36a3b6: jnb     0x7ff56c36a7fc
            0x00007ff56c36a3bc: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.86%     0x00007ff56c36a3bf: lea     0x10(%r11,%r8,4),%rbx
            0x00007ff56c36a3c4: cmpb    $0x0,0x30(%r15)
            0x00007ff56c36a3c9: jne     0x7ff56c36a4ee
            0x00007ff56c36a3cf: mov     %r9,%r11
  0.60%     0x00007ff56c36a3d2: mov     %r9,%r10
            0x00007ff56c36a3d5: mov     %r10d,(%rbx)
            0x00007ff56c36a3d8: mov     %rbx,%r10
            0x00007ff56c36a3db: xor     %r10,%r11
  1.21%     0x00007ff56c36a3de: shr     $0x14,%r11
  0.05%     0x00007ff56c36a3e2: test    %r11,%r11
            0x00007ff56c36a3e5: je      0x7ff56c369d8b
            0x00007ff56c36a3eb: shr     $0x9,%r10
            0x00007ff56c36a3ef: movabs  $0x7ff580a2c000,%rdi
            0x00007ff56c36a3f9: add     %r10,%rdi
            0x00007ff56c36a3fc: cmpb    $0x20,(%rdi)
            0x00007ff56c36a3ff: je      0x7ff56c369d8b
            0x00007ff56c36a405: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff56c36a40c: mov     0x70(%r15),%r11
....................................................................................................
 29.99%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (262 bytes) 
 29.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (117 bytes) 
  8.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (239 bytes) 
  7.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (231 bytes) 
  2.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (35 bytes) 
  1.66%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (26 bytes) 
  1.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (13 bytes) 
  1.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (168 bytes) 
  0.55%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (65 bytes) 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk (29 bytes) 
  0.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (4 bytes) 
  0.25%           libjvm.so  RSHashTableIter::has_next (13 bytes) 
  0.25%        libc-2.31.so  malloc_consolidate (46 bytes) 
  0.25%        libc-2.31.so  _int_free (24 bytes) 
  0.20%   [kernel.kallsyms]  release_pages (49 bytes) 
  0.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (8 bytes) 
  0.20%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 (37 bytes) 
  8.97%  <...other 143 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 
  1.66%   [kernel.kallsyms]  native_write_msr 
  0.71%        libc-2.31.so  _int_malloc 
  0.55%        libc-2.31.so  malloc 
  0.55%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.45%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.40%   [kernel.kallsyms]  free_pcppages_bulk 
  0.35%        libc-2.31.so  _int_free 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.25%           libjvm.so  RSHashTableIter::has_next 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 
  0.25%   [kernel.kallsyms]  release_pages 
  0.20%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 531 
  0.15%           libjvm.so  HeapRegionRemSetIterator::has_next 
  0.15%   [kernel.kallsyms]  __mod_memcg_state 
  0.15%           libjvm.so  xmlStream::write_text 
  5.59%  <...other 100 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.70%         c2, level 4
  5.49%   [kernel.kallsyms]
  2.92%           libjvm.so
  2.62%        libc-2.31.so
  0.91%    libfcml.so.0.0.0
  0.10%          ld-2.31.so
  0.10%         interpreter
  0.05%        runtime stub
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       528.316          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
