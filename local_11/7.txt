# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1045.497 ns/op
# Warmup Iteration   2: 543.108 ns/op
# Warmup Iteration   3: 532.523 ns/op
# Warmup Iteration   4: 529.220 ns/op
# Warmup Iteration   5: 537.449 ns/op
Iteration   1: 530.639 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  530.639 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120931 total address lines.
Perf output processed (skipped 11.300 seconds):
 Column 1: cycles (1976 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007feb64369d5f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007feb64369d63: mov     %r10,0x70(%r15)
            0x00007feb64369d67: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.52%     0x00007feb64369d6d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007feb64369d71: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007feb6436a458
            0x00007feb64369d75: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.76%     0x00007feb64369d7a: mov     (%rsp),%r10
            0x00007feb64369d7e: vmulss  0x14(%r10),%xmm0,%xmm1
  0.05%     0x00007feb64369d84: vcvttss2si %xmm1,%r11d
  0.66%     0x00007feb64369d88: cmp     $0x80000000,%r11d
         ╭  0x00007feb64369d8f: jne     0x7feb64369da1
         │  0x00007feb64369d91: sub     $0x8,%rsp
         │  0x00007feb64369d95: vmovss  %xmm1,(%rsp)
         │  0x00007feb64369d9a: callq   0x7feb5c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007feb64369d9f: pop     %r11
         ↘  0x00007feb64369da1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007feb64369da5: mov     0xc(%rsp),%r11d
  0.56%     0x00007feb64369daa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007feb6436a464
  0.05%     0x00007feb64369dae: mov     0x14(%rsp),%r8d
....................................................................................................
 28.09%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 

            0x00007feb643698eb: mov     0x8(%rsp),%r8d
            0x00007feb643698f0: mov     0x10(%rsp),%rbx
         ╭  0x00007feb643698f5: jmp     0x7feb64369904
         │  0x00007feb643698f7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007feb643698fc: add     $0xfffffffffffffff8,%r9
         │  0x00007feb64369900: mov     %r9,0x70(%r15)
  0.71%  ↘  0x00007feb64369904: movl    $0x0,0x14(%rbx)
  0.05%     0x00007feb6436990b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.79%     0x00007feb64369911: mov     0x118(%r15),%r13
  0.10%     0x00007feb64369918: mov     %r13,%r10
            0x00007feb6436991b: add     $0x18,%r10
  1.21%     0x00007feb6436991f: cmp     0x128(%r15),%r10
            0x00007feb64369926: jnb     0x7feb64369fda    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007feb6436992c: mov     %r10,0x118(%r15)
            0x00007feb64369933: prefetchnta 0x100(%r10)
            0x00007feb6436993b: mov     0x18(%rsp),%r10
  0.91%     0x00007feb64369940: mov     0xb8(%r10),%r10
  0.10%     0x00007feb64369947: mov     %r10,0x0(%r13)
            0x00007feb6436994b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007feb64369953: movl    $0x0,0xc(%r13)
....................................................................................................
 25.86%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 
 25.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 
  8.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (231 bytes) 
  8.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (242 bytes) 
  7.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (202 bytes) 
  2.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (35 bytes) 
  2.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (52 bytes) 
  1.92%   [kernel.kallsyms]  native_write_msr (5 bytes) 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (71 bytes) 
  1.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (79 bytes) 
  0.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (119 bytes) 
  0.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (13 bytes) 
  0.35%   [kernel.kallsyms]  syscall_exit_to_user_mode (1 bytes) 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.30%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 574 (41 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 574 (58 bytes) 
  0.25%           libjvm.so  fileStream::write (20 bytes) 
  0.25%        libc-2.31.so  malloc (0 bytes) 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 549 (21 bytes) 
  8.96%  <...other 138 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.50%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 
  1.92%   [kernel.kallsyms]  native_write_msr 
  0.56%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 574 
  0.51%   [kernel.kallsyms]  free_pcppages_bulk 
  0.46%   [kernel.kallsyms]  release_pages 
  0.40%        libc-2.31.so  malloc 
  0.35%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 549 
  0.25%        libc-2.31.so  _int_free 
  0.25%           libjvm.so  fileStream::write 
  0.20%           libjvm.so  G1ScanRSForRegionClosure::do_heap_region 
  0.20%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.15%   [kernel.kallsyms]  __mod_zone_page_state 
  0.15%        libc-2.31.so  _int_malloc 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%           libjvm.so  OtherRegionsTable::occupied 
  5.41%  <...other 94 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.36%         c2, level 4
  5.82%   [kernel.kallsyms]
  2.94%           libjvm.so
  2.23%        libc-2.31.so
  0.35%    libfcml.so.0.0.0
  0.20%         interpreter
  0.05%         c1, level 3
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       530.639          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
