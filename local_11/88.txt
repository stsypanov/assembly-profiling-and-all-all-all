# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 979.965 ns/op
# Warmup Iteration   2: 532.894 ns/op
# Warmup Iteration   3: 509.349 ns/op
# Warmup Iteration   4: 509.061 ns/op
# Warmup Iteration   5: 514.220 ns/op
Iteration   1: 508.900 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  508.900 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119131 total address lines.
Perf output processed (skipped 11.082 seconds):
 Column 1: cycles (1965 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (114 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f348036c277: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f348036c27b: mov     %r10,0x70(%r15)
            0x00007f348036c27f: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.80%     0x00007f348036c285: mov     0x20(%r8),%r10d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f348036c289: mov     0xc(%r10),%r11d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f348036c968
            0x00007f348036c28d: vcvtsi2ssl %r11d,%xmm0,%xmm0
  0.51%     0x00007f348036c292: mov     (%rsp),%r10
            0x00007f348036c296: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f348036c29c: vcvttss2si %xmm1,%r10d
  0.87%     0x00007f348036c2a0: cmp     $0x80000000,%r10d
         ╭  0x00007f348036c2a7: jne     0x7f348036c2b9
         │  0x00007f348036c2a9: sub     $0x8,%rsp
         │  0x00007f348036c2ad: vmovss  %xmm1,(%rsp)
         │  0x00007f348036c2b2: callq   0x7f34788b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f348036c2b7: pop     %r10
  0.05%  ↘  0x00007f348036c2b9: mov     %r10d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f348036c2bd: mov     0xc(%rsp),%r11d
  0.51%     0x00007f348036c2c2: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f348036c974
            0x00007f348036c2c6: mov     0x14(%rsp),%r10d
            0x00007f348036c2cb: cmp     %ecx,%r10d
            0x00007f348036c2ce: jnb     0x7f348036c708
            0x00007f348036c2d4: mov     %r11,%r9          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.76%     0x00007f348036c2d7: lea     0x10(%r11,%r10,4),%rbx
            0x00007f348036c2dc: cmpb    $0x0,0x30(%r15)
  0.05%     0x00007f348036c2e1: jne     0x7f348036c403
            0x00007f348036c2e7: mov     %r8,%r11
  0.92%     0x00007f348036c2ea: mov     %r8d,(%rbx)
            0x00007f348036c2ed: mov     %rbx,%r8
            0x00007f348036c2f0: xor     %r8,%r11
            0x00007f348036c2f3: shr     $0x14,%r11
  0.66%     0x00007f348036c2f7: test    %r11,%r11
            0x00007f348036c2fa: je      0x7f348036bc99
            0x00007f348036c300: shr     $0x9,%r8
            0x00007f348036c304: movabs  $0x7f3478078000,%rdi
            0x00007f348036c30e: add     %r8,%rdi
            0x00007f348036c311: cmpb    $0x20,(%rdi)
            0x00007f348036c314: je      0x7f348036bc99
            0x00007f348036c31a: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f348036c321: mov     0x70(%r15),%r8
....................................................................................................
 30.28%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (28 bytes) 

            0x00007f348036bdfc: mov     0x8(%rsp),%r10d
            0x00007f348036be01: mov     0x10(%rsp),%r13
         ╭  0x00007f348036be06: jmp     0x7f348036be15
         │  0x00007f348036be08: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f348036be0d: add     $0xfffffffffffffff8,%r9
         │  0x00007f348036be11: mov     %r9,0x70(%r15)
  0.05%  ↘  0x00007f348036be15: movl    $0x0,0x14(%r13)
  0.56%     0x00007f348036be1d: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.33%     0x00007f348036be23: mov     0x118(%r15),%r14
  0.10%     0x00007f348036be2a: mov     %r14,%r8
            0x00007f348036be2d: add     $0x18,%r8
  1.17%     0x00007f348036be31: cmp     0x128(%r15),%r8
            0x00007f348036be38: jnb     0x7f348036c4e9    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f348036be3e: mov     %r8,0x118(%r15)
            0x00007f348036be45: prefetchnta 0x100(%r8)
            0x00007f348036be4d: mov     0x18(%rsp),%r8
  1.02%     0x00007f348036be52: mov     0xb8(%r8),%r8
            0x00007f348036be59: mov     %r8,(%r14)
            0x00007f348036be5c: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f348036be64: movl    $0x0,0xc(%r14)
....................................................................................................
 26.21%  <total for region 2>

....[Hottest Regions]...............................................................................
 30.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (114 bytes) 
 26.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (28 bytes) 
  9.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (425 bytes) 
  8.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (229 bytes) 
  6.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (201 bytes) 
  2.75%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (35 bytes) 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (13 bytes) 
  1.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (0 bytes) 
  0.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (46 bytes) 
  0.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (0 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (14 bytes) 
  0.56%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 (51 bytes) 
  0.31%        libc-2.31.so  malloc (0 bytes) 
  0.25%   [kernel.kallsyms]  syscall_return_via_sysret (1 bytes) 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 (17 bytes) 
  0.20%           libjvm.so  SpinPause (7 bytes) 
  0.20%        libc-2.31.so  _int_free (56 bytes) 
  0.20%        libc-2.31.so  __memset_avx2_erms (31 bytes) 
  7.48%  <...other 124 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 534 
  2.75%   [kernel.kallsyms]  native_write_msr 
  0.56%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.51%        libc-2.31.so  malloc 
  0.41%        libc-2.31.so  _int_malloc 
  0.36%        libc-2.31.so  _int_free 
  0.31%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.25%        libc-2.31.so  malloc_consolidate 
  0.20%           libjvm.so  SpinPause 
  0.20%        libc-2.31.so  __memset_avx2_erms 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 
  0.15%   [kernel.kallsyms]  mutex_unlock 
  0.15%        libc-2.31.so  cfree@GLIBC_2.2.5 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 565 
  0.10%   [kernel.kallsyms]  timekeeping_advance 
  0.10%           libjvm.so  AbsSeq::davg 
  0.10%        libc-2.31.so  unlink_chunk.isra.0 
  0.10%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.10%   [kernel.kallsyms]  entry_SYSCALL_64 
  4.83%  <...other 88 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.60%         c2, level 4
  5.39%   [kernel.kallsyms]
  2.49%           libjvm.so
  2.49%        libc-2.31.so
  0.87%    libfcml.so.0.0.0
  0.05%          ld-2.31.so
  0.05%              kvm.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       508.900          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
