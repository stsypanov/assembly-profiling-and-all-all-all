# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 986.113 ns/op
# Warmup Iteration   2: 543.351 ns/op
# Warmup Iteration   3: 530.441 ns/op
# Warmup Iteration   4: 531.386 ns/op
# Warmup Iteration   5: 535.130 ns/op
Iteration   1: 529.138 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  529.138 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 117088 total address lines.
Perf output processed (skipped 11.192 seconds):
 Column 1: cycles (1950 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (262 bytes) 

            0x00007f253036a07a: mov     0x8(%rsp),%r8d
            0x00007f253036a07f: mov     0x10(%rsp),%rbx
         ╭  0x00007f253036a084: jmp     0x7f253036a093
         │  0x00007f253036a086: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f253036a08b: add     $0xfffffffffffffff8,%r9
         │  0x00007f253036a08f: mov     %r9,0x70(%r15)
  0.62%  ↘  0x00007f253036a093: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f253036a09a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.41%     0x00007f253036a0a0: mov     0x118(%r15),%r13
  0.05%     0x00007f253036a0a7: mov     %r13,%r10
            0x00007f253036a0aa: add     $0x18,%r10
  0.97%     0x00007f253036a0ae: cmp     0x128(%r15),%r10
            0x00007f253036a0b5: jnb     0x7f253036a76a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f253036a0bb: mov     %r10,0x118(%r15)
            0x00007f253036a0c2: prefetchnta 0x100(%r10)
            0x00007f253036a0ca: mov     0x18(%rsp),%r10
  0.72%     0x00007f253036a0cf: mov     0xb8(%r10),%r10
            0x00007f253036a0d6: mov     %r10,0x0(%r13)
            0x00007f253036a0da: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f253036a0e2: movl    $0x0,0xc(%r13)
  1.13%     0x00007f253036a0ea: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f253036a0f2: mov     %r14d,0x10(%r13)
            0x00007f253036a0f6: mov     0x118(%r15),%rcx
            0x00007f253036a0fd: mov     %rcx,%r10
  0.31%     0x00007f253036a100: add     $0x20,%r10
            0x00007f253036a104: cmp     0x128(%r15),%r10
            0x00007f253036a10b: jnb     0x7f253036a7d5
            0x00007f253036a111: mov     %r10,0x118(%r15)
            0x00007f253036a118: prefetchnta 0x100(%r10)
  0.77%     0x00007f253036a120: mov     0xb8(%rsi),%r10
            0x00007f253036a127: mov     %r10,(%rcx)
            0x00007f253036a12a: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f253036a131: movl    $0x0,0xc(%rcx)
  0.41%     0x00007f253036a138: movq    $0x0,0x10(%rcx)
            0x00007f253036a140: movq    $0x0,0x18(%rcx)
            0x00007f253036a148: mov     0x118(%r15),%rax
            0x00007f253036a14f: mov     %rax,%r10
  0.87%     0x00007f253036a152: add     $0x10,%r10
            0x00007f253036a156: cmp     0x128(%r15),%r10
            0x00007f253036a15d: jnb     0x7f253036a84a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f253036a163: mov     %r10,0x118(%r15)
            0x00007f253036a16a: prefetchnta 0x100(%r10)
  0.62%     0x00007f253036a172: mov     0x28(%rsp),%r10
            0x00007f253036a177: mov     0xb8(%r10),%r10
  0.05%     0x00007f253036a17e: mov     %r10,(%rax)
            0x00007f253036a181: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.92%     0x00007f253036a188: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f253036a18f: mov     %rcx,%r9
            0x00007f253036a192: mov     %rax,%r10
            0x00007f253036a195: mov     %r10d,0xc(%rcx)
  0.82%     0x00007f253036a199: mov     %rax,%r10
            0x00007f253036a19c: xor     %r9,%r10
            0x00007f253036a19f: shr     $0x14,%r10
            0x00007f253036a1a3: test    %r10,%r10
            0x00007f253036a1a6: je      0x7f253036a233
            0x00007f253036a1ac: shr     $0x9,%r9
            0x00007f253036a1b0: movabs  $0x7f2543c5d000,%rdi
            0x00007f253036a1ba: add     %r9,%rdi
            0x00007f253036a1bd: cmpb    $0x20,(%rdi)
            0x00007f253036a1c0: je      0x7f253036a233
            0x00007f253036a1c2: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 30.77%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f253036a4ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f253036a4f2: mov     %r10,0x70(%r15)
            0x00007f253036a4f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.56%     0x00007f253036a4fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f253036a500: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f253036abf0
            0x00007f253036a504: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.82%     0x00007f253036a509: mov     (%rsp),%r10
            0x00007f253036a50d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f253036a513: vcvttss2si %xmm0,%r11d
  1.03%     0x00007f253036a517: cmp     $0x80000000,%r11d
         ╭  0x00007f253036a51e: jne     0x7f253036a530
         │  0x00007f253036a520: sub     $0x8,%rsp
         │  0x00007f253036a524: vmovss  %xmm0,(%rsp)
         │  0x00007f253036a529: callq   0x7f25288b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f253036a52e: pop     %r11
         ↘  0x00007f253036a530: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f253036a534: mov     0xc(%rsp),%r11d
  0.46%     0x00007f253036a539: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f253036abfc
            0x00007f253036a53d: mov     0x14(%rsp),%r8d
....................................................................................................
 28.46%  <total for region 2>

....[Hottest Regions]...............................................................................
 30.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (262 bytes) 
 28.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (27 bytes) 
  9.64%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (236 bytes) 
  8.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (247 bytes) 
  3.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (52 bytes) 
  2.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (35 bytes) 
  1.85%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (13 bytes) 
  1.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (0 bytes) 
  0.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (144 bytes) 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (46 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 (48 bytes) 
  0.31%        libc-2.31.so  malloc (0 bytes) 
  0.31%        libc-2.31.so  __memset_avx2_unaligned_erms (28 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 (44 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (29 bytes) 
  0.21%           libjvm.so  SpinPause (7 bytes) 
  0.21%        libc-2.31.so  malloc_consolidate (63 bytes) 
  8.05%  <...other 127 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 530 
  1.85%   [kernel.kallsyms]  native_write_msr 
  0.41%        libc-2.31.so  malloc 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.36%        libc-2.31.so  malloc_consolidate 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 535 
  0.26%        libc-2.31.so  _int_free 
  0.21%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 
  0.21%        libc-2.31.so  _int_malloc 
  0.21%           libjvm.so  SpinPause 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%   [kernel.kallsyms]  __mod_node_page_state 
  0.15%           libjvm.so  G1RemSetScanState::G1ClearCardTableTask::work 
  0.15%   [kernel.kallsyms]  resched_curr 
  0.15%   [kernel.kallsyms]  futex_wait_queue_me 
  0.15%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  0.10%   [kernel.kallsyms]  free_unref_page_commit 
  5.54%  <...other 91 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.87%         c2, level 4
  5.44%   [kernel.kallsyms]
  2.56%           libjvm.so
  2.15%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.15%           nvidia.ko
  0.10%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       529.138          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
