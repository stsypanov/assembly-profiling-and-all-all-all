# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 975.460 ns/op
# Warmup Iteration   2: 541.948 ns/op
# Warmup Iteration   3: 526.348 ns/op
# Warmup Iteration   4: 513.936 ns/op
# Warmup Iteration   5: 519.118 ns/op
Iteration   1: 602.139 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  602.139 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121464 total address lines.
Perf output processed (skipped 11.221 seconds):
 Column 1: cycles (1953 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (271 bytes) 

            0x00007fc15436a9f9: mov     0x8(%rsp),%r10d
            0x00007fc15436a9fe: mov     0x10(%rsp),%rbx
         ╭  0x00007fc15436aa03: jmp     0x7fc15436aa12
         │  0x00007fc15436aa05: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fc15436aa0a: add     $0xfffffffffffffff8,%r9
         │  0x00007fc15436aa0e: mov     %r9,0x70(%r15)
  0.46%  ↘  0x00007fc15436aa12: movl    $0x0,0x14(%rbx)
  0.05%     0x00007fc15436aa19: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.96%     0x00007fc15436aa1f: mov     0x118(%r15),%r14
  0.05%     0x00007fc15436aa26: mov     %r14,%r8
            0x00007fc15436aa29: add     $0x18,%r8
  0.20%     0x00007fc15436aa2d: cmp     0x128(%r15),%r8
            0x00007fc15436aa34: jnb     0x7fc15436b0fd    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007fc15436aa3a: mov     %r8,0x118(%r15)
            0x00007fc15436aa41: prefetchnta 0x100(%r8)
  0.05%     0x00007fc15436aa49: mov     0x18(%rsp),%r8
  0.82%     0x00007fc15436aa4e: mov     0xb8(%r8),%r8
  0.10%     0x00007fc15436aa55: mov     %r8,(%r14)
            0x00007fc15436aa58: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fc15436aa60: movl    $0x0,0xc(%r14)
  0.61%     0x00007fc15436aa68: movl    $0x0,0x14(%r14)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc15436aa70: mov     %esi,0x10(%r14)
            0x00007fc15436aa74: mov     0x118(%r15),%rcx
            0x00007fc15436aa7b: mov     %rcx,%r8
  0.56%     0x00007fc15436aa7e: add     $0x20,%r8
  0.05%     0x00007fc15436aa82: cmp     0x128(%r15),%r8
            0x00007fc15436aa89: jnb     0x7fc15436b168
            0x00007fc15436aa8f: mov     %r8,0x118(%r15)
            0x00007fc15436aa96: prefetchnta 0x100(%r8)
  0.72%     0x00007fc15436aa9e: mov     0xb8(%r13),%r8
            0x00007fc15436aaa5: mov     %r8,(%rcx)
            0x00007fc15436aaa8: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fc15436aaaf: movl    $0x0,0xc(%rcx)
  1.08%     0x00007fc15436aab6: movq    $0x0,0x10(%rcx)
  0.05%     0x00007fc15436aabe: movq    $0x0,0x18(%rcx)
            0x00007fc15436aac6: mov     0x118(%r15),%rax
            0x00007fc15436aacd: mov     %rax,%r8
  0.97%     0x00007fc15436aad0: add     $0x10,%r8
            0x00007fc15436aad4: cmp     0x128(%r15),%r8
            0x00007fc15436aadb: jnb     0x7fc15436b1dd    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007fc15436aae1: mov     %r8,0x118(%r15)
            0x00007fc15436aae8: prefetchnta 0x100(%r8)
  0.51%     0x00007fc15436aaf0: mov     0x28(%rsp),%r8
  0.05%     0x00007fc15436aaf5: mov     0xb8(%r8),%r8
  0.10%     0x00007fc15436aafc: mov     %r8,(%rax)
            0x00007fc15436aaff: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.77%     0x00007fc15436ab06: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc15436ab0d: mov     %rcx,%r9
            0x00007fc15436ab10: mov     %rax,%r8
            0x00007fc15436ab13: mov     %r8d,0xc(%rcx)
  0.92%     0x00007fc15436ab17: mov     %rax,%r8
            0x00007fc15436ab1a: xor     %r9,%r8
            0x00007fc15436ab1d: shr     $0x14,%r8
  0.05%     0x00007fc15436ab21: test    %r8,%r8
            0x00007fc15436ab24: je      0x7fc15436abb5
            0x00007fc15436ab2a: shr     $0x9,%r9
            0x00007fc15436ab2e: movabs  $0x7fc147426000,%rdi
            0x00007fc15436ab38: add     %r9,%rdi
            0x00007fc15436ab3b: cmpb    $0x20,(%rdi)
            0x00007fc15436ab3e: je      0x7fc15436abb5
            0x00007fc15436ab40: mov     0x80(%r15),%r8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fc15436ab47: mov     0x70(%r15),%r9
....................................................................................................
 32.26%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (33 bytes) 

            0x00007fc15436ae7f: jmp     0x7fc15436ae8e
            0x00007fc15436ae81: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc15436ae86: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fc15436ae8a: mov     %r10,0x70(%r15)
  0.87%     0x00007fc15436ae8e: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 29.54%     0x00007fc15436ae94: mov     0x20(%r8),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fc15436ae98: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fc15436b574
            0x00007fc15436ae9c: vcvtsi2ssl %r10d,%xmm0,%xmm0
  1.08%     0x00007fc15436aea1: mov     (%rsp),%r10
  0.05%     0x00007fc15436aea5: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007fc15436aeab: vcvttss2si %xmm1,%r11d
  0.51%     0x00007fc15436aeaf: cmp     $0x80000000,%r11d
         ╭  0x00007fc15436aeb6: jne     0x7fc15436aec8
         │  0x00007fc15436aeb8: sub     $0x8,%rsp
         │  0x00007fc15436aebc: vmovss  %xmm1,(%rsp)
         │  0x00007fc15436aec1: callq   0x7fc14c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fc15436aec6: pop     %r11
         ↘  0x00007fc15436aec8: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fc15436aecc: mov     0xc(%rsp),%r11d
  0.67%     0x00007fc15436aed1: mov     0xc(%r11),%r9d    ; implicit exception: dispatches to 0x00007fc15436b580
            0x00007fc15436aed5: mov     0x14(%rsp),%r10d
....................................................................................................
 32.05%  <total for region 2>

....[Hottest Regions]...............................................................................
 32.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (271 bytes) 
 32.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (33 bytes) 
  7.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (207 bytes) 
  4.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (156 bytes) 
  2.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (49 bytes) 
  2.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (52 bytes) 
  2.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (35 bytes) 
  1.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (13 bytes) 
  0.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (0 bytes) 
  0.77%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (56 bytes) 
  0.51%        libc-2.31.so  malloc_consolidate (82 bytes) 
  0.46%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 543 (52 bytes) 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 (27 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (30 bytes) 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (38 bytes) 
  0.26%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (30 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  9.47%  <...other 137 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 
  0.77%   [kernel.kallsyms]  native_write_msr 
  0.72%        libc-2.31.so  malloc 
  0.67%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 
  0.61%        libc-2.31.so  malloc_consolidate 
  0.56%                      <unknown> 
  0.51%   [kernel.kallsyms]  free_pcppages_bulk 
  0.46%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 543 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%        libc-2.31.so  _int_free 
  0.20%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.20%           libjvm.so  fileStream::write 
  0.15%   [kernel.kallsyms]  __mod_node_page_state 
  0.15%        libc-2.31.so  _int_malloc 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  SpinPause 
  0.15%   [kernel.kallsyms]  release_pages 
  0.15%           libjvm.so  G1CollectionSet::add_eden_region 
  0.15%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  5.07%  <...other 86 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.25%         c2, level 4
  4.66%   [kernel.kallsyms]
  2.66%           libjvm.so
  2.51%        libc-2.31.so
  0.56%                    
  0.10%          ld-2.31.so
  0.10%         interpreter
  0.05%      perf-19356.map
  0.05%              [vdso]
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       602.139          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
