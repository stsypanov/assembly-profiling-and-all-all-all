# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 905.042 ns/op
# Warmup Iteration   2: 550.489 ns/op
# Warmup Iteration   3: 534.827 ns/op
# Warmup Iteration   4: 529.364 ns/op
# Warmup Iteration   5: 532.075 ns/op
Iteration   1: 530.894 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  530.894 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 123277 total address lines.
Perf output processed (skipped 11.311 seconds):
 Column 1: cycles (1994 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (262 bytes) 

            0x00007f7bb436ad7a: mov     0x8(%rsp),%r8d
            0x00007f7bb436ad7f: mov     0x10(%rsp),%rbx
         ╭  0x00007f7bb436ad84: jmp     0x7f7bb436ad93
         │  0x00007f7bb436ad86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f7bb436ad8b: add     $0xfffffffffffffff8,%r9
         │  0x00007f7bb436ad8f: mov     %r9,0x70(%r15)
  0.55%  ↘  0x00007f7bb436ad93: movl    $0x0,0x14(%rbx)
            0x00007f7bb436ad9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.87%     0x00007f7bb436ada0: mov     0x118(%r15),%r13
            0x00007f7bb436ada7: mov     %r13,%r10
            0x00007f7bb436adaa: add     $0x18,%r10
  0.75%     0x00007f7bb436adae: cmp     0x128(%r15),%r10
            0x00007f7bb436adb5: jnb     0x7f7bb436b46a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f7bb436adbb: mov     %r10,0x118(%r15)
            0x00007f7bb436adc2: prefetchnta 0x100(%r10)
            0x00007f7bb436adca: mov     0x18(%rsp),%r10
  0.65%     0x00007f7bb436adcf: mov     0xb8(%r10),%r10
            0x00007f7bb436add6: mov     %r10,0x0(%r13)
            0x00007f7bb436adda: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
  0.05%     0x00007f7bb436ade2: movl    $0x0,0xc(%r13)
  0.40%     0x00007f7bb436adea: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f7bb436adf2: mov     %r14d,0x10(%r13)
            0x00007f7bb436adf6: mov     0x118(%r15),%rcx
            0x00007f7bb436adfd: mov     %rcx,%r10
  0.85%     0x00007f7bb436ae00: add     $0x20,%r10
            0x00007f7bb436ae04: cmp     0x128(%r15),%r10
            0x00007f7bb436ae0b: jnb     0x7f7bb436b4d5
            0x00007f7bb436ae11: mov     %r10,0x118(%r15)
            0x00007f7bb436ae18: prefetchnta 0x100(%r10)
  0.90%     0x00007f7bb436ae20: mov     0xb8(%rsi),%r10
            0x00007f7bb436ae27: mov     %r10,(%rcx)
            0x00007f7bb436ae2a: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f7bb436ae31: movl    $0x0,0xc(%rcx)
  0.65%     0x00007f7bb436ae38: movq    $0x0,0x10(%rcx)
            0x00007f7bb436ae40: movq    $0x0,0x18(%rcx)
            0x00007f7bb436ae48: mov     0x118(%r15),%rax
  0.05%     0x00007f7bb436ae4f: mov     %rax,%r10
  0.85%     0x00007f7bb436ae52: add     $0x10,%r10
            0x00007f7bb436ae56: cmp     0x128(%r15),%r10
            0x00007f7bb436ae5d: jnb     0x7f7bb436b54a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f7bb436ae63: mov     %r10,0x118(%r15)
            0x00007f7bb436ae6a: prefetchnta 0x100(%r10)
  0.50%     0x00007f7bb436ae72: mov     0x28(%rsp),%r10
            0x00007f7bb436ae77: mov     0xb8(%r10),%r10
            0x00007f7bb436ae7e: mov     %r10,(%rax)
            0x00007f7bb436ae81: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  1.05%     0x00007f7bb436ae88: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f7bb436ae8f: mov     %rcx,%r9
            0x00007f7bb436ae92: mov     %rax,%r10
            0x00007f7bb436ae95: mov     %r10d,0xc(%rcx)
  1.15%     0x00007f7bb436ae99: mov     %rax,%r10
            0x00007f7bb436ae9c: xor     %r9,%r10
            0x00007f7bb436ae9f: shr     $0x14,%r10
            0x00007f7bb436aea3: test    %r10,%r10
            0x00007f7bb436aea6: je      0x7f7bb436af33
            0x00007f7bb436aeac: shr     $0x9,%r9
            0x00007f7bb436aeb0: movabs  $0x7f7bc9775000,%rdi
            0x00007f7bb436aeba: add     %r9,%rdi
            0x00007f7bb436aebd: cmpb    $0x20,(%rdi)
            0x00007f7bb436aec0: je      0x7f7bb436af33
            0x00007f7bb436aec2: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 31.34%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f7bb436b1ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f7bb436b1f2: mov     %r10,0x70(%r15)
            0x00007f7bb436b1f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.48%     0x00007f7bb436b1fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f7bb436b200: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f7bb436b8f0
            0x00007f7bb436b204: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.95%     0x00007f7bb436b209: mov     (%rsp),%r10
            0x00007f7bb436b20d: vmulss  0x14(%r10),%xmm1,%xmm0
  0.05%     0x00007f7bb436b213: vcvttss2si %xmm0,%r11d
  0.65%     0x00007f7bb436b217: cmp     $0x80000000,%r11d
         ╭  0x00007f7bb436b21e: jne     0x7f7bb436b230
         │  0x00007f7bb436b220: sub     $0x8,%rsp
         │  0x00007f7bb436b224: vmovss  %xmm0,(%rsp)
         │  0x00007f7bb436b229: callq   0x7f7bac8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f7bb436b22e: pop     %r11
         ↘  0x00007f7bb436b230: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f7bb436b234: mov     0xc(%rsp),%r11d
  0.65%     0x00007f7bb436b239: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f7bb436b8fc
            0x00007f7bb436b23d: mov     0x14(%rsp),%r8d
....................................................................................................
 28.28%  <total for region 2>

....[Hottest Regions]...............................................................................
 31.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (262 bytes) 
 28.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (27 bytes) 
  8.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (231 bytes) 
  8.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (236 bytes) 
  2.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (52 bytes) 
  2.11%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (35 bytes) 
  1.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (91 bytes) 
  1.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (13 bytes) 
  1.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (133 bytes) 
  0.55%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.45%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.35%   [kernel.kallsyms]  entry_SYSCALL_64 (41 bytes) 
  0.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (44 bytes) 
  0.35%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 (44 bytes) 
  0.30%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 578 (30 bytes) 
  0.25%        libc-2.31.so  malloc_consolidate (37 bytes) 
  0.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 (39 bytes) 
  0.15%   [kernel.kallsyms]  futex_wait (0 bytes) 
  0.15%           libjvm.so  RSHashTableIter::has_next (0 bytes) 
  9.33%  <...other 154 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 86.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 546 
  2.11%   [kernel.kallsyms]  native_write_msr 
  0.55%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.50%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.50%        libc-2.31.so  malloc_consolidate 
  0.40%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 578 
  0.35%        libc-2.31.so  malloc 
  0.35%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 
  0.35%        libc-2.31.so  _int_malloc 
  0.35%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.35%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  release_pages 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk 
  0.15%           libjvm.so  RSHashTableIter::has_next 
  0.15%   [kernel.kallsyms]  futex_wait 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.10%         interpreter  invoke return entry points  
  0.10%   [kernel.kallsyms]  __update_load_avg_cfs_rq 
  0.10%   [kernel.kallsyms]  mutex_lock 
  0.10%      perf-22705.map  [unknown] 
  6.57%  <...other 115 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.01%         c2, level 4
  7.02%   [kernel.kallsyms]
  3.01%           libjvm.so
  2.01%        libc-2.31.so
  0.50%    libfcml.so.0.0.0
  0.20%         interpreter
  0.10%      perf-22705.map
  0.05%              kvm.ko
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       530.894          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
