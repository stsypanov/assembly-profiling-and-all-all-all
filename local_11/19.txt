# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 840.653 ns/op
# Warmup Iteration   2: 561.820 ns/op
# Warmup Iteration   3: 548.107 ns/op
# Warmup Iteration   4: 545.186 ns/op
# Warmup Iteration   5: 551.927 ns/op
Iteration   1: 545.924 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  545.924 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 122165 total address lines.
Perf output processed (skipped 11.086 seconds):
 Column 1: cycles (1946 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9a3836b5df: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9a3836b5e3: mov     %r10,0x70(%r15)
            0x00007f9a3836b5e7: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 28.83%     0x00007f9a3836b5ed: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f9a3836b5f1: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f9a3836bcd8
            0x00007f9a3836b5f5: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.62%     0x00007f9a3836b5fa: mov     (%rsp),%r10
            0x00007f9a3836b5fe: vmulss  0x14(%r10),%xmm0,%xmm1
  0.05%     0x00007f9a3836b604: vcvttss2si %xmm1,%r11d
  0.46%     0x00007f9a3836b608: cmp     $0x80000000,%r11d
         ╭  0x00007f9a3836b60f: jne     0x7f9a3836b621
         │  0x00007f9a3836b611: sub     $0x8,%rsp
         │  0x00007f9a3836b615: vmovss  %xmm1,(%rsp)
         │  0x00007f9a3836b61a: callq   0x7f9a308b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f9a3836b61f: pop     %r11
         ↘  0x00007f9a3836b621: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f9a3836b625: mov     0xc(%rsp),%r11d
  0.62%     0x00007f9a3836b62a: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f9a3836bce4
            0x00007f9a3836b62e: mov     0x14(%rsp),%r8d
....................................................................................................
 30.01%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (27 bytes) 

            0x00007f9a3836b16b: mov     0x8(%rsp),%r8d
            0x00007f9a3836b170: mov     0x10(%rsp),%rbx
         ╭  0x00007f9a3836b175: jmp     0x7f9a3836b184
         │  0x00007f9a3836b177: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f9a3836b17c: add     $0xfffffffffffffff8,%r9
         │  0x00007f9a3836b180: mov     %r9,0x70(%r15)
  0.46%  ↘  0x00007f9a3836b184: movl    $0x0,0x14(%rbx)
            0x00007f9a3836b18b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.77%     0x00007f9a3836b191: mov     0x118(%r15),%r13
  0.05%     0x00007f9a3836b198: mov     %r13,%r10
            0x00007f9a3836b19b: add     $0x18,%r10
  0.62%     0x00007f9a3836b19f: cmp     0x128(%r15),%r10
            0x00007f9a3836b1a6: jnb     0x7f9a3836b85a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9a3836b1ac: mov     %r10,0x118(%r15)
            0x00007f9a3836b1b3: prefetchnta 0x100(%r10)
            0x00007f9a3836b1bb: mov     0x18(%rsp),%r10
  0.51%     0x00007f9a3836b1c0: mov     0xb8(%r10),%r10
            0x00007f9a3836b1c7: mov     %r10,0x0(%r13)
            0x00007f9a3836b1cb: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f9a3836b1d3: movl    $0x0,0xc(%r13)
....................................................................................................
 25.90%  <total for region 2>

....[Hottest Regions]...............................................................................
 30.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (27 bytes) 
 25.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (27 bytes) 
  8.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (246 bytes) 
  8.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (231 bytes) 
  6.17%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (202 bytes) 
  2.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (52 bytes) 
  1.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (35 bytes) 
  1.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (13 bytes) 
  1.13%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (0 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (52 bytes) 
  0.51%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.46%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 (88 bytes) 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 538 (65 bytes) 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (60 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (36 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (40 bytes) 
  0.26%           libjvm.so  SpinPause (7 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  9.25%  <...other 150 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 
  1.13%   [kernel.kallsyms]  native_write_msr 
  0.57%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 568 
  0.57%        libc-2.31.so  _int_malloc 
  0.51%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 538 
  0.26%        libc-2.31.so  malloc 
  0.26%           libjvm.so  SpinPause 
  0.21%    libfcml.so.0.0.0  fcml_fn_coll_list_free 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%           libjvm.so  Monitor::ILock 
  0.15%   [kernel.kallsyms]  psi_group_change 
  0.15%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.15%        libc-2.31.so  _int_free 
  0.10%   [kernel.kallsyms]  free_pcppages_bulk 
  0.10%   [kernel.kallsyms]  __mod_node_page_state 
  0.10%           libjvm.so  AbsSeq::dsd 
  6.22%  <...other 106 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 88.69%         c2, level 4
  4.57%   [kernel.kallsyms]
  3.70%           libjvm.so
  1.80%        libc-2.31.so
  0.72%    libfcml.so.0.0.0
  0.21%         interpreter
  0.05%        runtime stub
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%          libahci.ko
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       545.924          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
