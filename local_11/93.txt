# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 980.783 ns/op
# Warmup Iteration   2: 524.393 ns/op
# Warmup Iteration   3: 513.202 ns/op
# Warmup Iteration   4: 509.436 ns/op
# Warmup Iteration   5: 516.496 ns/op
Iteration   1: 514.721 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  514.721 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121333 total address lines.
Perf output processed (skipped 11.258 seconds):
 Column 1: cycles (1966 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (262 bytes) 

            0x00007efd9036bb7a: mov     0x8(%rsp),%r8d
            0x00007efd9036bb7f: mov     0x10(%rsp),%rbx
         ╭  0x00007efd9036bb84: jmp     0x7efd9036bb93
         │  0x00007efd9036bb86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007efd9036bb8b: add     $0xfffffffffffffff8,%r9
         │  0x00007efd9036bb8f: mov     %r9,0x70(%r15)
  0.76%  ↘  0x00007efd9036bb93: movl    $0x0,0x14(%rbx)
            0x00007efd9036bb9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.52%     0x00007efd9036bba0: mov     0x118(%r15),%r13
  0.05%     0x00007efd9036bba7: mov     %r13,%r10
            0x00007efd9036bbaa: add     $0x18,%r10
  0.66%     0x00007efd9036bbae: cmp     0x128(%r15),%r10
            0x00007efd9036bbb5: jnb     0x7efd9036c26a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efd9036bbbb: mov     %r10,0x118(%r15)
            0x00007efd9036bbc2: prefetchnta 0x100(%r10)
  0.15%     0x00007efd9036bbca: mov     0x18(%rsp),%r10
  0.86%     0x00007efd9036bbcf: mov     0xb8(%r10),%r10
            0x00007efd9036bbd6: mov     %r10,0x0(%r13)
            0x00007efd9036bbda: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
  0.05%     0x00007efd9036bbe2: movl    $0x0,0xc(%r13)
  0.81%     0x00007efd9036bbea: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efd9036bbf2: mov     %r14d,0x10(%r13)
            0x00007efd9036bbf6: mov     0x118(%r15),%rcx
            0x00007efd9036bbfd: mov     %rcx,%r10
  1.12%     0x00007efd9036bc00: add     $0x20,%r10
            0x00007efd9036bc04: cmp     0x128(%r15),%r10
            0x00007efd9036bc0b: jnb     0x7efd9036c2d5
  0.05%     0x00007efd9036bc11: mov     %r10,0x118(%r15)
            0x00007efd9036bc18: prefetchnta 0x100(%r10)
  0.76%     0x00007efd9036bc20: mov     0xb8(%rsi),%r10
            0x00007efd9036bc27: mov     %r10,(%rcx)
            0x00007efd9036bc2a: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007efd9036bc31: movl    $0x0,0xc(%rcx)
  0.51%     0x00007efd9036bc38: movq    $0x0,0x10(%rcx)
            0x00007efd9036bc40: movq    $0x0,0x18(%rcx)
            0x00007efd9036bc48: mov     0x118(%r15),%rax
            0x00007efd9036bc4f: mov     %rax,%r10
  0.56%     0x00007efd9036bc52: add     $0x10,%r10
            0x00007efd9036bc56: cmp     0x128(%r15),%r10
            0x00007efd9036bc5d: jnb     0x7efd9036c34a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efd9036bc63: mov     %r10,0x118(%r15)
            0x00007efd9036bc6a: prefetchnta 0x100(%r10)
  0.86%     0x00007efd9036bc72: mov     0x28(%rsp),%r10
  0.05%     0x00007efd9036bc77: mov     0xb8(%r10),%r10
            0x00007efd9036bc7e: mov     %r10,(%rax)
            0x00007efd9036bc81: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.81%     0x00007efd9036bc88: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efd9036bc8f: mov     %rcx,%r9
            0x00007efd9036bc92: mov     %rax,%r10
            0x00007efd9036bc95: mov     %r10d,0xc(%rcx)
  0.86%     0x00007efd9036bc99: mov     %rax,%r10
            0x00007efd9036bc9c: xor     %r9,%r10
            0x00007efd9036bc9f: shr     $0x14,%r10
            0x00007efd9036bca3: test    %r10,%r10
            0x00007efd9036bca6: je      0x7efd9036bd33
            0x00007efd9036bcac: shr     $0x9,%r9
            0x00007efd9036bcb0: movabs  $0x7efda5500000,%rdi
            0x00007efd9036bcba: add     %r9,%rdi
            0x00007efd9036bcbd: cmpb    $0x20,(%rdi)
            0x00007efd9036bcc0: je      0x7efd9036bd33
            0x00007efd9036bcc2: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.47%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007efd9036bfee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007efd9036bff2: mov     %r10,0x70(%r15)
            0x00007efd9036bff6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.94%     0x00007efd9036bffc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007efd9036c000: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007efd9036c6f0
            0x00007efd9036c004: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.56%     0x00007efd9036c009: mov     (%rsp),%r10
            0x00007efd9036c00d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007efd9036c013: vcvttss2si %xmm0,%r11d
  0.41%     0x00007efd9036c017: cmp     $0x80000000,%r11d
         ╭  0x00007efd9036c01e: jne     0x7efd9036c030
         │  0x00007efd9036c020: sub     $0x8,%rsp
         │  0x00007efd9036c024: vmovss  %xmm0,(%rsp)
         │  0x00007efd9036c029: callq   0x7efd888b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007efd9036c02e: pop     %r11
         ↘  0x00007efd9036c030: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007efd9036c034: mov     0xc(%rsp),%r11d
  0.71%     0x00007efd9036c039: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007efd9036c6fc
            0x00007efd9036c03d: mov     0x14(%rsp),%r8d
....................................................................................................
 27.06%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (262 bytes) 
 27.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 
  8.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (236 bytes) 
  8.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (231 bytes) 
  2.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (52 bytes) 
  2.39%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (35 bytes) 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (105 bytes) 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (16 bytes) 
  1.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (179 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (22 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 574 (55 bytes) 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 574 (22 bytes) 
  0.25%        libc-2.31.so  unlink_chunk.isra.0 (16 bytes) 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 547 (27 bytes) 
  0.15%   [kernel.kallsyms]  finish_task_switch (0 bytes) 
  0.15%   [kernel.kallsyms]  release_pages (0 bytes) 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 (41 bytes) 
  8.55%  <...other 136 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 
  2.39%   [kernel.kallsyms]  native_write_msr 
  0.56%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 574 
  0.41%        libc-2.31.so  malloc 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 547 
  0.31%        libc-2.31.so  _int_malloc 
  0.25%        libc-2.31.so  unlink_chunk.isra.0 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%   [kernel.kallsyms]  release_pages 
  0.25%        libc-2.31.so  _int_free 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk 
  0.20%   [kernel.kallsyms]  finish_task_switch 
  0.20%        libc-2.31.so  malloc_consolidate 
  0.15%           libjvm.so  ConstantPool::impl_signature_ref_at 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%        libc-2.31.so  cfree@GLIBC_2.2.5 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  5.75%  <...other 96 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.15%         c2, level 4
  6.71%   [kernel.kallsyms]
  2.24%           libjvm.so
  1.83%        libc-2.31.so
  0.81%    libfcml.so.0.0.0
  0.05%          ld-2.31.so
  0.05%              kvm.ko
  0.05%         interpreter
  0.05%    Unknown, level 0
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       514.721          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
