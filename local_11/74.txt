# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 909.728 ns/op
# Warmup Iteration   2: 537.993 ns/op
# Warmup Iteration   3: 532.637 ns/op
# Warmup Iteration   4: 532.261 ns/op
# Warmup Iteration   5: 536.647 ns/op
Iteration   1: 530.717 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  530.717 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 125923 total address lines.
Perf output processed (skipped 11.258 seconds):
 Column 1: cycles (1969 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (325 bytes) 

           0x00007f0c0c36a789: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                         ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
           0x00007f0c0c36a78e: add     $0xfffffffffffffff8,%r10
                                                         ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007f0c0c36a792: mov     %r10,0x70(%r15)
           0x00007f0c0c36a796: mov     0x10(%rsp),%r10
           0x00007f0c0c36a79b: movl    $0x0,0x14(%r10)
  0.05%    0x00007f0c0c36a7a3: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 22.91%    0x00007f0c0c36a7a9: mov     (%rsp),%r10
           0x00007f0c0c36a7ad: test    %r10,%r10
           0x00007f0c0c36a7b0: je      0x7f0c0c36adc0
           0x00007f0c0c36a7b6: mov     0x118(%r15),%rbx
  0.51%    0x00007f0c0c36a7bd: mov     %rbx,%r10
           0x00007f0c0c36a7c0: add     $0x18,%r10
           0x00007f0c0c36a7c4: cmp     0x128(%r15),%r10
           0x00007f0c0c36a7cb: jnb     0x7f0c0c36ad40    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007f0c0c36a7d1: mov     %r10,0x118(%r15)
  0.51%    0x00007f0c0c36a7d8: prefetchnta 0x100(%r10)
           0x00007f0c0c36a7e0: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007f0c0c36a7e6: movabs  $0x800000000,%r10
           0x00007f0c0c36a7f0: lea     (%r10,%r11,8),%r10
  0.76%    0x00007f0c0c36a7f4: mov     0xb8(%r10),%r10
           0x00007f0c0c36a7fb: mov     %r10,(%rbx)
           0x00007f0c0c36a7fe: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007f0c0c36a805: movl    $0x0,0xc(%rbx)
  0.96%    0x00007f0c0c36a80c: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
           0x00007f0c0c36a813: mov     (%rsp),%r10
           0x00007f0c0c36a817: mov     %r10,%r11
           0x00007f0c0c36a81a: mov     %r11d,0x10(%rbx)
  0.91%    0x00007f0c0c36a81e: mov     0x118(%r15),%rbp
           0x00007f0c0c36a825: mov     %rbp,%r10
           0x00007f0c0c36a828: add     $0x20,%r10
           0x00007f0c0c36a82c: cmp     0x128(%r15),%r10
           0x00007f0c0c36a833: jnb     0x7f0c0c36ad58
  0.86%    0x00007f0c0c36a839: mov     %r10,0x118(%r15)
           0x00007f0c0c36a840: prefetchnta 0x100(%r10)
  0.05%    0x00007f0c0c36a848: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007f0c0c36a84e: movabs  $0x800000000,%r10
  0.30%    0x00007f0c0c36a858: lea     (%r10,%r11,8),%r10
           0x00007f0c0c36a85c: mov     0xb8(%r10),%r10
  0.05%    0x00007f0c0c36a863: mov     %r10,0x0(%rbp)
           0x00007f0c0c36a867: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.30%    0x00007f0c0c36a86e: movl    $0x0,0xc(%rbp)
           0x00007f0c0c36a875: movq    $0x0,0x10(%rbp)
           0x00007f0c0c36a87d: movq    $0x0,0x18(%rbp)
           0x00007f0c0c36a885: mov     0x118(%r15),%rax
  0.61%    0x00007f0c0c36a88c: mov     %rax,%r10
  0.05%    0x00007f0c0c36a88f: add     $0x10,%r10
           0x00007f0c0c36a893: cmp     0x128(%r15),%r10
           0x00007f0c0c36a89a: jnb     0x7f0c0c36ad81    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
  0.05%    0x00007f0c0c36a8a0: mov     %r10,0x118(%r15)
  0.76%    0x00007f0c0c36a8a7: prefetchnta 0x100(%r10)
           0x00007f0c0c36a8af: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007f0c0c36a8b5: movabs  $0x800000000,%r10
           0x00007f0c0c36a8bf: lea     (%r10,%r11,8),%r10
  1.07%    0x00007f0c0c36a8c3: mov     0xb8(%r10),%r10
  0.05%    0x00007f0c0c36a8ca: mov     %r10,(%rax)
  0.05%    0x00007f0c0c36a8cd: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007f0c0c36a8d4: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.81%    0x00007f0c0c36a8db: mov     %rbp,%r11
           0x00007f0c0c36a8de: mov     %rax,%r10
           0x00007f0c0c36a8e1: mov     %r10d,0xc(%rbp)
           0x00007f0c0c36a8e5: mov     %rax,%r10
  0.46%    0x00007f0c0c36a8e8: xor     %r11,%r10
           0x00007f0c0c36a8eb: shr     $0x14,%r10
           0x00007f0c0c36a8ef: test    %r10,%r10
           0x00007f0c0c36a8f2: je      0x7f0c0c36a947
           0x00007f0c0c36a8f4: shr     $0x9,%r11
           0x00007f0c0c36a8f8: movabs  $0x7f0c20058000,%rdi
           0x00007f0c0c36a902: add     %r11,%rdi
           0x00007f0c0c36a905: cmpb    $0x20,(%rdi)
           0x00007f0c0c36a908: je      0x7f0c0c36a947
           0x00007f0c0c36a90a: mov     0x70(%r15),%r10
           0x00007f0c0c36a90e: mov     0x80(%r15),%r11
....................................................................................................
 32.10%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (84 bytes) 

             0x00007f0c0c36ab9f: movabs  $0x7f0c221ef290,%r10
             0x00007f0c0c36aba9: callq   %r10
         ╭   0x00007f0c0c36abac: jmp     0x7f0c0c36abbb
         │   0x00007f0c0c36abae: mov     %rbp,0xfffffffffffffff8(%r11,%r10)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │   0x00007f0c0c36abb3: add     $0xfffffffffffffff8,%r10
         │                                                 ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │   0x00007f0c0c36abb7: mov     %r10,0x70(%r15)
  0.56%  ↘   0x00007f0c0c36abbb: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 16.61%      0x00007f0c0c36abc1: mov     0x10(%rsp),%r10
             0x00007f0c0c36abc6: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
  0.10%      0x00007f0c0c36abca: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; implicit exception: dispatches to 0x00007f0c0c36ae60
  0.91%      0x00007f0c0c36abce: vcvtsi2ssl %r10d,%xmm1,%xmm1
             0x00007f0c0c36abd3: mov     (%rsp),%r10
             0x00007f0c0c36abd7: vmulss  0x14(%r10),%xmm1,%xmm0
  0.71%      0x00007f0c0c36abdd: vcvttss2si %xmm0,%r11d
  0.05%      0x00007f0c0c36abe1: cmp     $0x80000000,%r11d
          ╭  0x00007f0c0c36abe8: jne     0x7f0c0c36abfa
          │  0x00007f0c0c36abea: sub     $0x8,%rsp
          │  0x00007f0c0c36abee: vmovss  %xmm0,(%rsp)
          │  0x00007f0c0c36abf3: callq   0x7f0c048b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007f0c0c36abf8: pop     %r11
          ↘  0x00007f0c0c36abfa: mov     0x10(%rsp),%r10
  0.91%      0x00007f0c0c36abff: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
             0x00007f0c0c36ac03: add     $0x60,%rsp
             0x00007f0c0c36ac07: pop     %rbp
             0x00007f0c0c36ac08: mov     0x108(%r15),%r10
  0.56%      0x00007f0c0c36ac0f: test    %eax,(%r10)       ;   {poll_return}
             0x00007f0c0c36ac12: retq
             0x00007f0c0c36ac13: mov     %rsi,0x10(%rsp)
             0x00007f0c0c36ac18: mov     0x24(%rsi),%r11d
             0x00007f0c0c36ac1c: test    %r11d,%r11d
             0x00007f0c0c36ac1f: je      0x7f0c0c36a634
             0x00007f0c0c36ac25: mov     0x38(%r15),%r10
             0x00007f0c0c36ac29: mov     %r11,%rdi
             0x00007f0c0c36ac2c: test    %r10,%r10
             0x00007f0c0c36ac2f: je      0x7f0c0c36add4
             0x00007f0c0c36ac35: mov     0x48(%r15),%r11
....................................................................................................
 20.42%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (256 bytes) 

             0x00007f0c0c37247c: movabs  $0x7f0c221ef290,%r10
             0x00007f0c0c372486: callq   %r10
             0x00007f0c0c372489: mov     %ebx,%r10d
             0x00007f0c0c37248c: nopl    0x0(%rax)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007f0c0c372490: mov     0x108(%r15),%r11
  0.56%  ││  0x00007f0c0c372497: mov     0x18(%rsp),%r9
  0.05%  ││  0x00007f0c0c37249c: mov     0x1c(%r9),%ecx    ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f0c0c3724a0: incl    %r10d             ; ImmutableOopMap{r9=Oop rcx=NarrowOop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f0c0c3724a3: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
  0.91%  ││  0x00007f0c0c3724a6: mov     0xc(%rcx),%r8d    ; implicit exception: dispatches to 0x00007f0c0c372a20
  0.05%  ││  0x00007f0c0c3724aa: cmp     %r8d,%r10d
         ││  0x00007f0c0c3724ad: jnl     0x7f0c0c37216d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f0c0c3724b3: mov     0x70(%rsp),%r8
         ││  0x00007f0c0c3724b8: mov     0x20(%rsp),%rbp
  0.66%  ││  0x00007f0c0c3724bd: mov     0x10(%rsp),%rbx
         ││  0x00007f0c0c3724c2: mov     0x28(%rsp),%r13d
         ││  0x00007f0c0c3724c7: mov     0x118(%r15),%rax
         ││  0x00007f0c0c3724ce: mov     %rax,%r11
  1.02%  ││  0x00007f0c0c3724d1: add     $0x28,%r11
         ││  0x00007f0c0c3724d5: cmp     0x128(%r15),%r11
         ││  0x00007f0c0c3724dc: jnb     0x7f0c0c372635    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f0c0c3724e2: mov     %r11,0x118(%r15)
         ││  0x00007f0c0c3724e9: prefetchnta 0x100(%r11)
  0.76%  ││  0x00007f0c0c3724f1: mov     (%rsp),%r11
  0.05%  ││  0x00007f0c0c3724f5: mov     0xb8(%r11),%rdi
         ││  0x00007f0c0c3724fc: mov     %rdi,(%rax)
  0.10%  ││  0x00007f0c0c3724ff: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.81%  ││  0x00007f0c0c372506: movl    $0x0,0xc(%rax)
  0.05%  ││  0x00007f0c0c37250d: movq    $0x0,0x10(%rax)
         ││  0x00007f0c0c372515: movq    $0x0,0x18(%rax)
         ││  0x00007f0c0c37251d: movq    $0x0,0x20(%rax)
  0.71%  ││  0x00007f0c0c372525: mov     %r8,0x70(%rsp)
  0.05%  ││  0x00007f0c0c37252a: mov     %rbp,0x20(%rsp)
  0.05%  ││  0x00007f0c0c37252f: mov     %rbx,0x10(%rsp)
  0.05%  ││  0x00007f0c0c372534: mov     %r9,0x18(%rsp)
  0.86%  ││  0x00007f0c0c372539: mov     %r13d,0x28(%rsp)
  0.05%  ││  0x00007f0c0c37253e: mov     %ecx,0x2c(%rsp)
         ││  0x00007f0c0c372542: mov     %r10d,0x30(%rsp)
         ││  0x00007f0c0c372547: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.81%  ││  0x00007f0c0c37254c: mov     %rax,%rsi
         ││  0x00007f0c0c37254f: mov     0x18(%rsp),%rdx
  0.51%  ││  0x00007f0c0c372554: mov     0x28(%rsp),%ecx
  0.10%  ││  0x00007f0c0c372558: nop
  0.61%  ││  0x00007f0c0c37255b: callq   0x7f0c0489d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007f0c0c372560: mov     0x2c(%rsp),%r11d
  0.56%  ││  0x00007f0c0c372565: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f0c0c372a14
         ││  0x00007f0c0c372569: mov     0x30(%rsp),%r10d
         ││  0x00007f0c0c37256e: cmp     %r8d,%r10d
         ││  0x00007f0c0c372571: jnb     0x7f0c0c372713
         ││  0x00007f0c0c372577: mov     %r11,%r8          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.91%  ││  0x00007f0c0c37257a: lea     0x10(%r11,%r10,4),%rbx
  0.05%  ││  0x00007f0c0c37257f: cmpb    $0x0,0x30(%r15)
         ││  0x00007f0c0c372584: jne     0x7f0c0c372603
         ││  0x00007f0c0c372586: mov     0x38(%rsp),%r11
  1.02%  ││  0x00007f0c0c37258b: mov     %r11,%r9
         ││  0x00007f0c0c37258e: mov     %r11,%r8
         ││  0x00007f0c0c372591: mov     %r8d,(%rbx)
         ││  0x00007f0c0c372594: mov     %rbx,%r11
  0.61%  ││  0x00007f0c0c372597: xor     %r11,%r9
         ││  0x00007f0c0c37259a: shr     $0x14,%r9
         ││  0x00007f0c0c37259e: test    %r9,%r9
         ╰│  0x00007f0c0c3725a1: je      0x7f0c0c372490
          │  0x00007f0c0c3725a7: shr     $0x9,%r11
          │  0x00007f0c0c3725ab: movabs  $0x7f0c20058000,%rdi
          │  0x00007f0c0c3725b5: add     %r11,%rdi
          │  0x00007f0c0c3725b8: cmpb    $0x20,(%rdi)
          ╰  0x00007f0c0c3725bb: je      0x7f0c0c372490
             0x00007f0c0c3725c1: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 11.99%  <total for region 3>

....[Hottest Regions]...............................................................................
 32.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (325 bytes) 
 20.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (84 bytes) 
 11.99%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (256 bytes) 
  7.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (188 bytes) 
  4.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (140 bytes) 
  3.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (54 bytes) 
  2.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (39 bytes) 
  1.78%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (3 bytes) 
  1.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (15 bytes) 
  0.76%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 (0 bytes) 
  0.61%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (89 bytes) 
  0.56%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (51 bytes) 
  0.51%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (102 bytes) 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk (7 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.25%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (16 bytes) 
  0.20%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.20%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (22 bytes) 
  9.40%  <...other 156 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 73.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 547 
 15.69%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 
  0.56%        libc-2.31.so  malloc 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%        libc-2.31.so  _int_malloc 
  0.36%   [kernel.kallsyms]  native_write_msr 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.25%        libc-2.31.so  _int_free 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 556 
  0.20%        libc-2.31.so  malloc_consolidate 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%    libfcml.so.0.0.0  fcml_fn_coll_list_free 
  0.15%           libjvm.so  HeapRegionRemSetIterator::HeapRegionRemSetIterator 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%        libc-2.31.so  __memset_avx2_erms 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  0.10%   [kernel.kallsyms]  __mod_node_page_state 
  6.75%  <...other 117 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.93%         c2, level 4
  4.67%   [kernel.kallsyms]
  3.05%           libjvm.so
  2.29%        libc-2.31.so
  0.86%    libfcml.so.0.0.0
  0.05%        runtime stub
  0.05%              [vdso]
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       530.717          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
