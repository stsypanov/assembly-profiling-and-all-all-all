# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 832.649 ns/op
# Warmup Iteration   2: 532.660 ns/op
# Warmup Iteration   3: 518.526 ns/op
# Warmup Iteration   4: 516.751 ns/op
# Warmup Iteration   5: 520.135 ns/op
Iteration   1: 514.467 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  514.467 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 117431 total address lines.
Perf output processed (skipped 11.099 seconds):
 Column 1: cycles (1898 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (261 bytes) 

            0x00007f4a4436a379: mov     0x8(%rsp),%r10d
            0x00007f4a4436a37e: mov     0x10(%rsp),%rbx
         ╭  0x00007f4a4436a383: jmp     0x7f4a4436a392
         │  0x00007f4a4436a385: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f4a4436a38a: add     $0xfffffffffffffff8,%r9
         │  0x00007f4a4436a38e: mov     %r9,0x70(%r15)
  0.58%  ↘  0x00007f4a4436a392: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f4a4436a399: lock addl $0x0,0xffffffffffffffc0(%rsp)
 25.76%     0x00007f4a4436a39f: mov     0x118(%r15),%r14
  0.16%     0x00007f4a4436a3a6: mov     %r14,%r8
            0x00007f4a4436a3a9: add     $0x18,%r8
  0.63%     0x00007f4a4436a3ad: cmp     0x128(%r15),%r8
            0x00007f4a4436a3b4: jnb     0x7f4a4436aa7d    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f4a4436a3ba: mov     %r8,0x118(%r15)
            0x00007f4a4436a3c1: prefetchnta 0x100(%r8)
  0.05%     0x00007f4a4436a3c9: mov     0x18(%rsp),%r8
  0.95%     0x00007f4a4436a3ce: mov     0xb8(%r8),%r8
            0x00007f4a4436a3d5: mov     %r8,(%r14)
            0x00007f4a4436a3d8: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f4a4436a3e0: movl    $0x0,0xc(%r14)
  0.63%     0x00007f4a4436a3e8: movl    $0x0,0x14(%r14)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4a4436a3f0: mov     %esi,0x10(%r14)
            0x00007f4a4436a3f4: mov     0x118(%r15),%rcx
  0.05%     0x00007f4a4436a3fb: mov     %rcx,%r8
  0.53%     0x00007f4a4436a3fe: add     $0x20,%r8
            0x00007f4a4436a402: cmp     0x128(%r15),%r8
            0x00007f4a4436a409: jnb     0x7f4a4436aae8
            0x00007f4a4436a40f: mov     %r8,0x118(%r15)
            0x00007f4a4436a416: prefetchnta 0x100(%r8)
  0.79%     0x00007f4a4436a41e: mov     0xb8(%r13),%r8
  0.05%     0x00007f4a4436a425: mov     %r8,(%rcx)
            0x00007f4a4436a428: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f4a4436a42f: movl    $0x0,0xc(%rcx)
  1.11%     0x00007f4a4436a436: movq    $0x0,0x10(%rcx)
            0x00007f4a4436a43e: movq    $0x0,0x18(%rcx)
            0x00007f4a4436a446: mov     0x118(%r15),%rax
  0.11%     0x00007f4a4436a44d: mov     %rax,%r8
  0.42%     0x00007f4a4436a450: add     $0x10,%r8
            0x00007f4a4436a454: cmp     0x128(%r15),%r8
            0x00007f4a4436a45b: jnb     0x7f4a4436ab5d    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f4a4436a461: mov     %r8,0x118(%r15)
            0x00007f4a4436a468: prefetchnta 0x100(%r8)
  1.00%     0x00007f4a4436a470: mov     0x28(%rsp),%r8
  0.05%     0x00007f4a4436a475: mov     0xb8(%r8),%r8
            0x00007f4a4436a47c: mov     %r8,(%rax)
            0x00007f4a4436a47f: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.74%     0x00007f4a4436a486: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4a4436a48d: mov     %rcx,%r9
            0x00007f4a4436a490: mov     %rax,%r8
            0x00007f4a4436a493: mov     %r8d,0xc(%rcx)
  0.74%     0x00007f4a4436a497: mov     %rax,%r8
            0x00007f4a4436a49a: xor     %r9,%r8
            0x00007f4a4436a49d: shr     $0x14,%r8
            0x00007f4a4436a4a1: test    %r8,%r8
            0x00007f4a4436a4a4: je      0x7f4a4436a535
            0x00007f4a4436a4aa: shr     $0x9,%r9
            0x00007f4a4436a4ae: movabs  $0x7f4a58574000,%rdi
            0x00007f4a4436a4b8: add     %r9,%rdi
            0x00007f4a4436a4bb: cmpb    $0x20,(%rdi)
            0x00007f4a4436a4be: je      0x7f4a4436a535
            0x00007f4a4436a4c0: mov     0x80(%r15),%r8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 34.46%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (119 bytes) 

            0x00007f4a4436a7ff: jmp     0x7f4a4436a80e
            0x00007f4a4436a801: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f4a4436a806: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f4a4436a80a: mov     %r10,0x70(%r15)
  0.68%     0x00007f4a4436a80e: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.50%     0x00007f4a4436a814: mov     0x20(%r8),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f4a4436a818: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f4a4436aef4
            0x00007f4a4436a81c: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.84%     0x00007f4a4436a821: mov     (%rsp),%r10
            0x00007f4a4436a825: vmulss  0x14(%r10),%xmm0,%xmm1
  0.05%     0x00007f4a4436a82b: vcvttss2si %xmm1,%r11d
  0.63%     0x00007f4a4436a82f: cmp     $0x80000000,%r11d
         ╭  0x00007f4a4436a836: jne     0x7f4a4436a848
         │  0x00007f4a4436a838: sub     $0x8,%rsp
         │  0x00007f4a4436a83c: vmovss  %xmm1,(%rsp)
         │  0x00007f4a4436a841: callq   0x7f4a3c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f4a4436a846: pop     %r11
  0.05%  ↘  0x00007f4a4436a848: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f4a4436a84c: mov     0xc(%rsp),%r11d
  0.42%     0x00007f4a4436a851: mov     0xc(%r11),%r9d    ; implicit exception: dispatches to 0x00007f4a4436af00
            0x00007f4a4436a855: mov     0x14(%rsp),%r10d
            0x00007f4a4436a85a: cmp     %r9d,%r10d
            0x00007f4a4436a85d: jnb     0x7f4a4436ac9c
            0x00007f4a4436a863: mov     %r11,%r9          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.63%     0x00007f4a4436a866: lea     0x10(%r11,%r10,4),%rbx
            0x00007f4a4436a86b: cmpb    $0x0,0x30(%r15)
            0x00007f4a4436a870: jne     0x7f4a4436a995
            0x00007f4a4436a876: mov     %r8,%r9
  0.42%     0x00007f4a4436a879: mov     %r8,%r11
            0x00007f4a4436a87c: mov     %r11d,(%rbx)
            0x00007f4a4436a87f: mov     %rbx,%r11
            0x00007f4a4436a882: xor     %r11,%r9
  0.84%     0x00007f4a4436a885: shr     $0x14,%r9
            0x00007f4a4436a889: test    %r9,%r9
            0x00007f4a4436a88c: je      0x7f4a4436a217
            0x00007f4a4436a892: shr     $0x9,%r11
            0x00007f4a4436a896: movabs  $0x7f4a58574000,%rdi
            0x00007f4a4436a8a0: add     %r11,%rdi
            0x00007f4a4436a8a3: cmpb    $0x20,(%rdi)
            0x00007f4a4436a8a6: je      0x7f4a4436a217
            0x00007f4a4436a8ac: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 30.14%  <total for region 2>

....[Hottest Regions]...............................................................................
 34.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (261 bytes) 
 30.14%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (119 bytes) 
  8.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (234 bytes) 
  8.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (207 bytes) 
  2.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (35 bytes) 
  2.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (13 bytes) 
  1.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (28 bytes) 
  1.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (0 bytes) 
  1.00%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (87 bytes) 
  0.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (94 bytes) 
  0.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (31 bytes) 
  0.32%        libc-2.31.so  malloc (0 bytes) 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 (52 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (43 bytes) 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (22 bytes) 
  0.21%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 571 (22 bytes) 
  0.21%           libjvm.so  SpinPause (9 bytes) 
  0.16%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  7.06%  <...other 119 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 90.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 
  1.00%   [kernel.kallsyms]  native_write_msr 
  0.42%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 571 
  0.37%        libc-2.31.so  malloc 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%        libc-2.31.so  _int_free 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 
  0.26%        libc-2.31.so  malloc_consolidate 
  0.21%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.21%        libc-2.31.so  _int_malloc 
  0.21%           libjvm.so  SpinPause 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.21%           libjvm.so  ThreadLocalAllocBuffer::fill 
  0.16%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.16%    libfcml.so.0.0.0  fcml_fn_mp_parse_mnemonics 
  0.16%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.11%           libjvm.so  OptoRuntime::new_instance_C 
  0.11%   [kernel.kallsyms]  psi_group_change 
  0.11%        libc-2.31.so  unlink_chunk.isra.0 
  0.11%           libjvm.so  defaultStream::hold 
  4.48%  <...other 82 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 91.36%         c2, level 4
  3.74%   [kernel.kallsyms]
  2.58%           libjvm.so
  1.63%        libc-2.31.so
  0.58%    libfcml.so.0.0.0
  0.05%          ld-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       514.467          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
