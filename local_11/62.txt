# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 937.244 ns/op
# Warmup Iteration   2: 542.147 ns/op
# Warmup Iteration   3: 529.209 ns/op
# Warmup Iteration   4: 528.708 ns/op
# Warmup Iteration   5: 532.320 ns/op
Iteration   1: 532.529 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  532.529 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121712 total address lines.
Perf output processed (skipped 11.349 seconds):
 Column 1: cycles (1955 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f20cc36a5ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f20cc36a5f2: mov     %r10,0x70(%r15)
            0x00007f20cc36a5f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.50%     0x00007f20cc36a5fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f20cc36a600: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f20cc36acf0
            0x00007f20cc36a604: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.66%     0x00007f20cc36a609: mov     (%rsp),%r10
            0x00007f20cc36a60d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f20cc36a613: vcvttss2si %xmm0,%r11d
  0.97%     0x00007f20cc36a617: cmp     $0x80000000,%r11d
         ╭  0x00007f20cc36a61e: jne     0x7f20cc36a630
         │  0x00007f20cc36a620: sub     $0x8,%rsp
         │  0x00007f20cc36a624: vmovss  %xmm0,(%rsp)
         │  0x00007f20cc36a629: callq   0x7f20c48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f20cc36a62e: pop     %r11
         ↘  0x00007f20cc36a630: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f20cc36a634: mov     0xc(%rsp),%r11d
  0.61%     0x00007f20cc36a639: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f20cc36acfc
            0x00007f20cc36a63d: mov     0x14(%rsp),%r8d
....................................................................................................
 28.29%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (27 bytes) 

            0x00007f20cc36a17a: mov     0x8(%rsp),%r8d
            0x00007f20cc36a17f: mov     0x10(%rsp),%rbx
         ╭  0x00007f20cc36a184: jmp     0x7f20cc36a193
         │  0x00007f20cc36a186: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f20cc36a18b: add     $0xfffffffffffffff8,%r9
         │  0x00007f20cc36a18f: mov     %r9,0x70(%r15)
  0.82%  ↘  0x00007f20cc36a193: movl    $0x0,0x14(%rbx)
            0x00007f20cc36a19a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.84%     0x00007f20cc36a1a0: mov     0x118(%r15),%r13
            0x00007f20cc36a1a7: mov     %r13,%r10
            0x00007f20cc36a1aa: add     $0x18,%r10
  0.77%     0x00007f20cc36a1ae: cmp     0x128(%r15),%r10
            0x00007f20cc36a1b5: jnb     0x7f20cc36a86a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f20cc36a1bb: mov     %r10,0x118(%r15)
            0x00007f20cc36a1c2: prefetchnta 0x100(%r10)
            0x00007f20cc36a1ca: mov     0x18(%rsp),%r10
  0.97%     0x00007f20cc36a1cf: mov     0xb8(%r10),%r10
            0x00007f20cc36a1d6: mov     %r10,0x0(%r13)
            0x00007f20cc36a1da: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f20cc36a1e2: movl    $0x0,0xc(%r13)
....................................................................................................
 25.42%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (27 bytes) 
 25.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (27 bytes) 
  9.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (239 bytes) 
  8.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (231 bytes) 
  6.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (212 bytes) 
  2.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (52 bytes) 
  2.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (35 bytes) 
  1.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (71 bytes) 
  1.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (13 bytes) 
  1.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (171 bytes) 
  1.13%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (36 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 (77 bytes) 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 548 (65 bytes) 
  0.31%        libc-2.31.so  _int_free (17 bytes) 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.26%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (53 bytes) 
  0.26%           libjvm.so  SpinPause (7 bytes) 
  0.26%        libc-2.31.so  malloc_consolidate (29 bytes) 
  9.00%  <...other 134 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 545 
  1.13%   [kernel.kallsyms]  native_write_msr 
  0.51%        libc-2.31.so  malloc 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%        libc-2.31.so  _int_free 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 548 
  0.31%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.26%           libjvm.so  SpinPause 
  0.26%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.20%        libc-2.31.so  _int_malloc 
  0.20%           libjvm.so  G1FromCardCache::clear 
  0.20%   [kernel.kallsyms]  switch_fpu_return 
  0.20%              [vdso]  __vdso_clock_gettime 
  0.15%           libjvm.so  OtherRegionsTable::clear_fcc 
  0.15%    libfcml.so.0.0.0  fcml_fn_mp_parse_mnemonics 
  0.15%   [kernel.kallsyms]  release_pages 
  5.78%  <...other 97 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 88.90%         c2, level 4
  4.65%   [kernel.kallsyms]
  3.07%           libjvm.so
  1.94%        libc-2.31.so
  0.87%    libfcml.so.0.0.0
  0.20%              [vdso]
  0.10%          ld-2.31.so
  0.10%         interpreter
  0.05%                    
  0.05%      perf-24214.map
  0.05%           nvidia.ko
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       532.529          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
