# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 848.325 ns/op
# Warmup Iteration   2: 552.365 ns/op
# Warmup Iteration   3: 537.375 ns/op
# Warmup Iteration   4: 534.091 ns/op
# Warmup Iteration   5: 539.319 ns/op
Iteration   1: 534.052 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  534.052 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120415 total address lines.
Perf output processed (skipped 11.328 seconds):
 Column 1: cycles (1941 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f68a036aeee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f68a036aef2: mov     %r10,0x70(%r15)
            0x00007f68a036aef6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.33%     0x00007f68a036aefc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f68a036af00: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f68a036b5f0
            0x00007f68a036af04: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.98%     0x00007f68a036af09: mov     (%rsp),%r10
            0x00007f68a036af0d: vmulss  0x14(%r10),%xmm1,%xmm0
  0.10%     0x00007f68a036af13: vcvttss2si %xmm0,%r11d
  0.82%     0x00007f68a036af17: cmp     $0x80000000,%r11d
         ╭  0x00007f68a036af1e: jne     0x7f68a036af30
         │  0x00007f68a036af20: sub     $0x8,%rsp
         │  0x00007f68a036af24: vmovss  %xmm0,(%rsp)
         │  0x00007f68a036af29: callq   0x7f68988b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f68a036af2e: pop     %r11
  0.05%  ↘  0x00007f68a036af30: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f68a036af34: mov     0xc(%rsp),%r11d
  0.72%     0x00007f68a036af39: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f68a036b5fc
            0x00007f68a036af3d: mov     0x14(%rsp),%r8d
            0x00007f68a036af42: cmp     %ecx,%r8d
            0x00007f68a036af45: jnb     0x7f68a036b38c
            0x00007f68a036af4b: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.77%     0x00007f68a036af4e: lea     0x10(%r11,%r8,4),%rbx
            0x00007f68a036af53: cmpb    $0x0,0x30(%r15)
            0x00007f68a036af58: jne     0x7f68a036b07d
            0x00007f68a036af5e: mov     %r9,%r11
  0.88%     0x00007f68a036af61: mov     %r9,%r10
            0x00007f68a036af64: mov     %r10d,(%rbx)
            0x00007f68a036af67: mov     %rbx,%r10
            0x00007f68a036af6a: xor     %r10,%r11
  0.82%     0x00007f68a036af6d: shr     $0x14,%r11
            0x00007f68a036af71: test    %r11,%r11
            0x00007f68a036af74: je      0x7f68a036a91a
            0x00007f68a036af7a: shr     $0x9,%r10
            0x00007f68a036af7e: movabs  $0x7f6897c9e000,%rdi
            0x00007f68a036af88: add     %r10,%rdi
            0x00007f68a036af8b: cmpb    $0x20,(%rdi)
            0x00007f68a036af8e: je      0x7f68a036a91a
            0x00007f68a036af94: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 31.63%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 

            0x00007f68a036aa7a: mov     0x8(%rsp),%r8d
            0x00007f68a036aa7f: mov     0x10(%rsp),%rbx
         ╭  0x00007f68a036aa84: jmp     0x7f68a036aa93
         │  0x00007f68a036aa86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f68a036aa8b: add     $0xfffffffffffffff8,%r9
         │  0x00007f68a036aa8f: mov     %r9,0x70(%r15)
  0.67%  ↘  0x00007f68a036aa93: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f68a036aa9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.15%     0x00007f68a036aaa0: mov     0x118(%r15),%r13
  0.05%     0x00007f68a036aaa7: mov     %r13,%r10
            0x00007f68a036aaaa: add     $0x18,%r10
  0.98%     0x00007f68a036aaae: cmp     0x128(%r15),%r10
            0x00007f68a036aab5: jnb     0x7f68a036b16a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f68a036aabb: mov     %r10,0x118(%r15)
            0x00007f68a036aac2: prefetchnta 0x100(%r10)
            0x00007f68a036aaca: mov     0x18(%rsp),%r10
  0.77%     0x00007f68a036aacf: mov     0xb8(%r10),%r10
  0.05%     0x00007f68a036aad6: mov     %r10,0x0(%r13)
            0x00007f68a036aada: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f68a036aae2: movl    $0x0,0xc(%r13)
....................................................................................................
 23.91%  <total for region 2>

....[Hottest Regions]...............................................................................
 31.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (113 bytes) 
 23.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 
  9.17%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (236 bytes) 
  9.17%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (231 bytes) 
  6.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (202 bytes) 
  2.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (35 bytes) 
  1.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (13 bytes) 
  1.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (28 bytes) 
  1.13%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (87 bytes) 
  0.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (52 bytes) 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (43 bytes) 
  0.26%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  0.21%   [kernel.kallsyms]  __perf_event_task_sched_in (0 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (56 bytes) 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (0 bytes) 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 (27 bytes) 
  0.21%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 (33 bytes) 
  9.02%  <...other 136 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 
  1.13%   [kernel.kallsyms]  native_write_msr 
  0.41%        libc-2.31.so  malloc 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%        libc-2.31.so  malloc_consolidate 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 
  0.26%        libc-2.31.so  _int_malloc 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.26%        libc-2.31.so  _int_free 
  0.21%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.21%           libjvm.so  SpinPause 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%   [kernel.kallsyms]  __schedule 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  5.87%  <...other 98 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.97%         c2, level 4
  4.74%   [kernel.kallsyms]
  3.09%           libjvm.so
  1.91%        libc-2.31.so
  0.98%    libfcml.so.0.0.0
  0.15%         interpreter
  0.05%  libpthread-2.31.so
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       534.052          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
