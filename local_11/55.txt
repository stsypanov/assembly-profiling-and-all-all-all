# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 885.345 ns/op
# Warmup Iteration   2: 551.617 ns/op
# Warmup Iteration   3: 531.236 ns/op
# Warmup Iteration   4: 532.009 ns/op
# Warmup Iteration   5: 536.024 ns/op
Iteration   1: 538.935 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  538.935 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121469 total address lines.
Perf output processed (skipped 11.237 seconds):
 Column 1: cycles (1946 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (261 bytes) 

            0x00007f622436a179: mov     0x8(%rsp),%r10d
            0x00007f622436a17e: mov     0x10(%rsp),%rbx
         ╭  0x00007f622436a183: jmp     0x7f622436a192
         │  0x00007f622436a185: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f622436a18a: add     $0xfffffffffffffff8,%r9
         │  0x00007f622436a18e: mov     %r9,0x70(%r15)
  0.72%  ↘  0x00007f622436a192: movl    $0x0,0x14(%rbx)
  0.10%     0x00007f622436a199: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.36%     0x00007f622436a19f: mov     0x118(%r15),%r14
  0.10%     0x00007f622436a1a6: mov     %r14,%r8
            0x00007f622436a1a9: add     $0x18,%r8
  0.87%     0x00007f622436a1ad: cmp     0x128(%r15),%r8
            0x00007f622436a1b4: jnb     0x7f622436a87d    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f622436a1ba: mov     %r8,0x118(%r15)
            0x00007f622436a1c1: prefetchnta 0x100(%r8)
  0.05%     0x00007f622436a1c9: mov     0x18(%rsp),%r8
  0.57%     0x00007f622436a1ce: mov     0xb8(%r8),%r8
            0x00007f622436a1d5: mov     %r8,(%r14)
            0x00007f622436a1d8: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f622436a1e0: movl    $0x0,0xc(%r14)
  0.92%     0x00007f622436a1e8: movl    $0x0,0x14(%r14)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f622436a1f0: mov     %esi,0x10(%r14)
            0x00007f622436a1f4: mov     0x118(%r15),%rcx
            0x00007f622436a1fb: mov     %rcx,%r8
  0.41%     0x00007f622436a1fe: add     $0x20,%r8
            0x00007f622436a202: cmp     0x128(%r15),%r8
            0x00007f622436a209: jnb     0x7f622436a8e8
  0.05%     0x00007f622436a20f: mov     %r8,0x118(%r15)
            0x00007f622436a216: prefetchnta 0x100(%r8)
  0.51%     0x00007f622436a21e: mov     0xb8(%r13),%r8
  0.05%     0x00007f622436a225: mov     %r8,(%rcx)
            0x00007f622436a228: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f622436a22f: movl    $0x0,0xc(%rcx)
  0.51%     0x00007f622436a236: movq    $0x0,0x10(%rcx)
            0x00007f622436a23e: movq    $0x0,0x18(%rcx)
            0x00007f622436a246: mov     0x118(%r15),%rax
            0x00007f622436a24d: mov     %rax,%r8
  0.57%     0x00007f622436a250: add     $0x10,%r8
            0x00007f622436a254: cmp     0x128(%r15),%r8
            0x00007f622436a25b: jnb     0x7f622436a95d    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f622436a261: mov     %r8,0x118(%r15)
            0x00007f622436a268: prefetchnta 0x100(%r8)
  0.77%     0x00007f622436a270: mov     0x28(%rsp),%r8
  0.05%     0x00007f622436a275: mov     0xb8(%r8),%r8
  0.05%     0x00007f622436a27c: mov     %r8,(%rax)
            0x00007f622436a27f: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.82%     0x00007f622436a286: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f622436a28d: mov     %rcx,%r9
            0x00007f622436a290: mov     %rax,%r8
            0x00007f622436a293: mov     %r8d,0xc(%rcx)
  1.18%     0x00007f622436a297: mov     %rax,%r8
            0x00007f622436a29a: xor     %r9,%r8
            0x00007f622436a29d: shr     $0x14,%r8
            0x00007f622436a2a1: test    %r8,%r8
            0x00007f622436a2a4: je      0x7f622436a335
            0x00007f622436a2aa: shr     $0x9,%r9
            0x00007f622436a2ae: movabs  $0x7f623808f000,%rdi
            0x00007f622436a2b8: add     %r9,%rdi
            0x00007f622436a2bb: cmpb    $0x20,(%rdi)
            0x00007f622436a2be: je      0x7f622436a335
            0x00007f622436a2c0: mov     0x80(%r15),%r8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 32.68%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (123 bytes) 

            0x00007f622436a5ff: jmp     0x7f622436a60e
            0x00007f622436a601: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f622436a606: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f622436a60a: mov     %r10,0x70(%r15)
  0.77%     0x00007f622436a60e: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.49%     0x00007f622436a614: mov     0x20(%r8),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.21%     0x00007f622436a618: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f622436acf4
  0.05%     0x00007f622436a61c: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.51%     0x00007f622436a621: mov     (%rsp),%r10
            0x00007f622436a625: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f622436a62b: vcvttss2si %xmm1,%r11d
  0.98%     0x00007f622436a62f: cmp     $0x80000000,%r11d
         ╭  0x00007f622436a636: jne     0x7f622436a648
         │  0x00007f622436a638: sub     $0x8,%rsp
         │  0x00007f622436a63c: vmovss  %xmm1,(%rsp)
         │  0x00007f622436a641: callq   0x7f621c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f622436a646: pop     %r11
  0.05%  ↘  0x00007f622436a648: mov     %r11d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f622436a64c: mov     0xc(%rsp),%r11d
  0.57%     0x00007f622436a651: mov     0xc(%r11),%r9d    ; implicit exception: dispatches to 0x00007f622436ad00
            0x00007f622436a655: mov     0x14(%rsp),%r10d
            0x00007f622436a65a: cmp     %r9d,%r10d
            0x00007f622436a65d: jnb     0x7f622436aa9c
            0x00007f622436a663: mov     %r11,%r9          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  1.03%     0x00007f622436a666: lea     0x10(%r11,%r10,4),%rbx
            0x00007f622436a66b: cmpb    $0x0,0x30(%r15)
            0x00007f622436a670: jne     0x7f622436a795
            0x00007f622436a676: mov     %r8,%r9
  0.57%     0x00007f622436a679: mov     %r8,%r11
            0x00007f622436a67c: mov     %r11d,(%rbx)
            0x00007f622436a67f: mov     %rbx,%r11
            0x00007f622436a682: xor     %r11,%r9
  0.92%     0x00007f622436a685: shr     $0x14,%r9
  0.05%     0x00007f622436a689: test    %r9,%r9
            0x00007f622436a68c: je      0x7f622436a017
            0x00007f622436a692: shr     $0x9,%r11
            0x00007f622436a696: movabs  $0x7f623808f000,%rdi
            0x00007f622436a6a0: add     %r11,%rdi
            0x00007f622436a6a3: cmpb    $0x20,(%rdi)
            0x00007f622436a6a6: je      0x7f622436a017
            0x00007f622436a6ac: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f622436a6b3: mov     0x70(%r15),%r8
....................................................................................................
 31.19%  <total for region 2>

....[Hottest Regions]...............................................................................
 32.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (261 bytes) 
 31.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (123 bytes) 
  8.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (237 bytes) 
  7.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (207 bytes) 
  2.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (35 bytes) 
  2.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (170 bytes) 
  1.08%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.92%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (13 bytes) 
  0.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (30 bytes) 
  0.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (0 bytes) 
  0.41%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 (1 bytes) 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (50 bytes) 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (32 bytes) 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 542 (44 bytes) 
  0.21%        libc-2.31.so  malloc_consolidate (0 bytes) 
  0.15%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 (51 bytes) 
  0.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 (6 bytes) 
  8.74%  <...other 142 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 538 
  1.08%   [kernel.kallsyms]  native_write_msr 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.26%        libc-2.31.so  malloc 
  0.26%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%        libc-2.31.so  _int_free 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk 
  0.21%        libc-2.31.so  _int_malloc 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 542 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  0.15%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 572 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  SpinPause 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%   [kernel.kallsyms]  release_pages 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.15%           libjvm.so  ObjAllocator::initialize 
  0.10%           libjvm.so  G1CollectedHeap::allocate_new_tlab 
  6.42%  <...other 107 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.95%         c2, level 4
  5.29%   [kernel.kallsyms]
  3.19%           libjvm.so
  1.70%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.10%           nvidia.ko
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       538.935          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
