# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 920.772 ns/op
# Warmup Iteration   2: 537.697 ns/op
# Warmup Iteration   3: 538.399 ns/op
# Warmup Iteration   4: 534.257 ns/op
# Warmup Iteration   5: 536.918 ns/op
Iteration   1: 537.615 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  537.615 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 122378 total address lines.
Perf output processed (skipped 11.294 seconds):
 Column 1: cycles (2001 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (340 bytes) 

            0x00007faa00369587: callq   %r10
         ╭  0x00007faa0036958a: jmp     0x7faa00369599
         │  0x00007faa0036958c: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │  0x00007faa00369591: add     $0xfffffffffffffff8,%r10
         │                                                ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │  0x00007faa00369595: mov     %r10,0x70(%r15)
  0.05%  ↘  0x00007faa00369599: mov     0x10(%rsp),%r10
            0x00007faa0036959e: movl    $0x0,0x14(%r10)
  0.05%     0x00007faa003695a6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 24.64%     0x00007faa003695ac: mov     0x8(%rsp),%r10
            0x00007faa003695b1: test    %r10,%r10
            0x00007faa003695b4: je      0x7faa00369bd0
  0.05%     0x00007faa003695ba: mov     0x118(%r15),%rbx
  0.75%     0x00007faa003695c1: mov     %rbx,%r10
            0x00007faa003695c4: add     $0x18,%r10
            0x00007faa003695c8: cmp     0x128(%r15),%r10
            0x00007faa003695cf: jnb     0x7faa00369b50    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007faa003695d5: mov     %r10,0x118(%r15)
  0.55%     0x00007faa003695dc: prefetchnta 0x100(%r10)
            0x00007faa003695e4: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007faa003695ea: movabs  $0x800000000,%r10
            0x00007faa003695f4: lea     (%r10,%r11,8),%r10
  0.75%     0x00007faa003695f8: mov     0xb8(%r10),%r10
  0.05%     0x00007faa003695ff: mov     %r10,(%rbx)
            0x00007faa00369602: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007faa00369609: movl    $0x0,0xc(%rbx)
  0.85%     0x00007faa00369610: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
            0x00007faa00369617: mov     0x8(%rsp),%r10
  0.05%     0x00007faa0036961c: mov     %r10,%r11
            0x00007faa0036961f: mov     %r11d,0x10(%rbx)
  0.80%     0x00007faa00369623: mov     0x118(%r15),%rbp
            0x00007faa0036962a: mov     %rbp,%r10
            0x00007faa0036962d: add     $0x20,%r10
            0x00007faa00369631: cmp     0x128(%r15),%r10
  0.05%     0x00007faa00369638: jnb     0x7faa00369b68
  0.65%     0x00007faa0036963e: mov     %r10,0x118(%r15)
            0x00007faa00369645: prefetchnta 0x100(%r10)
            0x00007faa0036964d: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007faa00369653: movabs  $0x800000000,%r10
  0.80%     0x00007faa0036965d: lea     (%r10,%r11,8),%r10
            0x00007faa00369661: mov     0xb8(%r10),%r10
            0x00007faa00369668: mov     %r10,0x0(%rbp)
            0x00007faa0036966c: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.40%     0x00007faa00369673: movl    $0x0,0xc(%rbp)
            0x00007faa0036967a: movq    $0x0,0x10(%rbp)
            0x00007faa00369682: movq    $0x0,0x18(%rbp)
            0x00007faa0036968a: mov     0x118(%r15),%rax
  0.50%     0x00007faa00369691: mov     %rax,%r10
  0.05%     0x00007faa00369694: add     $0x10,%r10
            0x00007faa00369698: cmp     0x128(%r15),%r10
            0x00007faa0036969f: jnb     0x7faa00369b91    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007faa003696a5: mov     %r10,0x118(%r15)
  0.80%     0x00007faa003696ac: prefetchnta 0x100(%r10)
  0.05%     0x00007faa003696b4: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007faa003696ba: movabs  $0x800000000,%r10
            0x00007faa003696c4: lea     (%r10,%r11,8),%r10
  0.60%     0x00007faa003696c8: mov     0xb8(%r10),%r10
            0x00007faa003696cf: mov     %r10,(%rax)
            0x00007faa003696d2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007faa003696d9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.70%     0x00007faa003696e0: mov     %rbp,%r10
            0x00007faa003696e3: mov     %rax,%r8
            0x00007faa003696e6: mov     %r8d,0xc(%rbp)
            0x00007faa003696ea: mov     %rax,%r11
  0.90%     0x00007faa003696ed: xor     %r10,%r11
            0x00007faa003696f0: shr     $0x14,%r11
            0x00007faa003696f4: test    %r11,%r11
            0x00007faa003696f7: je      0x7faa0036974c
            0x00007faa003696f9: shr     $0x9,%r10
            0x00007faa003696fd: movabs  $0x7fa9f3800000,%rdi
            0x00007faa00369707: add     %r10,%rdi
            0x00007faa0036970a: cmpb    $0x20,(%rdi)
            0x00007faa0036970d: je      0x7faa0036974c
            0x00007faa0036970f: mov     0x70(%r15),%r10
            0x00007faa00369713: mov     0x80(%r15),%r11
....................................................................................................
 34.08%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (79 bytes) 

            0x00007faa00369983: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
            0x00007faa00369988: add     $0xfffffffffffffff8,%r10
                                                          ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007faa0036998c: mov     %r10,0x70(%r15)
            0x00007faa00369990: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 15.84%     0x00007faa00369996: mov     0x10(%rsp),%r10
            0x00007faa0036999b: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
            0x00007faa0036999f: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; implicit exception: dispatches to 0x00007faa00369c60
  0.55%     0x00007faa003699a3: vcvtsi2ssl %r10d,%xmm1,%xmm1
            0x00007faa003699a8: mov     0x8(%rsp),%r10
            0x00007faa003699ad: vmulss  0x14(%r10),%xmm1,%xmm0
  0.45%     0x00007faa003699b3: vcvttss2si %xmm0,%r11d
  0.10%     0x00007faa003699b7: cmp     $0x80000000,%r11d
         ╭  0x00007faa003699be: jne     0x7faa003699d0
         │  0x00007faa003699c0: sub     $0x8,%rsp
         │  0x00007faa003699c4: vmovss  %xmm0,(%rsp)
         │  0x00007faa003699c9: callq   0x7fa9f88b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007faa003699ce: pop     %r11
  0.05%  ↘  0x00007faa003699d0: mov     0x10(%rsp),%r10
  0.35%     0x00007faa003699d5: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
            0x00007faa003699d9: add     $0x60,%rsp
            0x00007faa003699dd: pop     %rbp
  0.05%     0x00007faa003699de: mov     0x108(%r15),%r10
  0.85%     0x00007faa003699e5: test    %eax,(%r10)       ;   {poll_return}
            0x00007faa003699e8: retq                      ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
            0x00007faa003699e9: mov     $0x1,%ebp
            0x00007faa003699ee: xor     %ecx,%ecx
            0x00007faa003699f0: movabs  $0x7fa9f3800000,%r11
            0x00007faa003699fa: mov     %r11,0x18(%rsp)   ;*iload_3 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@9 (line 435)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
            0x00007faa003699ff: cmp     $0x40000000,%ebp
....................................................................................................
 18.24%  <total for region 2>

....[Hottest Regions]...............................................................................
 34.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (340 bytes) 
 18.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (79 bytes) 
  9.95%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (256 bytes) 
  9.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (239 bytes) 
  4.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (140 bytes) 
  3.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (60 bytes) 
  2.45%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (18 bytes) 
  2.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (31 bytes) 
  1.90%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.35%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 (15 bytes) 
  0.40%   [kernel.kallsyms]  finish_task_switch (4 bytes) 
  0.40%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (24 bytes) 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.35%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.30%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (49 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.25%   [kernel.kallsyms]  __perf_event_task_sched_in (25 bytes) 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 544 (45 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (42 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (51 bytes) 
  9.10%  <...other 133 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 73.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 534 
 14.04%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 
  1.90%   [kernel.kallsyms]  native_write_msr 
  0.70%   [kernel.kallsyms]  finish_task_switch 
  0.60%        libc-2.31.so  malloc 
  0.45%        libc-2.31.so  _int_malloc 
  0.40%        libc-2.31.so  malloc_consolidate 
  0.35%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.35%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.30%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.30%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.30%        libc-2.31.so  _int_free 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 544 
  0.20%   [kernel.kallsyms]  free_unref_page_commit 
  0.20%   [kernel.kallsyms]  __intel_pmu_enable_all.constprop.0 
  0.15%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.15%   [kernel.kallsyms]  free_pcppages_bulk 
  0.15%   [kernel.kallsyms]  lock_page_memcg 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  G1FromCardCache::clear 
  5.40%  <...other 94 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.76%         c2, level 4
  6.05%   [kernel.kallsyms]
  2.80%           libjvm.so
  2.55%        libc-2.31.so
  0.60%    libfcml.so.0.0.0
  0.15%         interpreter
  0.05%                    
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       537.615          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
