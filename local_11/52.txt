# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 808.390 ns/op
# Warmup Iteration   2: 574.576 ns/op
# Warmup Iteration   3: 556.756 ns/op
# Warmup Iteration   4: 558.351 ns/op
# Warmup Iteration   5: 562.544 ns/op
Iteration   1: 556.317 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  556.317 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 120085 total address lines.
Perf output processed (skipped 11.198 seconds):
 Column 1: cycles (1956 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (338 bytes) 

            0x00007fda0c36a304: callq   %r10
         ╭  0x00007fda0c36a307: jmp     0x7fda0c36a316
         │  0x00007fda0c36a309: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │  0x00007fda0c36a30e: add     $0xfffffffffffffff8,%r10
         │                                                ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │  0x00007fda0c36a312: mov     %r10,0x70(%r15)
  0.77%  ↘  0x00007fda0c36a316: mov     0x10(%rsp),%r10
            0x00007fda0c36a31b: movl    $0x0,0x14(%r10)
  0.05%     0x00007fda0c36a323: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 25.20%     0x00007fda0c36a329: mov     (%rsp),%r10
            0x00007fda0c36a32d: test    %r10,%r10
            0x00007fda0c36a330: je      0x7fda0c36a940
            0x00007fda0c36a336: mov     0x118(%r15),%rbx
  0.56%     0x00007fda0c36a33d: mov     %rbx,%r10
            0x00007fda0c36a340: add     $0x18,%r10
            0x00007fda0c36a344: cmp     0x128(%r15),%r10
            0x00007fda0c36a34b: jnb     0x7fda0c36a8c0    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007fda0c36a351: mov     %r10,0x118(%r15)
  0.51%     0x00007fda0c36a358: prefetchnta 0x100(%r10)
            0x00007fda0c36a360: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fda0c36a366: movabs  $0x800000000,%r10
            0x00007fda0c36a370: lea     (%r10,%r11,8),%r10
  0.66%     0x00007fda0c36a374: mov     0xb8(%r10),%r10
            0x00007fda0c36a37b: mov     %r10,(%rbx)
            0x00007fda0c36a37e: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fda0c36a385: movl    $0x0,0xc(%rbx)
  0.51%     0x00007fda0c36a38c: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
            0x00007fda0c36a393: mov     (%rsp),%r10
            0x00007fda0c36a397: mov     %r10,%r11
            0x00007fda0c36a39a: mov     %r11d,0x10(%rbx)
  0.82%     0x00007fda0c36a39e: mov     0x118(%r15),%rbp
            0x00007fda0c36a3a5: mov     %rbp,%r10
            0x00007fda0c36a3a8: add     $0x20,%r10
            0x00007fda0c36a3ac: cmp     0x128(%r15),%r10
            0x00007fda0c36a3b3: jnb     0x7fda0c36a8d8
  0.72%     0x00007fda0c36a3b9: mov     %r10,0x118(%r15)
            0x00007fda0c36a3c0: prefetchnta 0x100(%r10)
            0x00007fda0c36a3c8: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007fda0c36a3ce: movabs  $0x800000000,%r10
  0.61%     0x00007fda0c36a3d8: lea     (%r10,%r11,8),%r10
            0x00007fda0c36a3dc: mov     0xb8(%r10),%r10
            0x00007fda0c36a3e3: mov     %r10,0x0(%rbp)
            0x00007fda0c36a3e7: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.97%     0x00007fda0c36a3ee: movl    $0x0,0xc(%rbp)
            0x00007fda0c36a3f5: movq    $0x0,0x10(%rbp)
            0x00007fda0c36a3fd: movq    $0x0,0x18(%rbp)
            0x00007fda0c36a405: mov     0x118(%r15),%rax
  0.82%     0x00007fda0c36a40c: mov     %rax,%r10
            0x00007fda0c36a40f: add     $0x10,%r10
            0x00007fda0c36a413: cmp     0x128(%r15),%r10
            0x00007fda0c36a41a: jnb     0x7fda0c36a901    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007fda0c36a420: mov     %r10,0x118(%r15)
  0.87%     0x00007fda0c36a427: prefetchnta 0x100(%r10)
  0.05%     0x00007fda0c36a42f: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fda0c36a435: movabs  $0x800000000,%r10
            0x00007fda0c36a43f: lea     (%r10,%r11,8),%r10
  0.46%     0x00007fda0c36a443: mov     0xb8(%r10),%r10
            0x00007fda0c36a44a: mov     %r10,(%rax)
            0x00007fda0c36a44d: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007fda0c36a454: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.66%     0x00007fda0c36a45b: mov     %rbp,%r11
            0x00007fda0c36a45e: mov     %rax,%r10
            0x00007fda0c36a461: mov     %r10d,0xc(%rbp)
            0x00007fda0c36a465: mov     %rax,%r10
  0.36%     0x00007fda0c36a468: xor     %r11,%r10
            0x00007fda0c36a46b: shr     $0x14,%r10
            0x00007fda0c36a46f: test    %r10,%r10
            0x00007fda0c36a472: je      0x7fda0c36a4c7
            0x00007fda0c36a474: shr     $0x9,%r11
            0x00007fda0c36a478: movabs  $0x7fda03c9e000,%rdi
            0x00007fda0c36a482: add     %r11,%rdi
            0x00007fda0c36a485: cmpb    $0x20,(%rdi)
            0x00007fda0c36a488: je      0x7fda0c36a4c7
            0x00007fda0c36a48a: mov     0x70(%r15),%r10
            0x00007fda0c36a48e: mov     0x80(%r15),%r11
....................................................................................................
 34.61%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (34 bytes) 

             0x00007fda0c36a71f: movabs  $0x7fda21704290,%r10
             0x00007fda0c36a729: callq   %r10
         ╭   0x00007fda0c36a72c: jmp     0x7fda0c36a73b
         │   0x00007fda0c36a72e: mov     %rbp,0xfffffffffffffff8(%r11,%r10)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │   0x00007fda0c36a733: add     $0xfffffffffffffff8,%r10
         │                                                 ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │   0x00007fda0c36a737: mov     %r10,0x70(%r15)
  0.56%  ↘   0x00007fda0c36a73b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 17.28%      0x00007fda0c36a741: mov     0x10(%rsp),%r10
  0.10%      0x00007fda0c36a746: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
  0.05%      0x00007fda0c36a74a: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; implicit exception: dispatches to 0x00007fda0c36a9e0
  0.56%      0x00007fda0c36a74e: vcvtsi2ssl %r10d,%xmm1,%xmm1
             0x00007fda0c36a753: mov     (%rsp),%r10
             0x00007fda0c36a757: vmulss  0x14(%r10),%xmm1,%xmm0
  0.56%      0x00007fda0c36a75d: vcvttss2si %xmm0,%r11d
             0x00007fda0c36a761: cmp     $0x80000000,%r11d
          ╭  0x00007fda0c36a768: jne     0x7fda0c36a77a
          │  0x00007fda0c36a76a: sub     $0x8,%rsp
          │  0x00007fda0c36a76e: vmovss  %xmm0,(%rsp)
          │  0x00007fda0c36a773: callq   0x7fda048b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007fda0c36a778: pop     %r11
          ↘  0x00007fda0c36a77a: mov     0x10(%rsp),%r10
  0.66%      0x00007fda0c36a77f: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
....................................................................................................
 19.12%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (274 bytes) 

             0x00007fda0c371a1f: callq   %r10
             0x00007fda0c371a22: mov     %ebx,%r10d
             0x00007fda0c371a25: nopw    0x0(%rax,%rax)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007fda0c371a30: mov     0x108(%r15),%r8
         ││  0x00007fda0c371a37: mov     0x18(%rsp),%r13
  0.97%  ││  0x00007fda0c371a3c: mov     0x1c(%r13),%r11d  ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fda0c371a40: incl    %r10d             ; ImmutableOopMap{r11=NarrowOop r13=Oop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fda0c371a43: test    %eax,(%r8)        ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
  0.05%  ││  0x00007fda0c371a46: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fda0c371fbc
  0.92%  ││  0x00007fda0c371a4a: cmp     %r8d,%r10d
         ││  0x00007fda0c371a4d: jnl     0x7fda0c3716f1    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.05%  ││  0x00007fda0c371a53: mov     0x70(%rsp),%r8
         ││  0x00007fda0c371a58: mov     0x20(%rsp),%r9
         ││  0x00007fda0c371a5d: mov     0x10(%rsp),%rbx
  0.51%  ││  0x00007fda0c371a62: mov     0x28(%rsp),%ebp
         ││  0x00007fda0c371a66: mov     0x118(%r15),%rax
  0.05%  ││  0x00007fda0c371a6d: mov     %rax,%rcx
  0.05%  ││  0x00007fda0c371a70: add     $0x28,%rcx
  0.87%  ││  0x00007fda0c371a74: cmp     0x128(%r15),%rcx
         ││  0x00007fda0c371a7b: jnb     0x7fda0c371bce    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fda0c371a81: mov     %rcx,0x118(%r15)
         ││  0x00007fda0c371a88: prefetchnta 0x100(%rcx)
  0.05%  ││  0x00007fda0c371a8f: mov     (%rsp),%rdi
  0.46%  ││  0x00007fda0c371a93: mov     0xb8(%rdi),%rcx
         ││  0x00007fda0c371a9a: mov     %rcx,(%rax)
         ││  0x00007fda0c371a9d: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.15%  ││  0x00007fda0c371aa4: movl    $0x0,0xc(%rax)
  0.46%  ││  0x00007fda0c371aab: movq    $0x0,0x10(%rax)
         ││  0x00007fda0c371ab3: movq    $0x0,0x18(%rax)
         ││  0x00007fda0c371abb: movq    $0x0,0x20(%rax)
         ││  0x00007fda0c371ac3: mov     %r8,0x70(%rsp)
  0.51%  ││  0x00007fda0c371ac8: mov     %r9,0x20(%rsp)
         ││  0x00007fda0c371acd: mov     %rbx,0x10(%rsp)
         ││  0x00007fda0c371ad2: mov     %r13,0x18(%rsp)
  0.05%  ││  0x00007fda0c371ad7: mov     %ebp,0x28(%rsp)
  0.51%  ││  0x00007fda0c371adb: mov     %r11d,0x2c(%rsp)
  0.05%  ││  0x00007fda0c371ae0: mov     %r10d,0x30(%rsp)
         ││  0x00007fda0c371ae5: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.05%  ││  0x00007fda0c371aea: mov     %rax,%rsi
  0.72%  ││  0x00007fda0c371aed: mov     0x18(%rsp),%rdx
  0.41%  ││  0x00007fda0c371af2: mov     0x28(%rsp),%ecx
         ││  0x00007fda0c371af6: nop
  0.05%  ││  0x00007fda0c371af7: callq   0x7fda0489d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007fda0c371afc: mov     0x2c(%rsp),%r8d
  0.87%  ││  0x00007fda0c371b01: mov     0xc(%r8),%r9d     ; implicit exception: dispatches to 0x00007fda0c371fb0
  0.05%  ││  0x00007fda0c371b05: mov     0x30(%rsp),%r10d
         ││  0x00007fda0c371b0a: cmp     %r9d,%r10d
         ││  0x00007fda0c371b0d: jnb     0x7fda0c371caa
         ││  0x00007fda0c371b13: mov     %r8,%r11          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.61%  ││  0x00007fda0c371b16: lea     0x10(%r8,%r10,4),%rbx
  0.05%  ││  0x00007fda0c371b1b: cmpb    $0x0,0x30(%r15)
         ││  0x00007fda0c371b20: jne     0x7fda0c371b9c
         ││  0x00007fda0c371b22: mov     0x38(%rsp),%r11
  0.72%  ││  0x00007fda0c371b27: mov     %r11,%r8
         ││  0x00007fda0c371b2a: mov     %r11d,(%rbx)
  0.05%  ││  0x00007fda0c371b2d: mov     %rbx,%r11
         ││  0x00007fda0c371b30: xor     %r11,%r8
  0.72%  ││  0x00007fda0c371b33: shr     $0x14,%r8
         ││  0x00007fda0c371b37: test    %r8,%r8
         ╰│  0x00007fda0c371b3a: je      0x7fda0c371a30
          │  0x00007fda0c371b40: shr     $0x9,%r11
          │  0x00007fda0c371b44: movabs  $0x7fda03c9e000,%rdi
  0.05%   │  0x00007fda0c371b4e: add     %r11,%rdi
          │  0x00007fda0c371b51: cmpb    $0x20,(%rdi)
          ╰  0x00007fda0c371b54: je      0x7fda0c371a30
             0x00007fda0c371b5a: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
             0x00007fda0c371b61: mov     0x70(%r15),%r8
             0x00007fda0c371b65: lock addl $0x0,0xffffffffffffffc0(%rsp)
....................................................................................................
 10.07%  <total for region 3>

....[Hottest Regions]...............................................................................
 34.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (338 bytes) 
 19.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (34 bytes) 
 10.07%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (274 bytes) 
  7.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (188 bytes) 
  3.83%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (123 bytes) 
  3.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (61 bytes) 
  1.89%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (31 bytes) 
  1.84%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (43 bytes) 
  1.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (16 bytes) 
  1.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (15 bytes) 
  1.02%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.82%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (131 bytes) 
  0.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 (0 bytes) 
  0.72%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (82 bytes) 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 544 (13 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  0.20%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (21 bytes) 
  9.82%  <...other 151 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 74.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 537 
 13.96%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 
  1.02%   [kernel.kallsyms]  native_write_msr 
  0.66%        libc-2.31.so  malloc 
  0.41%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 544 
  0.31%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%        libc-2.31.so  malloc_consolidate 
  0.26%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.26%        libc-2.31.so  _int_free 
  0.20%        libc-2.31.so  _int_malloc 
  0.20%           libjvm.so  SpinPause 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%           libjvm.so  G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%           libjvm.so  G1FromCardCache::clear 
  0.15%           libjvm.so  ThreadLocalAllocBuffer::fill 
  0.15%        libc-2.31.so  cfree@GLIBC_2.2.5 
  0.15%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.15%   [kernel.kallsyms]  hrtimer_try_to_cancel 
  6.54%  <...other 111 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.55%         c2, level 4
  4.65%   [kernel.kallsyms]
  3.32%           libjvm.so
  2.30%        libc-2.31.so
  0.77%    libfcml.so.0.0.0
  0.10%  libpthread-2.31.so
  0.10%           nvidia.ko
  0.05%              kvm.ko
  0.05%           libzip.so
  0.05%      perf-23421.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       556.317          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
