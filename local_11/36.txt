# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1030.068 ns/op
# Warmup Iteration   2: 550.465 ns/op
# Warmup Iteration   3: 528.927 ns/op
# Warmup Iteration   4: 528.391 ns/op
# Warmup Iteration   5: 533.158 ns/op
Iteration   1: 534.663 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  534.663 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 118243 total address lines.
Perf output processed (skipped 11.144 seconds):
 Column 1: cycles (1967 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (33 bytes) 

            0x00007f8854369c58: jmp     0x7f8854369c67
            0x00007f8854369c5a: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8854369c5f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f8854369c63: mov     %r10,0x70(%r15)
  0.05%     0x00007f8854369c67: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 27.81%     0x00007f8854369c6d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f8854369c71: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f885436a358
  0.05%     0x00007f8854369c75: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.66%     0x00007f8854369c7a: mov     (%rsp),%r10
            0x00007f8854369c7e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f8854369c84: vcvttss2si %xmm1,%r11d
  0.92%     0x00007f8854369c88: cmp     $0x80000000,%r11d
         ╭  0x00007f8854369c8f: jne     0x7f8854369ca1
         │  0x00007f8854369c91: sub     $0x8,%rsp
         │  0x00007f8854369c95: vmovss  %xmm1,(%rsp)
         │  0x00007f8854369c9a: callq   0x7f884c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f8854369c9f: pop     %r11
         ↘  0x00007f8854369ca1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8854369ca5: mov     0xc(%rsp),%r11d
  1.42%     0x00007f8854369caa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f885436a364
            0x00007f8854369cae: mov     0x14(%rsp),%r8d
....................................................................................................
 29.59%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (27 bytes) 

            0x00007f88543697eb: mov     0x8(%rsp),%r8d
            0x00007f88543697f0: mov     0x10(%rsp),%rbx
         ╭  0x00007f88543697f5: jmp     0x7f8854369804
         │  0x00007f88543697f7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f88543697fc: add     $0xfffffffffffffff8,%r9
         │  0x00007f8854369800: mov     %r9,0x70(%r15)
  0.71%  ↘  0x00007f8854369804: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f885436980b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.39%     0x00007f8854369811: mov     0x118(%r15),%r13
            0x00007f8854369818: mov     %r13,%r10
            0x00007f885436981b: add     $0x18,%r10
  0.71%     0x00007f885436981f: cmp     0x128(%r15),%r10
            0x00007f8854369826: jnb     0x7f8854369eda    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f885436982c: mov     %r10,0x118(%r15)
            0x00007f8854369833: prefetchnta 0x100(%r10)
            0x00007f885436983b: mov     0x18(%rsp),%r10
  0.76%     0x00007f8854369840: mov     0xb8(%r10),%r10
            0x00007f8854369847: mov     %r10,0x0(%r13)
            0x00007f885436984b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f8854369853: movl    $0x0,0xc(%r13)
....................................................................................................
 24.86%  <total for region 2>

....[Hottest Regions]...............................................................................
 29.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (33 bytes) 
 24.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (27 bytes) 
  8.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (239 bytes) 
  8.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (231 bytes) 
  6.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (202 bytes) 
  4.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (52 bytes) 
  2.34%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (35 bytes) 
  1.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (26 bytes) 
  1.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (13 bytes) 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (4 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (27 bytes) 
  0.31%        libc-2.31.so  malloc_consolidate (29 bytes) 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (48 bytes) 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 534 (13 bytes) 
  0.20%   [kernel.kallsyms]  page_remove_rmap (0 bytes) 
  0.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 (38 bytes) 
  8.49%  <...other 132 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 529 
  2.34%   [kernel.kallsyms]  native_write_msr 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.41%        libc-2.31.so  malloc 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%        libc-2.31.so  _int_malloc 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 562 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 534 
  0.25%        libc-2.31.so  _int_free 
  0.20%   [kernel.kallsyms]  page_remove_rmap 
  0.20%           libjvm.so  JfrAllocationTracer::JfrAllocationTracer 
  0.15%           libjvm.so  MemAllocator::allocate 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.10%   [kernel.kallsyms]  free_unref_page_commit 
  0.10%           libjvm.so  OptoRuntime::new_instance_C 
  0.10%           libjvm.so  G1RemSetScanState::G1ClearCardTableTask::work 
  0.10%           libjvm.so  SpinPause 
  0.10%    libfcml.so.0.0.0  fcml_fn_mp_parse_mnemonics 
  4.98%  <...other 92 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.82%         c2, level 4
  5.54%   [kernel.kallsyms]
  2.80%           libjvm.so
  1.88%        libc-2.31.so
  0.81%    libfcml.so.0.0.0
  0.10%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       534.663          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
