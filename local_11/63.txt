# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1011.872 ns/op
# Warmup Iteration   2: 540.296 ns/op
# Warmup Iteration   3: 533.584 ns/op
# Warmup Iteration   4: 530.181 ns/op
# Warmup Iteration   5: 533.930 ns/op
Iteration   1: 531.301 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  531.301 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 118261 total address lines.
Perf output processed (skipped 11.177 seconds):
 Column 1: cycles (1969 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f901836a9ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f901836a9f2: mov     %r10,0x70(%r15)
            0x00007f901836a9f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 28.44%     0x00007f901836a9fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007f901836aa00: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f901836b0f0
            0x00007f901836aa04: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.71%     0x00007f901836aa09: mov     (%rsp),%r10
            0x00007f901836aa0d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f901836aa13: vcvttss2si %xmm0,%r11d
  0.61%     0x00007f901836aa17: cmp     $0x80000000,%r11d
         ╭  0x00007f901836aa1e: jne     0x7f901836aa30
         │  0x00007f901836aa20: sub     $0x8,%rsp
         │  0x00007f901836aa24: vmovss  %xmm0,(%rsp)
         │  0x00007f901836aa29: callq   0x7f90108b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f901836aa2e: pop     %r11
         ↘  0x00007f901836aa30: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f901836aa34: mov     0xc(%rsp),%r11d
  0.46%     0x00007f901836aa39: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f901836b0fc
            0x00007f901836aa3d: mov     0x14(%rsp),%r8d
....................................................................................................
 29.91%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (27 bytes) 

            0x00007f901836a57a: mov     0x8(%rsp),%r8d
            0x00007f901836a57f: mov     0x10(%rsp),%rbx
         ╭  0x00007f901836a584: jmp     0x7f901836a593
         │  0x00007f901836a586: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f901836a58b: add     $0xfffffffffffffff8,%r9
         │  0x00007f901836a58f: mov     %r9,0x70(%r15)
  0.66%  ↘  0x00007f901836a593: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f901836a59a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.96%     0x00007f901836a5a0: mov     0x118(%r15),%r13
  0.05%     0x00007f901836a5a7: mov     %r13,%r10
            0x00007f901836a5aa: add     $0x18,%r10
  0.71%     0x00007f901836a5ae: cmp     0x128(%r15),%r10
            0x00007f901836a5b5: jnb     0x7f901836ac6a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f901836a5bb: mov     %r10,0x118(%r15)
            0x00007f901836a5c2: prefetchnta 0x100(%r10)
            0x00007f901836a5ca: mov     0x18(%rsp),%r10
  0.91%     0x00007f901836a5cf: mov     0xb8(%r10),%r10
  0.05%     0x00007f901836a5d6: mov     %r10,0x0(%r13)
            0x00007f901836a5da: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f901836a5e2: movl    $0x0,0xc(%r13)
....................................................................................................
 24.43%  <total for region 2>

....[Hottest Regions]...............................................................................
 29.91%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (27 bytes) 
 24.43%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (27 bytes) 
  7.92%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (231 bytes) 
  6.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (202 bytes) 
  6.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (158 bytes) 
  2.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (46 bytes) 
  2.64%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (52 bytes) 
  2.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (35 bytes) 
  1.47%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (13 bytes) 
  1.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (76 bytes) 
  0.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (98 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (12 bytes) 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 (15 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (68 bytes) 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.36%        libc-2.31.so  malloc_consolidate (62 bytes) 
  0.30%        libc-2.31.so  malloc (0 bytes) 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 (48 bytes) 
  9.55%  <...other 135 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 87.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 528 
  1.47%   [kernel.kallsyms]  native_write_msr 
  0.81%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.41%   [kernel.kallsyms]  free_pcppages_bulk 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 560 
  0.41%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.30%   [kernel.kallsyms]  __perf_event_task_sched_in 
  0.25%   [kernel.kallsyms]  finish_task_switch 
  0.25%        libc-2.31.so  unlink_chunk.isra.0 
  0.20%   [kernel.kallsyms]  release_pages 
  0.15%           libjvm.so  G1YoungRemSetSamplingClosure::do_heap_region 
  0.15%           libjvm.so  SpinPause 
  0.15%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.15%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 533 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%        libc-2.31.so  _int_free 
  0.10%   [kernel.kallsyms]  page_remove_rmap 
  5.94%  <...other 101 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 88.12%         c2, level 4
  5.59%   [kernel.kallsyms]
  2.89%           libjvm.so
  2.23%        libc-2.31.so
  0.76%    libfcml.so.0.0.0
  0.30%         interpreter
  0.10%           nvidia.ko
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       531.301          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
