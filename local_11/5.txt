# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 891.614 ns/op
# Warmup Iteration   2: 595.896 ns/op
# Warmup Iteration   3: 570.411 ns/op
# Warmup Iteration   4: 559.635 ns/op
# Warmup Iteration   5: 552.611 ns/op
Iteration   1: 542.299 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  542.299 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 116272 total address lines.
Perf output processed (skipped 11.328 seconds):
 Column 1: cycles (1909 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (262 bytes) 

            0x00007f5484368aeb: mov     0x8(%rsp),%r8d
            0x00007f5484368af0: mov     0x10(%rsp),%rbx
         ╭  0x00007f5484368af5: jmp     0x7f5484368b04
         │  0x00007f5484368af7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f5484368afc: add     $0xfffffffffffffff8,%r9
         │  0x00007f5484368b00: mov     %r9,0x70(%r15)
  0.73%  ↘  0x00007f5484368b04: movl    $0x0,0x14(%rbx)
            0x00007f5484368b0b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 25.41%     0x00007f5484368b11: mov     0x118(%r15),%r13
  0.16%     0x00007f5484368b18: mov     %r13,%r10
            0x00007f5484368b1b: add     $0x18,%r10
  0.68%     0x00007f5484368b1f: cmp     0x128(%r15),%r10
            0x00007f5484368b26: jnb     0x7f54843691da    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f5484368b2c: mov     %r10,0x118(%r15)
            0x00007f5484368b33: prefetchnta 0x100(%r10)
  0.05%     0x00007f5484368b3b: mov     0x18(%rsp),%r10
  0.68%     0x00007f5484368b40: mov     0xb8(%r10),%r10
  0.05%     0x00007f5484368b47: mov     %r10,0x0(%r13)
            0x00007f5484368b4b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f5484368b53: movl    $0x0,0xc(%r13)
  0.68%     0x00007f5484368b5b: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5484368b63: mov     %r14d,0x10(%r13)
            0x00007f5484368b67: mov     0x118(%r15),%rcx
            0x00007f5484368b6e: mov     %rcx,%r10
  0.73%     0x00007f5484368b71: add     $0x20,%r10
            0x00007f5484368b75: cmp     0x128(%r15),%r10
            0x00007f5484368b7c: jnb     0x7f5484369245
  0.05%     0x00007f5484368b82: mov     %r10,0x118(%r15)
            0x00007f5484368b89: prefetchnta 0x100(%r10)
  0.68%     0x00007f5484368b91: mov     0xb8(%rsi),%r10
            0x00007f5484368b98: mov     %r10,(%rcx)
            0x00007f5484368b9b: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f5484368ba2: movl    $0x0,0xc(%rcx)
  0.68%     0x00007f5484368ba9: movq    $0x0,0x10(%rcx)
            0x00007f5484368bb1: movq    $0x0,0x18(%rcx)
            0x00007f5484368bb9: mov     0x118(%r15),%rax
  0.05%     0x00007f5484368bc0: mov     %rax,%r10
  0.63%     0x00007f5484368bc3: add     $0x10,%r10
  0.05%     0x00007f5484368bc7: cmp     0x128(%r15),%r10
            0x00007f5484368bce: jnb     0x7f54843692ba    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f5484368bd4: mov     %r10,0x118(%r15)
            0x00007f5484368bdb: prefetchnta 0x100(%r10)
  0.89%     0x00007f5484368be3: mov     0x28(%rsp),%r10
            0x00007f5484368be8: mov     0xb8(%r10),%r10
            0x00007f5484368bef: mov     %r10,(%rax)
            0x00007f5484368bf2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.79%     0x00007f5484368bf9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5484368c00: mov     %rcx,%r9
            0x00007f5484368c03: mov     %rax,%r10
            0x00007f5484368c06: mov     %r10d,0xc(%rcx)
  0.68%     0x00007f5484368c0a: mov     %rax,%r10
            0x00007f5484368c0d: xor     %r9,%r10
            0x00007f5484368c10: shr     $0x14,%r10
            0x00007f5484368c14: test    %r10,%r10
            0x00007f5484368c17: je      0x7f5484368ca4
            0x00007f5484368c1d: shr     $0x9,%r9
            0x00007f5484368c21: movabs  $0x7f5477800000,%rdi
            0x00007f5484368c2b: add     %r9,%rdi
            0x00007f5484368c2e: cmpb    $0x20,(%rdi)
            0x00007f5484368c31: je      0x7f5484368ca4
            0x00007f5484368c33: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.68%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f5484368f5f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f5484368f63: mov     %r10,0x70(%r15)
            0x00007f5484368f67: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 28.50%     0x00007f5484368f6d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f5484368f71: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f5484369658
            0x00007f5484368f75: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.63%     0x00007f5484368f7a: mov     (%rsp),%r10
            0x00007f5484368f7e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f5484368f84: vcvttss2si %xmm1,%r11d
  0.84%     0x00007f5484368f88: cmp     $0x80000000,%r11d
         ╭  0x00007f5484368f8f: jne     0x7f5484368fa1
         │  0x00007f5484368f91: sub     $0x8,%rsp
         │  0x00007f5484368f95: vmovss  %xmm1,(%rsp)
         │  0x00007f5484368f9a: callq   0x7f547c8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f5484368f9f: pop     %r11
         ↘  0x00007f5484368fa1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f5484368fa5: mov     0xc(%rsp),%r11d
  0.63%     0x00007f5484368faa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f5484369664
            0x00007f5484368fae: mov     0x14(%rsp),%r8d
....................................................................................................
 30.07%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.68%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (262 bytes) 
 30.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (27 bytes) 
  9.80%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (231 bytes) 
  7.86%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (370 bytes) 
  2.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (52 bytes) 
  2.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (35 bytes) 
  1.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (16 bytes) 
  1.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (28 bytes) 
  0.89%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (50 bytes) 
  0.26%   [kernel.kallsyms]  syscall_exit_to_user_mode (30 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (69 bytes) 
  0.26%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (22 bytes) 
  0.26%        libc-2.31.so  malloc_consolidate (33 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (12 bytes) 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (26 bytes) 
  0.21%           libjvm.so  SpinPause (7 bytes) 
  0.21%        libc-2.31.so  malloc (0 bytes) 
  0.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (11 bytes) 
  0.16%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 531 (8 bytes) 
  7.81%  <...other 125 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.94%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 
  0.89%   [kernel.kallsyms]  native_write_msr 
  0.52%        libc-2.31.so  malloc 
  0.47%        libc-2.31.so  _int_malloc 
  0.42%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  0.42%        libc-2.31.so  malloc_consolidate 
  0.26%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.21%           libjvm.so  SpinPause 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.21%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 531 
  0.21%        libc-2.31.so  _int_free 
  0.16%           libjvm.so  Klass::klass_holder 
  0.16%           libjvm.so  G1ScanRSForRegionClosure::scan_rem_set_roots 
  0.16%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.16%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.10%           libjvm.so  G1CollectedHeap::allocate_new_tlab 
  0.10%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.10%   [kernel.kallsyms]  mutex_unlock 
  0.10%           libjvm.so  OtherRegionsTable::clear_fcc 
  0.10%        libc-2.31.so  unlink_chunk.isra.0 
  5.03%  <...other 91 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.57%         c2, level 4
  3.30%   [kernel.kallsyms]
  3.14%           libjvm.so
  2.20%        libc-2.31.so
  0.42%    libfcml.so.0.0.0
  0.16%         interpreter
  0.16%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       542.299          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
