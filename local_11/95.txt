# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 931.766 ns/op
# Warmup Iteration   2: 534.958 ns/op
# Warmup Iteration   3: 509.468 ns/op
# Warmup Iteration   4: 508.828 ns/op
# Warmup Iteration   5: 512.198 ns/op
Iteration   1: 507.829 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  507.829 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121305 total address lines.
Perf output processed (skipped 11.257 seconds):
 Column 1: cycles (1943 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (262 bytes) 

            0x00007ff33836be7a: mov     0x8(%rsp),%r8d
            0x00007ff33836be7f: mov     0x10(%rsp),%rbx
         ╭  0x00007ff33836be84: jmp     0x7ff33836be93
         │  0x00007ff33836be86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007ff33836be8b: add     $0xfffffffffffffff8,%r9
         │  0x00007ff33836be8f: mov     %r9,0x70(%r15)
  0.57%  ↘  0x00007ff33836be93: movl    $0x0,0x14(%rbx)
  0.05%     0x00007ff33836be9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.85%     0x00007ff33836bea0: mov     0x118(%r15),%r13
  0.05%     0x00007ff33836bea7: mov     %r13,%r10
            0x00007ff33836beaa: add     $0x18,%r10
  0.82%     0x00007ff33836beae: cmp     0x128(%r15),%r10
            0x00007ff33836beb5: jnb     0x7ff33836c56a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff33836bebb: mov     %r10,0x118(%r15)
            0x00007ff33836bec2: prefetchnta 0x100(%r10)
  0.05%     0x00007ff33836beca: mov     0x18(%rsp),%r10
  0.98%     0x00007ff33836becf: mov     0xb8(%r10),%r10
  0.10%     0x00007ff33836bed6: mov     %r10,0x0(%r13)
            0x00007ff33836beda: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007ff33836bee2: movl    $0x0,0xc(%r13)
  0.77%     0x00007ff33836beea: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff33836bef2: mov     %r14d,0x10(%r13)
            0x00007ff33836bef6: mov     0x118(%r15),%rcx
            0x00007ff33836befd: mov     %rcx,%r10
  0.98%     0x00007ff33836bf00: add     $0x20,%r10
            0x00007ff33836bf04: cmp     0x128(%r15),%r10
            0x00007ff33836bf0b: jnb     0x7ff33836c5d5
            0x00007ff33836bf11: mov     %r10,0x118(%r15)
            0x00007ff33836bf18: prefetchnta 0x100(%r10)
  0.62%     0x00007ff33836bf20: mov     0xb8(%rsi),%r10
            0x00007ff33836bf27: mov     %r10,(%rcx)
            0x00007ff33836bf2a: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.05%     0x00007ff33836bf31: movl    $0x0,0xc(%rcx)
  0.82%     0x00007ff33836bf38: movq    $0x0,0x10(%rcx)
  0.05%     0x00007ff33836bf40: movq    $0x0,0x18(%rcx)
            0x00007ff33836bf48: mov     0x118(%r15),%rax
  0.05%     0x00007ff33836bf4f: mov     %rax,%r10
  0.62%     0x00007ff33836bf52: add     $0x10,%r10
            0x00007ff33836bf56: cmp     0x128(%r15),%r10
            0x00007ff33836bf5d: jnb     0x7ff33836c64a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.10%     0x00007ff33836bf63: mov     %r10,0x118(%r15)
            0x00007ff33836bf6a: prefetchnta 0x100(%r10)
  0.87%     0x00007ff33836bf72: mov     0x28(%rsp),%r10
            0x00007ff33836bf77: mov     0xb8(%r10),%r10
            0x00007ff33836bf7e: mov     %r10,(%rax)
            0x00007ff33836bf81: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.41%     0x00007ff33836bf88: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff33836bf8f: mov     %rcx,%r9
            0x00007ff33836bf92: mov     %rax,%r10
  0.05%     0x00007ff33836bf95: mov     %r10d,0xc(%rcx)
  0.41%     0x00007ff33836bf99: mov     %rax,%r10
            0x00007ff33836bf9c: xor     %r9,%r10
            0x00007ff33836bf9f: shr     $0x14,%r10
            0x00007ff33836bfa3: test    %r10,%r10
            0x00007ff33836bfa6: je      0x7ff33836c033
            0x00007ff33836bfac: shr     $0x9,%r9
            0x00007ff33836bfb0: movabs  $0x7ff34ddc5000,%rdi
            0x00007ff33836bfba: add     %r9,%rdi
            0x00007ff33836bfbd: cmpb    $0x20,(%rdi)
            0x00007ff33836bfc0: je      0x7ff33836c033
            0x00007ff33836bfc2: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 31.29%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007ff33836c2ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007ff33836c2f2: mov     %r10,0x70(%r15)
            0x00007ff33836c2f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.25%     0x00007ff33836c2fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.15%     0x00007ff33836c300: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007ff33836c9f0
            0x00007ff33836c304: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.87%     0x00007ff33836c309: mov     (%rsp),%r10
            0x00007ff33836c30d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007ff33836c313: vcvttss2si %xmm0,%r11d
  0.87%     0x00007ff33836c317: cmp     $0x80000000,%r11d
         ╭  0x00007ff33836c31e: jne     0x7ff33836c330
         │  0x00007ff33836c320: sub     $0x8,%rsp
         │  0x00007ff33836c324: vmovss  %xmm0,(%rsp)
         │  0x00007ff33836c329: callq   0x7ff3308b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007ff33836c32e: pop     %r11
         ↘  0x00007ff33836c330: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007ff33836c334: mov     0xc(%rsp),%r11d
  1.08%     0x00007ff33836c339: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007ff33836c9fc
  0.05%     0x00007ff33836c33d: mov     0x14(%rsp),%r8d
....................................................................................................
 28.15%  <total for region 2>

....[Hottest Regions]...............................................................................
 31.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (262 bytes) 
 28.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (27 bytes) 
  9.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (242 bytes) 
  8.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (231 bytes) 
  3.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (35 bytes) 
  3.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (52 bytes) 
  2.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (13 bytes) 
  1.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (76 bytes) 
  0.93%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (106 bytes) 
  0.67%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.57%   [kernel.kallsyms]  zap_pte_range.isra.0 (42 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (68 bytes) 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 579 (104 bytes) 
  0.31%   [kernel.kallsyms]  free_pcppages_bulk (73 bytes) 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 555 (44 bytes) 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (29 bytes) 
  0.21%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc (21 bytes) 
  0.21%           libjvm.so  fileStream::write (15 bytes) 
  0.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 (13 bytes) 
  8.03%  <...other 134 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 551 
  0.67%   [kernel.kallsyms]  native_write_msr 
  0.57%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.36%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 579 
  0.36%        libc-2.31.so  malloc 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.36%        libc-2.31.so  _int_free 
  0.31%        libc-2.31.so  _int_malloc 
  0.26%           libjvm.so  G1Allocator::unsafe_max_tlab_alloc 
  0.26%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 555 
  0.26%        libc-2.31.so  malloc_consolidate 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.21%           libjvm.so  fileStream::write 
  0.15%           libjvm.so  G1FromCardCache::clear 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.15%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  0.10%   [kernel.kallsyms]  __mod_zone_page_state 
  0.10%   [kernel.kallsyms]  mutex_unlock 
  5.71%  <...other 102 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.76%         c2, level 4
  4.32%   [kernel.kallsyms]
  3.45%           libjvm.so
  1.80%        libc-2.31.so
  0.51%    libfcml.so.0.0.0
  0.10%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       507.829          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
