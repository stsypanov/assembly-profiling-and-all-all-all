# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 801.041 ns/op
# Warmup Iteration   2: 541.509 ns/op
# Warmup Iteration   3: 516.973 ns/op
# Warmup Iteration   4: 514.533 ns/op
# Warmup Iteration   5: 518.037 ns/op
Iteration   1: 519.891 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  519.891 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 122086 total address lines.
Perf output processed (skipped 11.149 seconds):
 Column 1: cycles (2042 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f8ec036a26e: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f8ec036a272: mov     %r10,0x70(%r15)
            0x00007f8ec036a276: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.02%     0x00007f8ec036a27c: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f8ec036a280: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f8ec036a970
            0x00007f8ec036a284: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.64%     0x00007f8ec036a289: mov     (%rsp),%r10
  0.05%     0x00007f8ec036a28d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f8ec036a293: vcvttss2si %xmm0,%r11d
  0.69%     0x00007f8ec036a297: cmp     $0x80000000,%r11d
         ╭  0x00007f8ec036a29e: jne     0x7f8ec036a2b0
         │  0x00007f8ec036a2a0: sub     $0x8,%rsp
         │  0x00007f8ec036a2a4: vmovss  %xmm0,(%rsp)
         │  0x00007f8ec036a2a9: callq   0x7f8eb88b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f8ec036a2ae: pop     %r11
  0.05%  ↘  0x00007f8ec036a2b0: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f8ec036a2b4: mov     0xc(%rsp),%r11d
  0.73%     0x00007f8ec036a2b9: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f8ec036a97c
            0x00007f8ec036a2bd: mov     0x14(%rsp),%r8d
            0x00007f8ec036a2c2: cmp     %ecx,%r8d
            0x00007f8ec036a2c5: jnb     0x7f8ec036a70c
            0x00007f8ec036a2cb: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.39%     0x00007f8ec036a2ce: lea     0x10(%r11,%r8,4),%rbx
            0x00007f8ec036a2d3: cmpb    $0x0,0x30(%r15)
            0x00007f8ec036a2d8: jne     0x7f8ec036a3fd
            0x00007f8ec036a2de: mov     %r9,%r11
  0.83%     0x00007f8ec036a2e1: mov     %r9,%r10
            0x00007f8ec036a2e4: mov     %r10d,(%rbx)
            0x00007f8ec036a2e7: mov     %rbx,%r10
            0x00007f8ec036a2ea: xor     %r10,%r11
  0.78%     0x00007f8ec036a2ed: shr     $0x14,%r11
            0x00007f8ec036a2f1: test    %r11,%r11
            0x00007f8ec036a2f4: je      0x7f8ec0369c9a
            0x00007f8ec036a2fa: shr     $0x9,%r10
            0x00007f8ec036a2fe: movabs  $0x7f8ed43b3000,%rdi
            0x00007f8ec036a308: add     %r10,%rdi
            0x00007f8ec036a30b: cmpb    $0x20,(%rdi)
            0x00007f8ec036a30e: je      0x7f8ec0369c9a
            0x00007f8ec036a314: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 29.29%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (27 bytes) 

            0x00007f8ec0369dfa: mov     0x8(%rsp),%r8d
            0x00007f8ec0369dff: mov     0x10(%rsp),%rbx
         ╭  0x00007f8ec0369e04: jmp     0x7f8ec0369e13
         │  0x00007f8ec0369e06: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f8ec0369e0b: add     $0xfffffffffffffff8,%r9
         │  0x00007f8ec0369e0f: mov     %r9,0x70(%r15)
  1.13%  ↘  0x00007f8ec0369e13: movl    $0x0,0x14(%rbx)
            0x00007f8ec0369e1a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.77%     0x00007f8ec0369e20: mov     0x118(%r15),%r13
            0x00007f8ec0369e27: mov     %r13,%r10
            0x00007f8ec0369e2a: add     $0x18,%r10
  1.03%     0x00007f8ec0369e2e: cmp     0x128(%r15),%r10
            0x00007f8ec0369e35: jnb     0x7f8ec036a4ea    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f8ec0369e3b: mov     %r10,0x118(%r15)
            0x00007f8ec0369e42: prefetchnta 0x100(%r10)
            0x00007f8ec0369e4a: mov     0x18(%rsp),%r10
  0.69%     0x00007f8ec0369e4f: mov     0xb8(%r10),%r10
            0x00007f8ec0369e56: mov     %r10,0x0(%r13)
            0x00007f8ec0369e5a: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f8ec0369e62: movl    $0x0,0xc(%r13)
....................................................................................................
 24.93%  <total for region 2>

....[Hottest Regions]...............................................................................
 29.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (113 bytes) 
 24.93%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (27 bytes) 
  8.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (231 bytes) 
  7.25%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (202 bytes) 
  5.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (158 bytes) 
  2.84%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (53 bytes) 
  1.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (35 bytes) 
  1.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (13 bytes) 
  1.42%           libjvm.so  SpinPause (9 bytes) 
  1.08%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (26 bytes) 
  0.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (119 bytes) 
  0.69%           libjvm.so  ParallelTaskTerminator::offer_termination (5 bytes) 
  0.54%   [kernel.kallsyms]  syscall_exit_to_user_mode (1 bytes) 
  0.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (52 bytes) 
  0.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (77 bytes) 
  0.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 (11 bytes) 
  0.29%        libc-2.31.so  malloc_consolidate (16 bytes) 
  0.29%        libc-2.31.so  malloc (0 bytes) 
  0.24%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (30 bytes) 
  9.70%  <...other 157 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 84.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 537 
  2.84%   [kernel.kallsyms]  native_write_msr 
  1.42%           libjvm.so  SpinPause 
  0.69%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.59%        libc-2.31.so  malloc_consolidate 
  0.54%        libc-2.31.so  malloc 
  0.54%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.39%        libc-2.31.so  _int_malloc 
  0.39%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 
  0.29%        libc-2.31.so  _int_free 
  0.24%   [kernel.kallsyms]  free_pcppages_bulk 
  0.24%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 541 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.15%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.15%           libjvm.so  OtherRegionsTable::occupied 
  0.15%           libjvm.so  HeapRegion::clear_cardtable 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  6.37%  <...other 113 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 84.72%         c2, level 4
  6.07%   [kernel.kallsyms]
  5.78%           libjvm.so
  2.20%        libc-2.31.so
  0.98%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       519.891          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
