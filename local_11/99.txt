# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 925.877 ns/op
# Warmup Iteration   2: 548.032 ns/op
# Warmup Iteration   3: 533.912 ns/op
# Warmup Iteration   4: 529.392 ns/op
# Warmup Iteration   5: 531.439 ns/op
Iteration   1: 530.655 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  530.655 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 126361 total address lines.
Perf output processed (skipped 11.282 seconds):
 Column 1: cycles (2002 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (340 bytes) 

            0x00007f18e836a087: callq   %r10
         ╭  0x00007f18e836a08a: jmp     0x7f18e836a099
         │  0x00007f18e836a08c: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │  0x00007f18e836a091: add     $0xfffffffffffffff8,%r10
         │                                                ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │  0x00007f18e836a095: mov     %r10,0x70(%r15)
  0.05%  ↘  0x00007f18e836a099: mov     0x10(%rsp),%r10
            0x00007f18e836a09e: movl    $0x0,0x14(%r10)
  0.05%     0x00007f18e836a0a6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 21.98%     0x00007f18e836a0ac: mov     0x8(%rsp),%r10
  0.15%     0x00007f18e836a0b1: test    %r10,%r10
            0x00007f18e836a0b4: je      0x7f18e836a6c8
            0x00007f18e836a0ba: mov     0x118(%r15),%rbx
  0.70%     0x00007f18e836a0c1: mov     %rbx,%r10
            0x00007f18e836a0c4: add     $0x18,%r10
            0x00007f18e836a0c8: cmp     0x128(%r15),%r10
            0x00007f18e836a0cf: jnb     0x7f18e836a648    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f18e836a0d5: mov     %r10,0x118(%r15)
  0.60%     0x00007f18e836a0dc: prefetchnta 0x100(%r10)
  0.05%     0x00007f18e836a0e4: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f18e836a0ea: movabs  $0x800000000,%r10
            0x00007f18e836a0f4: lea     (%r10,%r11,8),%r10
  0.40%     0x00007f18e836a0f8: mov     0xb8(%r10),%r10
            0x00007f18e836a0ff: mov     %r10,(%rbx)
            0x00007f18e836a102: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f18e836a109: movl    $0x0,0xc(%rbx)
  1.05%     0x00007f18e836a110: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
            0x00007f18e836a117: mov     0x8(%rsp),%r10
            0x00007f18e836a11c: mov     %r10,%r11
            0x00007f18e836a11f: mov     %r11d,0x10(%rbx)
  0.65%     0x00007f18e836a123: mov     0x118(%r15),%rbp
  0.05%     0x00007f18e836a12a: mov     %rbp,%r10
            0x00007f18e836a12d: add     $0x20,%r10
            0x00007f18e836a131: cmp     0x128(%r15),%r10
            0x00007f18e836a138: jnb     0x7f18e836a660
  0.75%     0x00007f18e836a13e: mov     %r10,0x118(%r15)
            0x00007f18e836a145: prefetchnta 0x100(%r10)
            0x00007f18e836a14d: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f18e836a153: movabs  $0x800000000,%r10
  0.70%     0x00007f18e836a15d: lea     (%r10,%r11,8),%r10
            0x00007f18e836a161: mov     0xb8(%r10),%r10
            0x00007f18e836a168: mov     %r10,0x0(%rbp)
            0x00007f18e836a16c: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.70%     0x00007f18e836a173: movl    $0x0,0xc(%rbp)
            0x00007f18e836a17a: movq    $0x0,0x10(%rbp)
            0x00007f18e836a182: movq    $0x0,0x18(%rbp)
  0.05%     0x00007f18e836a18a: mov     0x118(%r15),%rax
  0.80%     0x00007f18e836a191: mov     %rax,%r10
            0x00007f18e836a194: add     $0x10,%r10
            0x00007f18e836a198: cmp     0x128(%r15),%r10
            0x00007f18e836a19f: jnb     0x7f18e836a689    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007f18e836a1a5: mov     %r10,0x118(%r15)
  0.60%     0x00007f18e836a1ac: prefetchnta 0x100(%r10)
            0x00007f18e836a1b4: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f18e836a1ba: movabs  $0x800000000,%r10
            0x00007f18e836a1c4: lea     (%r10,%r11,8),%r10
  0.30%     0x00007f18e836a1c8: mov     0xb8(%r10),%r10
            0x00007f18e836a1cf: mov     %r10,(%rax)
            0x00007f18e836a1d2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
            0x00007f18e836a1d9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.90%     0x00007f18e836a1e0: mov     %rbp,%r10
            0x00007f18e836a1e3: mov     %rax,%r8
            0x00007f18e836a1e6: mov     %r8d,0xc(%rbp)
            0x00007f18e836a1ea: mov     %rax,%r11
  0.75%     0x00007f18e836a1ed: xor     %r10,%r11
            0x00007f18e836a1f0: shr     $0x14,%r11
            0x00007f18e836a1f4: test    %r11,%r11
            0x00007f18e836a1f7: je      0x7f18e836a24c
            0x00007f18e836a1f9: shr     $0x9,%r10
            0x00007f18e836a1fd: movabs  $0x7f18fcb1d000,%rdi
            0x00007f18e836a207: add     %r10,%rdi
            0x00007f18e836a20a: cmpb    $0x20,(%rdi)
            0x00007f18e836a20d: je      0x7f18e836a24c
            0x00007f18e836a20f: mov     0x70(%r15),%r10
            0x00007f18e836a213: mov     0x80(%r15),%r11
....................................................................................................
 31.27%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (35 bytes) 

             0x00007f18e836a4a9: movabs  $0x7f18fecb4290,%r10
             0x00007f18e836a4b3: callq   %r10
         ╭   0x00007f18e836a4b6: jmp     0x7f18e836a4c5
         │   0x00007f18e836a4b8: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │   0x00007f18e836a4bd: add     $0xfffffffffffffff8,%r10
         │                                                 ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │   0x00007f18e836a4c1: mov     %r10,0x70(%r15)
  0.05%  ↘   0x00007f18e836a4c5: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 18.13%      0x00007f18e836a4cb: mov     0x10(%rsp),%r10
             0x00007f18e836a4d0: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
             0x00007f18e836a4d4: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; implicit exception: dispatches to 0x00007f18e836a758
  0.65%      0x00007f18e836a4d8: vcvtsi2ssl %r10d,%xmm1,%xmm1
             0x00007f18e836a4dd: mov     0x8(%rsp),%r10
             0x00007f18e836a4e2: vmulss  0x14(%r10),%xmm1,%xmm0
  0.70%      0x00007f18e836a4e8: vcvttss2si %xmm0,%r11d
             0x00007f18e836a4ec: cmp     $0x80000000,%r11d
          ╭  0x00007f18e836a4f3: jne     0x7f18e836a505
          │  0x00007f18e836a4f5: sub     $0x8,%rsp
          │  0x00007f18e836a4f9: vmovss  %xmm0,(%rsp)
          │  0x00007f18e836a4fe: callq   0x7f18e08b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007f18e836a503: pop     %r11
          ↘  0x00007f18e836a505: mov     0x10(%rsp),%r10
  0.55%      0x00007f18e836a50a: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
....................................................................................................
 19.53%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (259 bytes) 

             0x00007f18e8372a7c: movabs  $0x7f18fecb4290,%r10
             0x00007f18e8372a86: callq   %r10
             0x00007f18e8372a89: mov     %ebx,%r10d
             0x00007f18e8372a8c: nopl    0x0(%rax)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007f18e8372a90: mov     0x108(%r15),%r11
  0.85%  ││  0x00007f18e8372a97: mov     0x18(%rsp),%r9
  0.10%  ││  0x00007f18e8372a9c: mov     0x1c(%r9),%ecx    ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f18e8372aa0: incl    %r10d             ; ImmutableOopMap{r9=Oop rcx=NarrowOop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f18e8372aa3: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
  0.95%  ││  0x00007f18e8372aa6: mov     0xc(%rcx),%r8d    ; implicit exception: dispatches to 0x00007f18e8373020
  0.05%  ││  0x00007f18e8372aaa: cmp     %r8d,%r10d
         ││  0x00007f18e8372aad: jnl     0x7f18e837276d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f18e8372ab3: mov     0x70(%rsp),%r8
         ││  0x00007f18e8372ab8: mov     0x20(%rsp),%rbp
  0.70%  ││  0x00007f18e8372abd: mov     0x10(%rsp),%rbx
         ││  0x00007f18e8372ac2: mov     0x28(%rsp),%r13d
         ││  0x00007f18e8372ac7: mov     0x118(%r15),%rax
  0.05%  ││  0x00007f18e8372ace: mov     %rax,%r11
  0.65%  ││  0x00007f18e8372ad1: add     $0x28,%r11
         ││  0x00007f18e8372ad5: cmp     0x128(%r15),%r11
         ││  0x00007f18e8372adc: jnb     0x7f18e8372c35    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f18e8372ae2: mov     %r11,0x118(%r15)
         ││  0x00007f18e8372ae9: prefetchnta 0x100(%r11)
  0.35%  ││  0x00007f18e8372af1: mov     (%rsp),%r11
         ││  0x00007f18e8372af5: mov     0xb8(%r11),%rdi
         ││  0x00007f18e8372afc: mov     %rdi,(%rax)
  0.05%  ││  0x00007f18e8372aff: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.80%  ││  0x00007f18e8372b06: movl    $0x0,0xc(%rax)
         ││  0x00007f18e8372b0d: movq    $0x0,0x10(%rax)
         ││  0x00007f18e8372b15: movq    $0x0,0x18(%rax)
         ││  0x00007f18e8372b1d: movq    $0x0,0x20(%rax)
  0.45%  ││  0x00007f18e8372b25: mov     %r8,0x70(%rsp)
         ││  0x00007f18e8372b2a: mov     %rbp,0x20(%rsp)
         ││  0x00007f18e8372b2f: mov     %rbx,0x10(%rsp)
         ││  0x00007f18e8372b34: mov     %r9,0x18(%rsp)
  0.95%  ││  0x00007f18e8372b39: mov     %r13d,0x28(%rsp)
  0.10%  ││  0x00007f18e8372b3e: mov     %ecx,0x2c(%rsp)
         ││  0x00007f18e8372b42: mov     %r10d,0x30(%rsp)
  0.05%  ││  0x00007f18e8372b47: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.60%  ││  0x00007f18e8372b4c: mov     %rax,%rsi
         ││  0x00007f18e8372b4f: mov     0x18(%rsp),%rdx
  0.80%  ││  0x00007f18e8372b54: mov     0x28(%rsp),%ecx
         ││  0x00007f18e8372b58: nop
  0.65%  ││  0x00007f18e8372b5b: callq   0x7f18e089d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007f18e8372b60: mov     0x2c(%rsp),%r11d
  0.85%  ││  0x00007f18e8372b65: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f18e8373014
  0.05%  ││  0x00007f18e8372b69: mov     0x30(%rsp),%r10d
         ││  0x00007f18e8372b6e: cmp     %r8d,%r10d
         ││  0x00007f18e8372b71: jnb     0x7f18e8372d13
  0.05%  ││  0x00007f18e8372b77: mov     %r11,%r8          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.60%  ││  0x00007f18e8372b7a: lea     0x10(%r11,%r10,4),%rbx
         ││  0x00007f18e8372b7f: cmpb    $0x0,0x30(%r15)
         ││  0x00007f18e8372b84: jne     0x7f18e8372c03
         ││  0x00007f18e8372b86: mov     0x38(%rsp),%r11
  0.95%  ││  0x00007f18e8372b8b: mov     %r11,%r9
         ││  0x00007f18e8372b8e: mov     %r11,%r8
         ││  0x00007f18e8372b91: mov     %r8d,(%rbx)
         ││  0x00007f18e8372b94: mov     %rbx,%r11
  0.85%  ││  0x00007f18e8372b97: xor     %r11,%r9
  0.05%  ││  0x00007f18e8372b9a: shr     $0x14,%r9
         ││  0x00007f18e8372b9e: test    %r9,%r9
         ╰│  0x00007f18e8372ba1: je      0x7f18e8372a90
          │  0x00007f18e8372ba7: shr     $0x9,%r11
          │  0x00007f18e8372bab: movabs  $0x7f18fcb1d000,%rdi
          │  0x00007f18e8372bb5: add     %r11,%rdi
          │  0x00007f18e8372bb8: cmpb    $0x20,(%rdi)
          ╰  0x00007f18e8372bbb: je      0x7f18e8372a90
             0x00007f18e8372bc1: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 11.54%  <total for region 3>

....[Hottest Regions]...............................................................................
 31.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (340 bytes) 
 19.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (35 bytes) 
 11.54%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (259 bytes) 
  5.04%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (111 bytes) 
  4.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (140 bytes) 
  3.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (67 bytes) 
  3.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (64 bytes) 
  3.15%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (31 bytes) 
  1.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (26 bytes) 
  1.45%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (3 bytes) 
  0.85%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (16 bytes) 
  0.65%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 (0 bytes) 
  0.45%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (27 bytes) 
  0.45%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (53 bytes) 
  0.45%        libc-2.31.so  malloc_consolidate (59 bytes) 
  0.35%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (71 bytes) 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 (19 bytes) 
  0.25%        libc-2.31.so  __memset_avx2_unaligned_erms (19 bytes) 
  9.04%  <...other 145 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 72.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 542 
 14.74%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 581 
  3.15%   [kernel.kallsyms]  native_write_msr 
  0.60%        libc-2.31.so  malloc_consolidate 
  0.45%        libc-2.31.so  malloc 
  0.40%        libc-2.31.so  _int_malloc 
  0.35%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.35%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk 
  0.20%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 550 
  0.20%   [kernel.kallsyms]  page_remove_rmap 
  0.20%   [kernel.kallsyms]  release_pages 
  0.20%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.15%           libjvm.so  SpinPause 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%           libjvm.so  MemAllocator::allocate 
  0.15%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%   [kernel.kallsyms]  __acct_update_integrals 
  0.15%   [kernel.kallsyms]  free_unref_page_list 
  5.39%  <...other 97 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.26%         c2, level 4
  6.64%   [kernel.kallsyms]
  3.00%           libjvm.so
  2.35%        libc-2.31.so
  0.55%    libfcml.so.0.0.0
  0.05%         classes.jsa
  0.05%          ld-2.31.so
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       530.655          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
