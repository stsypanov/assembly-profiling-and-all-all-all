# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 825.517 ns/op
# Warmup Iteration   2: 544.181 ns/op
# Warmup Iteration   3: 533.274 ns/op
# Warmup Iteration   4: 541.064 ns/op
# Warmup Iteration   5: 534.700 ns/op
Iteration   1: 531.132 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  531.132 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119363 total address lines.
Perf output processed (skipped 11.272 seconds):
 Column 1: cycles (1914 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbb036b65f: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fbbb036b663: mov     %r10,0x70(%r15)
            0x00007fbbb036b667: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 27.43%     0x00007fbbb036b66d: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fbbb036b671: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fbbb036bd58
            0x00007fbbb036b675: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.89%     0x00007fbbb036b67a: mov     (%rsp),%r10
            0x00007fbbb036b67e: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007fbbb036b684: vcvttss2si %xmm1,%r11d
  0.84%     0x00007fbbb036b688: cmp     $0x80000000,%r11d
         ╭  0x00007fbbb036b68f: jne     0x7fbbb036b6a1
         │  0x00007fbbb036b691: sub     $0x8,%rsp
         │  0x00007fbbb036b695: vmovss  %xmm1,(%rsp)
         │  0x00007fbbb036b69a: callq   0x7fbba88b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fbbb036b69f: pop     %r11
         ↘  0x00007fbbb036b6a1: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fbbb036b6a5: mov     0xc(%rsp),%r11d
  0.94%     0x00007fbbb036b6aa: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007fbbb036bd64
            0x00007fbbb036b6ae: mov     0x14(%rsp),%r8d
....................................................................................................
 29.15%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (27 bytes) 

            0x00007fbbb036b1eb: mov     0x8(%rsp),%r8d
            0x00007fbbb036b1f0: mov     0x10(%rsp),%rbx
         ╭  0x00007fbbb036b1f5: jmp     0x7fbbb036b204
         │  0x00007fbbb036b1f7: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fbbb036b1fc: add     $0xfffffffffffffff8,%r9
         │  0x00007fbbb036b200: mov     %r9,0x70(%r15)
  0.89%  ↘  0x00007fbbb036b204: movl    $0x0,0x14(%rbx)
            0x00007fbbb036b20b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 25.91%     0x00007fbbb036b211: mov     0x118(%r15),%r13
  0.05%     0x00007fbbb036b218: mov     %r13,%r10
            0x00007fbbb036b21b: add     $0x18,%r10
  0.63%     0x00007fbbb036b21f: cmp     0x128(%r15),%r10
            0x00007fbbb036b226: jnb     0x7fbbb036b8da    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fbbb036b22c: mov     %r10,0x118(%r15)
            0x00007fbbb036b233: prefetchnta 0x100(%r10)
            0x00007fbbb036b23b: mov     0x18(%rsp),%r10
  0.57%     0x00007fbbb036b240: mov     0xb8(%r10),%r10
            0x00007fbbb036b247: mov     %r10,0x0(%r13)
            0x00007fbbb036b24b: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fbbb036b253: movl    $0x0,0xc(%r13)
....................................................................................................
 27.48%  <total for region 2>

....[Hottest Regions]...............................................................................
 29.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (27 bytes) 
 27.48%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (27 bytes) 
  8.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (231 bytes) 
  5.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (158 bytes) 
  5.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (205 bytes) 
  3.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (43 bytes) 
  2.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (52 bytes) 
  2.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (35 bytes) 
  1.67%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (24 bytes) 
  1.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (26 bytes) 
  1.15%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (38 bytes) 
  0.37%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.31%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (48 bytes) 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (32 bytes) 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 (20 bytes) 
  0.21%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (41 bytes) 
  0.21%           libjvm.so  OptoRuntime::new_instance_C (2 bytes) 
  0.21%          ld-2.31.so  __tls_get_addr (29 bytes) 
  0.16%   [kernel.kallsyms]  release_pages (0 bytes) 
  8.46%  <...other 141 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.60%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 533 
  1.15%   [kernel.kallsyms]  native_write_msr 
  0.42%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.31%   [kernel.kallsyms]  release_pages 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  0.21%        libc-2.31.so  malloc 
  0.21%           libjvm.so  OptoRuntime::new_instance_C 
  0.21%        libc-2.31.so  _int_malloc 
  0.21%          ld-2.31.so  __tls_get_addr 
  0.21%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.21%        libc-2.31.so  malloc_consolidate 
  0.16%   [kernel.kallsyms]  free_pcppages_bulk 
  0.16%           libjvm.so  InstanceKlass::allocate_objArray 
  0.16%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.16%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 537 
  0.10%   [kernel.kallsyms]  psi_group_change 
  0.10%           libjvm.so  SpinPause 
  0.10%           libjvm.so  G1FromCardCache::clear 
  0.10%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.10%        libc-2.31.so  __memmove_avx_unaligned_erms 
  5.75%  <...other 99 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.07%         c2, level 4
  4.18%   [kernel.kallsyms]
  3.13%           libjvm.so
  1.57%        libc-2.31.so
  0.57%    libfcml.so.0.0.0
  0.21%          ld-2.31.so
  0.10%  libpthread-2.31.so
  0.05%        runtime stub
  0.05%      perf-20031.map
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       531.132          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
