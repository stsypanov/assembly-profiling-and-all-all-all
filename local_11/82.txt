# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1023.674 ns/op
# Warmup Iteration   2: 521.861 ns/op
# Warmup Iteration   3: 508.500 ns/op
# Warmup Iteration   4: 512.381 ns/op
# Warmup Iteration   5: 512.581 ns/op
Iteration   1: 511.803 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  511.803 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 123553 total address lines.
Perf output processed (skipped 11.276 seconds):
 Column 1: cycles (2011 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (262 bytes) 

            0x00007f1f5036b47c: mov     0x8(%rsp),%r10d
            0x00007f1f5036b481: mov     0x10(%rsp),%r13
         ╭  0x00007f1f5036b486: jmp     0x7f1f5036b495
         │  0x00007f1f5036b488: mov     %rdi,0xfffffffffffffff8(%r8,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f1f5036b48d: add     $0xfffffffffffffff8,%r9
         │  0x00007f1f5036b491: mov     %r9,0x70(%r15)
  0.05%  ↘  0x00007f1f5036b495: movl    $0x0,0x14(%r13)
  0.60%     0x00007f1f5036b49d: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.58%     0x00007f1f5036b4a3: mov     0x118(%r15),%r14
            0x00007f1f5036b4aa: mov     %r14,%r8
            0x00007f1f5036b4ad: add     $0x18,%r8
  0.60%     0x00007f1f5036b4b1: cmp     0x128(%r15),%r8
            0x00007f1f5036b4b8: jnb     0x7f1f5036bb69    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f1f5036b4be: mov     %r8,0x118(%r15)
            0x00007f1f5036b4c5: prefetchnta 0x100(%r8)
            0x00007f1f5036b4cd: mov     0x18(%rsp),%r8
  1.09%     0x00007f1f5036b4d2: mov     0xb8(%r8),%r8
            0x00007f1f5036b4d9: mov     %r8,(%r14)
            0x00007f1f5036b4dc: movl    $0x8012694,0x8(%r14)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f1f5036b4e4: movl    $0x0,0xc(%r14)
  0.75%     0x00007f1f5036b4ec: movl    $0x0,0x14(%r14)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1f5036b4f4: mov     %ebx,0x10(%r14)
            0x00007f1f5036b4f8: mov     0x118(%r15),%rcx
            0x00007f1f5036b4ff: mov     %rcx,%r8
  0.90%     0x00007f1f5036b502: add     $0x20,%r8
            0x00007f1f5036b506: cmp     0x128(%r15),%r8
            0x00007f1f5036b50d: jnb     0x7f1f5036bbd4
            0x00007f1f5036b513: mov     %r8,0x118(%r15)
            0x00007f1f5036b51a: prefetchnta 0x100(%r8)
  0.75%     0x00007f1f5036b522: mov     0xb8(%rsi),%r8
            0x00007f1f5036b529: mov     %r8,(%rcx)
            0x00007f1f5036b52c: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f1f5036b533: movl    $0x0,0xc(%rcx)
  0.50%     0x00007f1f5036b53a: movq    $0x0,0x10(%rcx)
            0x00007f1f5036b542: movq    $0x0,0x18(%rcx)
            0x00007f1f5036b54a: mov     0x118(%r15),%rax
            0x00007f1f5036b551: mov     %rax,%r8
  0.85%     0x00007f1f5036b554: add     $0x10,%r8
            0x00007f1f5036b558: cmp     0x128(%r15),%r8
            0x00007f1f5036b55f: jnb     0x7f1f5036bc49    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f1f5036b565: mov     %r8,0x118(%r15)
            0x00007f1f5036b56c: prefetchnta 0x100(%r8)
  0.75%     0x00007f1f5036b574: mov     0x28(%rsp),%r8
            0x00007f1f5036b579: mov     0xb8(%r8),%r8
            0x00007f1f5036b580: mov     %r8,(%rax)
  0.05%     0x00007f1f5036b583: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.30%     0x00007f1f5036b58a: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1f5036b591: mov     %rcx,%r8
            0x00007f1f5036b594: mov     %rax,%r9
            0x00007f1f5036b597: mov     %r9d,0xc(%rcx)
  0.90%     0x00007f1f5036b59b: mov     %rax,%r9
            0x00007f1f5036b59e: xor     %r8,%r9
            0x00007f1f5036b5a1: shr     $0x14,%r9
            0x00007f1f5036b5a5: test    %r9,%r9
            0x00007f1f5036b5a8: je      0x7f1f5036b635
            0x00007f1f5036b5ae: shr     $0x9,%r8
            0x00007f1f5036b5b2: movabs  $0x7f1f43800000,%rdi
            0x00007f1f5036b5bc: add     %r8,%rdi
            0x00007f1f5036b5bf: cmpb    $0x20,(%rdi)
            0x00007f1f5036b5c2: je      0x7f1f5036b635
            0x00007f1f5036b5c4: mov     0x80(%r15),%r8    ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 30.73%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1f5036b8f7: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f1f5036b8fb: mov     %r10,0x70(%r15)
            0x00007f1f5036b8ff: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 24.27%     0x00007f1f5036b905: mov     0x20(%r8),%r10d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f1f5036b909: mov     0xc(%r10),%r11d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f1f5036bfe8
            0x00007f1f5036b90d: vcvtsi2ssl %r11d,%xmm0,%xmm0
  0.55%     0x00007f1f5036b912: mov     (%rsp),%r10
            0x00007f1f5036b916: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f1f5036b91c: vcvttss2si %xmm1,%r10d
  0.75%     0x00007f1f5036b920: cmp     $0x80000000,%r10d
         ╭  0x00007f1f5036b927: jne     0x7f1f5036b939
         │  0x00007f1f5036b929: sub     $0x8,%rsp
         │  0x00007f1f5036b92d: vmovss  %xmm1,(%rsp)
         │  0x00007f1f5036b932: callq   0x7f1f488b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f1f5036b937: pop     %r10
         ↘  0x00007f1f5036b939: mov     %r10d,0x18(%r8)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f1f5036b93d: mov     0xc(%rsp),%r11d
  0.60%     0x00007f1f5036b942: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f1f5036bff4
  0.05%     0x00007f1f5036b946: mov     0x14(%rsp),%r10d
....................................................................................................
 25.56%  <total for region 2>

....[Hottest Regions]...............................................................................
 30.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (262 bytes) 
 25.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (27 bytes) 
  9.90%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (229 bytes) 
  8.95%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (245 bytes) 
  3.08%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (53 bytes) 
  1.94%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (35 bytes) 
  1.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (13 bytes) 
  1.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (0 bytes) 
  0.99%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (18 bytes) 
  0.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (78 bytes) 
  0.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 (68 bytes) 
  0.60%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.35%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 552 (27 bytes) 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 578 (39 bytes) 
  0.25%        libc-2.31.so  malloc_consolidate (0 bytes) 
  0.25%        libc-2.31.so  malloc (0 bytes) 
  0.20%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  9.80%  <...other 158 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 85.33%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 548 
  3.08%   [kernel.kallsyms]  native_write_msr 
  0.65%        libc-2.31.so  malloc 
  0.65%   [kernel.kallsyms]  free_pcppages_bulk 
  0.60%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.50%        libc-2.31.so  malloc_consolidate 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.30%        libc-2.31.so  _int_free 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 552 
  0.30%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 578 
  0.25%        libc-2.31.so  _int_malloc 
  0.25%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  release_pages 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%    libfcml.so.0.0.0  fcml_ifn_dasm_decode_instruction 
  0.15%           libjvm.so  SpinPause 
  0.15%           libjvm.so  ThreadLocalAllocBuffer::fill 
  0.15%           libjvm.so  fileStream::write 
  0.15%   [kernel.kallsyms]  __mod_memcg_state 
  6.12%  <...other 107 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 85.93%         c2, level 4
  7.76%   [kernel.kallsyms]
  2.88%           libjvm.so
  2.24%        libc-2.31.so
  0.85%    libfcml.so.0.0.0
  0.20%         interpreter
  0.05%              [vdso]
  0.05%              kvm.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       511.803          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
