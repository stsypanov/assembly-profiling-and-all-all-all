# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 800.546 ns/op
# Warmup Iteration   2: 527.020 ns/op
# Warmup Iteration   3: 517.525 ns/op
# Warmup Iteration   4: 563.788 ns/op
# Warmup Iteration   5: 514.146 ns/op
Iteration   1: 514.801 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  514.801 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 117817 total address lines.
Perf output processed (skipped 11.163 seconds):
 Column 1: cycles (1941 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fd1dc36b1ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fd1dc36b1f2: mov     %r10,0x70(%r15)
            0x00007fd1dc36b1f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.04%     0x00007fd1dc36b1fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.21%     0x00007fd1dc36b200: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fd1dc36b8f0
            0x00007fd1dc36b204: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.72%     0x00007fd1dc36b209: mov     (%rsp),%r10
            0x00007fd1dc36b20d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007fd1dc36b213: vcvttss2si %xmm0,%r11d
  1.13%     0x00007fd1dc36b217: cmp     $0x80000000,%r11d
         ╭  0x00007fd1dc36b21e: jne     0x7fd1dc36b230
         │  0x00007fd1dc36b220: sub     $0x8,%rsp
         │  0x00007fd1dc36b224: vmovss  %xmm0,(%rsp)
         │  0x00007fd1dc36b229: callq   0x7fd1d48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fd1dc36b22e: pop     %r11
         ↘  0x00007fd1dc36b230: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fd1dc36b234: mov     0xc(%rsp),%r11d
  1.29%     0x00007fd1dc36b239: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007fd1dc36b8fc
            0x00007fd1dc36b23d: mov     0x14(%rsp),%r8d
....................................................................................................
 27.10%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (27 bytes) 

            0x00007fd1dc36ad7a: mov     0x8(%rsp),%r8d
            0x00007fd1dc36ad7f: mov     0x10(%rsp),%rbx
         ╭  0x00007fd1dc36ad84: jmp     0x7fd1dc36ad93
         │  0x00007fd1dc36ad86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fd1dc36ad8b: add     $0xfffffffffffffff8,%r9
         │  0x00007fd1dc36ad8f: mov     %r9,0x70(%r15)
  0.62%  ↘  0x00007fd1dc36ad93: movl    $0x0,0x14(%rbx)
            0x00007fd1dc36ad9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 25.14%     0x00007fd1dc36ada0: mov     0x118(%r15),%r13
            0x00007fd1dc36ada7: mov     %r13,%r10
            0x00007fd1dc36adaa: add     $0x18,%r10
  0.82%     0x00007fd1dc36adae: cmp     0x128(%r15),%r10
            0x00007fd1dc36adb5: jnb     0x7fd1dc36b46a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fd1dc36adbb: mov     %r10,0x118(%r15)
            0x00007fd1dc36adc2: prefetchnta 0x100(%r10)
            0x00007fd1dc36adca: mov     0x18(%rsp),%r10
  0.77%     0x00007fd1dc36adcf: mov     0xb8(%r10),%r10
            0x00007fd1dc36add6: mov     %r10,0x0(%r13)
            0x00007fd1dc36adda: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fd1dc36ade2: movl    $0x0,0xc(%r13)
....................................................................................................
 26.58%  <total for region 2>

....[Hottest Regions]...............................................................................
 27.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (27 bytes) 
 26.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (27 bytes) 
  8.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (239 bytes) 
  8.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (231 bytes) 
  8.09%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (202 bytes) 
  3.30%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (52 bytes) 
  2.63%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (13 bytes) 
  2.27%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (35 bytes) 
  1.55%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (173 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (54 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (36 bytes) 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 529 (58 bytes) 
  0.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 (90 bytes) 
  0.26%        libc-2.31.so  malloc_consolidate (42 bytes) 
  0.21%           libjvm.so  fileStream::write (5 bytes) 
  0.21%        libc-2.31.so  malloc_consolidate (24 bytes) 
  0.21%        libc-2.31.so  _int_free (5 bytes) 
  0.15%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 (9 bytes) 
  6.75%  <...other 114 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.28%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 526 
  2.63%   [kernel.kallsyms]  native_write_msr 
  0.46%        libc-2.31.so  _int_malloc 
  0.46%        libc-2.31.so  malloc_consolidate 
  0.31%        libc-2.31.so  malloc 
  0.31%        libc-2.31.so  _int_free 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 565 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 529 
  0.26%           libjvm.so  fileStream::write 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.15%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.10%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.10%           libjvm.so  G1Policy::predict_yg_surv_rate 
  0.10%           libjvm.so  Monitor::ILock 
  0.10%           libjvm.so  OptoRuntime::new_instance_C 
  0.10%   [kernel.kallsyms]  free_pcppages_bulk 
  0.10%           libjvm.so  G1RemSetScanState::G1ClearCardTableTask::work 
  0.10%   [kernel.kallsyms]  free_pages_and_swap_cache 
  0.10%        libc-2.31.so  __memset_avx2_unaligned_erms 
  4.22%  <...other 75 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 89.90%         c2, level 4
  4.79%   [kernel.kallsyms]
  2.52%           libjvm.so
  1.96%        libc-2.31.so
  0.46%    libfcml.so.0.0.0
  0.05%        runtime stub
  0.05%         classes.jsa
  0.05%              kvm.ko
  0.05%         interpreter
  0.05%           nvidia.ko
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       514.801          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
