# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 916.740 ns/op
# Warmup Iteration   2: 551.470 ns/op
# Warmup Iteration   3: 534.471 ns/op
# Warmup Iteration   4: 532.336 ns/op
# Warmup Iteration   5: 533.431 ns/op
Iteration   1: 539.442 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  539.442 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119267 total address lines.
Perf output processed (skipped 11.279 seconds):
 Column 1: cycles (1931 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (262 bytes) 

            0x00007f9dfc36896b: mov     0x8(%rsp),%r8d
            0x00007f9dfc368970: mov     0x10(%rsp),%rbx
         ╭  0x00007f9dfc368975: jmp     0x7f9dfc368984
         │  0x00007f9dfc368977: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f9dfc36897c: add     $0xfffffffffffffff8,%r9
         │  0x00007f9dfc368980: mov     %r9,0x70(%r15)
  1.14%  ↘  0x00007f9dfc368984: movl    $0x0,0x14(%rbx)
  0.10%     0x00007f9dfc36898b: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.44%     0x00007f9dfc368991: mov     0x118(%r15),%r13
  0.05%     0x00007f9dfc368998: mov     %r13,%r10
            0x00007f9dfc36899b: add     $0x18,%r10
  0.78%     0x00007f9dfc36899f: cmp     0x128(%r15),%r10
            0x00007f9dfc3689a6: jnb     0x7f9dfc36905a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9dfc3689ac: mov     %r10,0x118(%r15)
            0x00007f9dfc3689b3: prefetchnta 0x100(%r10)
  0.05%     0x00007f9dfc3689bb: mov     0x18(%rsp),%r10
  0.83%     0x00007f9dfc3689c0: mov     0xb8(%r10),%r10
            0x00007f9dfc3689c7: mov     %r10,0x0(%r13)
            0x00007f9dfc3689cb: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f9dfc3689d3: movl    $0x0,0xc(%r13)
  0.78%     0x00007f9dfc3689db: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9dfc3689e3: mov     %r14d,0x10(%r13)
            0x00007f9dfc3689e7: mov     0x118(%r15),%rcx
            0x00007f9dfc3689ee: mov     %rcx,%r10
  0.78%     0x00007f9dfc3689f1: add     $0x20,%r10
            0x00007f9dfc3689f5: cmp     0x128(%r15),%r10
            0x00007f9dfc3689fc: jnb     0x7f9dfc3690c5
  0.05%     0x00007f9dfc368a02: mov     %r10,0x118(%r15)
            0x00007f9dfc368a09: prefetchnta 0x100(%r10)
  1.09%     0x00007f9dfc368a11: mov     0xb8(%rsi),%r10
  0.05%     0x00007f9dfc368a18: mov     %r10,(%rcx)
            0x00007f9dfc368a1b: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.05%     0x00007f9dfc368a22: movl    $0x0,0xc(%rcx)
  0.98%     0x00007f9dfc368a29: movq    $0x0,0x10(%rcx)
            0x00007f9dfc368a31: movq    $0x0,0x18(%rcx)
            0x00007f9dfc368a39: mov     0x118(%r15),%rax
  0.10%     0x00007f9dfc368a40: mov     %rax,%r10
  0.62%     0x00007f9dfc368a43: add     $0x10,%r10
  0.05%     0x00007f9dfc368a47: cmp     0x128(%r15),%r10
            0x00007f9dfc368a4e: jnb     0x7f9dfc36913a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9dfc368a54: mov     %r10,0x118(%r15)
            0x00007f9dfc368a5b: prefetchnta 0x100(%r10)
  0.57%     0x00007f9dfc368a63: mov     0x28(%rsp),%r10
            0x00007f9dfc368a68: mov     0xb8(%r10),%r10
  0.05%     0x00007f9dfc368a6f: mov     %r10,(%rax)
  0.05%     0x00007f9dfc368a72: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.73%     0x00007f9dfc368a79: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9dfc368a80: mov     %rcx,%r9
            0x00007f9dfc368a83: mov     %rax,%r10
            0x00007f9dfc368a86: mov     %r10d,0xc(%rcx)
  0.67%     0x00007f9dfc368a8a: mov     %rax,%r10
            0x00007f9dfc368a8d: xor     %r9,%r10
            0x00007f9dfc368a90: shr     $0x14,%r10
            0x00007f9dfc368a94: test    %r10,%r10
            0x00007f9dfc368a97: je      0x7f9dfc368b24
            0x00007f9dfc368a9d: shr     $0x9,%r9
            0x00007f9dfc368aa1: movabs  $0x7f9e10ca6000,%rdi
            0x00007f9dfc368aab: add     %r9,%rdi
            0x00007f9dfc368aae: cmpb    $0x20,(%rdi)
            0x00007f9dfc368ab1: je      0x7f9dfc368b24
            0x00007f9dfc368ab3: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 34.02%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9dfc368ddf: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9dfc368de3: mov     %r10,0x70(%r15)
            0x00007f9dfc368de7: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 25.53%     0x00007f9dfc368ded: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f9dfc368df1: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f9dfc3694d8
            0x00007f9dfc368df5: vcvtsi2ssl %r10d,%xmm0,%xmm0
  0.47%     0x00007f9dfc368dfa: mov     (%rsp),%r10
            0x00007f9dfc368dfe: vmulss  0x14(%r10),%xmm0,%xmm1
            0x00007f9dfc368e04: vcvttss2si %xmm1,%r11d
  1.09%     0x00007f9dfc368e08: cmp     $0x80000000,%r11d
         ╭  0x00007f9dfc368e0f: jne     0x7f9dfc368e21
         │  0x00007f9dfc368e11: sub     $0x8,%rsp
         │  0x00007f9dfc368e15: vmovss  %xmm1,(%rsp)
         │  0x00007f9dfc368e1a: callq   0x7f9df48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f9dfc368e1f: pop     %r11
         ↘  0x00007f9dfc368e21: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f9dfc368e25: mov     0xc(%rsp),%r11d
  0.62%     0x00007f9dfc368e2a: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f9dfc3694e4
  0.05%     0x00007f9dfc368e2e: mov     0x14(%rsp),%r8d
....................................................................................................
 27.19%  <total for region 2>

....[Hottest Regions]...............................................................................
 34.02%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (262 bytes) 
 27.19%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (27 bytes) 
  8.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (231 bytes) 
  5.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (158 bytes) 
  3.00%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (52 bytes) 
  2.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (35 bytes) 
  2.38%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (43 bytes) 
  2.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (13 bytes) 
  1.29%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (76 bytes) 
  1.19%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (108 bytes) 
  0.88%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 (118 bytes) 
  0.73%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (88 bytes) 
  0.52%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.47%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 541 (65 bytes) 
  0.41%        libc-2.31.so  malloc_consolidate (29 bytes) 
  0.36%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 (90 bytes) 
  0.31%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  0.16%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  7.35%  <...other 122 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.40%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 536 
  1.19%   [kernel.kallsyms]  native_write_msr 
  0.88%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 569 
  0.52%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.47%        libc-2.31.so  malloc 
  0.47%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 541 
  0.47%        libc-2.31.so  malloc_consolidate 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.26%   [kernel.kallsyms]  free_pcppages_bulk 
  0.26%        libc-2.31.so  _int_malloc 
  0.21%        libc-2.31.so  _int_free 
  0.16%   [kernel.kallsyms]  page_remove_rmap 
  0.16%           libjvm.so  SpinPause 
  0.16%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.16%           libjvm.so  G1ParCopyClosure<(G1Barrier)0, (G1Mark)0>::do_oop 
  0.16%           libjvm.so  G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  0.10%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.10%           libjvm.so  G1RemSetScanState::G1ClearCardTableTask::work 
  0.10%    libfcml.so.0.0.0  fcml_fn_coll_list_free 
  5.28%  <...other 95 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.75%         c2, level 4
  4.14%   [kernel.kallsyms]
  2.80%           libjvm.so
  2.07%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.31%         interpreter
  0.05%          ld-2.31.so
  0.05%         c1, level 3
  0.05%          libahci.ko
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       539.442          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
