# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 959.717 ns/op
# Warmup Iteration   2: 544.427 ns/op
# Warmup Iteration   3: 531.166 ns/op
# Warmup Iteration   4: 529.765 ns/op
# Warmup Iteration   5: 533.963 ns/op
Iteration   1: 529.116 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  529.116 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119424 total address lines.
Perf output processed (skipped 11.257 seconds):
 Column 1: cycles (1950 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (262 bytes) 

            0x00007f6f0436997a: mov     0x8(%rsp),%r8d
            0x00007f6f0436997f: mov     0x10(%rsp),%rbx
         ╭  0x00007f6f04369984: jmp     0x7f6f04369993
         │  0x00007f6f04369986: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f6f0436998b: add     $0xfffffffffffffff8,%r9
         │  0x00007f6f0436998f: mov     %r9,0x70(%r15)
  0.56%  ↘  0x00007f6f04369993: movl    $0x0,0x14(%rbx)
  0.05%     0x00007f6f0436999a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 23.23%     0x00007f6f043699a0: mov     0x118(%r15),%r13
  0.05%     0x00007f6f043699a7: mov     %r13,%r10
            0x00007f6f043699aa: add     $0x18,%r10
  1.03%     0x00007f6f043699ae: cmp     0x128(%r15),%r10
            0x00007f6f043699b5: jnb     0x7f6f0436a06a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f6f043699bb: mov     %r10,0x118(%r15)
            0x00007f6f043699c2: prefetchnta 0x100(%r10)
  0.15%     0x00007f6f043699ca: mov     0x18(%rsp),%r10
  1.08%     0x00007f6f043699cf: mov     0xb8(%r10),%r10
            0x00007f6f043699d6: mov     %r10,0x0(%r13)
            0x00007f6f043699da: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f6f043699e2: movl    $0x0,0xc(%r13)
  0.56%     0x00007f6f043699ea: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6f043699f2: mov     %r14d,0x10(%r13)
            0x00007f6f043699f6: mov     0x118(%r15),%rcx
            0x00007f6f043699fd: mov     %rcx,%r10
  0.51%     0x00007f6f04369a00: add     $0x20,%r10
            0x00007f6f04369a04: cmp     0x128(%r15),%r10
            0x00007f6f04369a0b: jnb     0x7f6f0436a0d5
            0x00007f6f04369a11: mov     %r10,0x118(%r15)
            0x00007f6f04369a18: prefetchnta 0x100(%r10)
  0.77%     0x00007f6f04369a20: mov     0xb8(%rsi),%r10
  0.05%     0x00007f6f04369a27: mov     %r10,(%rcx)
            0x00007f6f04369a2a: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f6f04369a31: movl    $0x0,0xc(%rcx)
  0.62%     0x00007f6f04369a38: movq    $0x0,0x10(%rcx)
            0x00007f6f04369a40: movq    $0x0,0x18(%rcx)
            0x00007f6f04369a48: mov     0x118(%r15),%rax
  0.05%     0x00007f6f04369a4f: mov     %rax,%r10
  0.82%     0x00007f6f04369a52: add     $0x10,%r10
            0x00007f6f04369a56: cmp     0x128(%r15),%r10
            0x00007f6f04369a5d: jnb     0x7f6f0436a14a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f6f04369a63: mov     %r10,0x118(%r15)
            0x00007f6f04369a6a: prefetchnta 0x100(%r10)
  0.87%     0x00007f6f04369a72: mov     0x28(%rsp),%r10
            0x00007f6f04369a77: mov     0xb8(%r10),%r10
            0x00007f6f04369a7e: mov     %r10,(%rax)
            0x00007f6f04369a81: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.62%     0x00007f6f04369a88: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6f04369a8f: mov     %rcx,%r9
            0x00007f6f04369a92: mov     %rax,%r10
            0x00007f6f04369a95: mov     %r10d,0xc(%rcx)
  0.62%     0x00007f6f04369a99: mov     %rax,%r10
            0x00007f6f04369a9c: xor     %r9,%r10
            0x00007f6f04369a9f: shr     $0x14,%r10
            0x00007f6f04369aa3: test    %r10,%r10
            0x00007f6f04369aa6: je      0x7f6f04369b33
            0x00007f6f04369aac: shr     $0x9,%r9
            0x00007f6f04369ab0: movabs  $0x7f6f198c9000,%rdi
            0x00007f6f04369aba: add     %r9,%rdi
            0x00007f6f04369abd: cmpb    $0x20,(%rdi)
            0x00007f6f04369ac0: je      0x7f6f04369b33
            0x00007f6f04369ac2: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 31.69%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f6f04369dee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f6f04369df2: mov     %r10,0x70(%r15)
            0x00007f6f04369df6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.21%     0x00007f6f04369dfc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007f6f04369e00: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f6f0436a4f0
            0x00007f6f04369e04: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.77%     0x00007f6f04369e09: mov     (%rsp),%r10
            0x00007f6f04369e0d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f6f04369e13: vcvttss2si %xmm0,%r11d
  1.03%     0x00007f6f04369e17: cmp     $0x80000000,%r11d
         ╭  0x00007f6f04369e1e: jne     0x7f6f04369e30
         │  0x00007f6f04369e20: sub     $0x8,%rsp
         │  0x00007f6f04369e24: vmovss  %xmm0,(%rsp)
         │  0x00007f6f04369e29: callq   0x7f6efc8b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f6f04369e2e: pop     %r11
  0.05%  ↘  0x00007f6f04369e30: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f6f04369e34: mov     0xc(%rsp),%r11d
  0.97%     0x00007f6f04369e39: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f6f0436a4fc
  0.10%     0x00007f6f04369e3d: mov     0x14(%rsp),%r8d
            0x00007f6f04369e42: cmp     %ecx,%r8d
            0x00007f6f04369e45: jnb     0x7f6f0436a28c
            0x00007f6f04369e4b: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.62%     0x00007f6f04369e4e: lea     0x10(%r11,%r8,4),%rbx
            0x00007f6f04369e53: cmpb    $0x0,0x30(%r15)
            0x00007f6f04369e58: jne     0x7f6f04369f7d
            0x00007f6f04369e5e: mov     %r9,%r11
  0.87%     0x00007f6f04369e61: mov     %r9,%r10
            0x00007f6f04369e64: mov     %r10d,(%rbx)
            0x00007f6f04369e67: mov     %rbx,%r10
            0x00007f6f04369e6a: xor     %r10,%r11
  0.87%     0x00007f6f04369e6d: shr     $0x14,%r11
            0x00007f6f04369e71: test    %r11,%r11
            0x00007f6f04369e74: je      0x7f6f0436981a
            0x00007f6f04369e7a: shr     $0x9,%r10
            0x00007f6f04369e7e: movabs  $0x7f6f198c9000,%rdi
            0x00007f6f04369e88: add     %r10,%rdi
            0x00007f6f04369e8b: cmpb    $0x20,(%rdi)
            0x00007f6f04369e8e: je      0x7f6f0436981a
            0x00007f6f04369e94: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 31.54%  <total for region 2>

....[Hottest Regions]...............................................................................
 31.69%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (262 bytes) 
 31.54%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (113 bytes) 
  8.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (231 bytes) 
  5.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (158 bytes) 
  2.72%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (260 bytes) 
  2.62%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (35 bytes) 
  2.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (56 bytes) 
  2.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (13 bytes) 
  1.85%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.87%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (87 bytes) 
  0.56%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 (137 bytes) 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.26%        libc-2.31.so  malloc (0 bytes) 
  0.21%   [kernel.kallsyms]  futex_wait_queue_me (11 bytes) 
  0.21%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 (7 bytes) 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free (21 bytes) 
  0.21%        libc-2.31.so  malloc (0 bytes) 
  0.15%   [kernel.kallsyms]  finish_task_switch (17 bytes) 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 (0 bytes) 
  7.59%  <...other 123 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 535 
  1.85%   [kernel.kallsyms]  native_write_msr 
  0.56%        libc-2.31.so  malloc 
  0.56%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 564 
  0.46%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.26%        libc-2.31.so  malloc_consolidate 
  0.21%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.21%        libc-2.31.so  _int_malloc 
  0.21%   [kernel.kallsyms]  futex_wait_queue_me 
  0.21%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.21%        libc-2.31.so  _int_free 
  0.15%        libc-2.31.so  __vsnprintf_internal 
  0.15%           libjvm.so  InstanceKlass::allocate_instance 
  0.15%   [kernel.kallsyms]  finish_task_switch 
  0.15%    libfcml.so.0.0.0  fcml_fn_mp_parse_mnemonics 
  0.15%    libfcml.so.0.0.0  fcml_fn_coll_list_free 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.10%           libjvm.so  G1CollectedHeap::allocate_new_tlab 
  5.33%  <...other 91 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 89.18%         c2, level 4
  4.72%   [kernel.kallsyms]
  2.92%           libjvm.so
  2.15%        libc-2.31.so
  0.67%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%          ld-2.31.so
  0.05%    Unknown, level 0
  0.05%           nvidia.ko
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       529.116          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
