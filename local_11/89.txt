# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 791.406 ns/op
# Warmup Iteration   2: 523.291 ns/op
# Warmup Iteration   3: 518.152 ns/op
# Warmup Iteration   4: 516.812 ns/op
# Warmup Iteration   5: 516.263 ns/op
Iteration   1: 515.282 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  515.282 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 118974 total address lines.
Perf output processed (skipped 11.133 seconds):
 Column 1: cycles (1937 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (262 bytes) 

            0x00007f9a2c36a1fa: mov     0x8(%rsp),%r8d
            0x00007f9a2c36a1ff: mov     0x10(%rsp),%rbx
         ╭  0x00007f9a2c36a204: jmp     0x7f9a2c36a213
         │  0x00007f9a2c36a206: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f9a2c36a20b: add     $0xfffffffffffffff8,%r9
         │  0x00007f9a2c36a20f: mov     %r9,0x70(%r15)
  0.57%  ↘  0x00007f9a2c36a213: movl    $0x0,0x14(%rbx)
            0x00007f9a2c36a21a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 24.06%     0x00007f9a2c36a220: mov     0x118(%r15),%r13
            0x00007f9a2c36a227: mov     %r13,%r10
            0x00007f9a2c36a22a: add     $0x18,%r10
  0.83%     0x00007f9a2c36a22e: cmp     0x128(%r15),%r10
            0x00007f9a2c36a235: jnb     0x7f9a2c36a8ea    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f9a2c36a23b: mov     %r10,0x118(%r15)
            0x00007f9a2c36a242: prefetchnta 0x100(%r10)
            0x00007f9a2c36a24a: mov     0x18(%rsp),%r10
  1.14%     0x00007f9a2c36a24f: mov     0xb8(%r10),%r10
            0x00007f9a2c36a256: mov     %r10,0x0(%r13)
            0x00007f9a2c36a25a: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f9a2c36a262: movl    $0x0,0xc(%r13)
  0.93%     0x00007f9a2c36a26a: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9a2c36a272: mov     %r14d,0x10(%r13)
            0x00007f9a2c36a276: mov     0x118(%r15),%rcx
            0x00007f9a2c36a27d: mov     %rcx,%r10
  0.83%     0x00007f9a2c36a280: add     $0x20,%r10
            0x00007f9a2c36a284: cmp     0x128(%r15),%r10
            0x00007f9a2c36a28b: jnb     0x7f9a2c36a955
  0.05%     0x00007f9a2c36a291: mov     %r10,0x118(%r15)
            0x00007f9a2c36a298: prefetchnta 0x100(%r10)
  0.72%     0x00007f9a2c36a2a0: mov     0xb8(%rsi),%r10
  0.05%     0x00007f9a2c36a2a7: mov     %r10,(%rcx)
            0x00007f9a2c36a2aa: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
            0x00007f9a2c36a2b1: movl    $0x0,0xc(%rcx)
  0.72%     0x00007f9a2c36a2b8: movq    $0x0,0x10(%rcx)
            0x00007f9a2c36a2c0: movq    $0x0,0x18(%rcx)
            0x00007f9a2c36a2c8: mov     0x118(%r15),%rax
            0x00007f9a2c36a2cf: mov     %rax,%r10
  1.19%     0x00007f9a2c36a2d2: add     $0x10,%r10
            0x00007f9a2c36a2d6: cmp     0x128(%r15),%r10
            0x00007f9a2c36a2dd: jnb     0x7f9a2c36a9ca    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007f9a2c36a2e3: mov     %r10,0x118(%r15)
            0x00007f9a2c36a2ea: prefetchnta 0x100(%r10)
  0.72%     0x00007f9a2c36a2f2: mov     0x28(%rsp),%r10
            0x00007f9a2c36a2f7: mov     0xb8(%r10),%r10
  0.05%     0x00007f9a2c36a2fe: mov     %r10,(%rax)
  0.05%     0x00007f9a2c36a301: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.88%     0x00007f9a2c36a308: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9a2c36a30f: mov     %rcx,%r9
            0x00007f9a2c36a312: mov     %rax,%r10
            0x00007f9a2c36a315: mov     %r10d,0xc(%rcx)
  0.67%     0x00007f9a2c36a319: mov     %rax,%r10
            0x00007f9a2c36a31c: xor     %r9,%r10
            0x00007f9a2c36a31f: shr     $0x14,%r10
            0x00007f9a2c36a323: test    %r10,%r10
            0x00007f9a2c36a326: je      0x7f9a2c36a3b3
            0x00007f9a2c36a32c: shr     $0x9,%r9
            0x00007f9a2c36a330: movabs  $0x7f9a24078000,%rdi
            0x00007f9a2c36a33a: add     %r9,%rdi
            0x00007f9a2c36a33d: cmpb    $0x20,(%rdi)
            0x00007f9a2c36a340: je      0x7f9a2c36a3b3
            0x00007f9a2c36a342: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 33.56%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9a2c36a66e: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f9a2c36a672: mov     %r10,0x70(%r15)
            0x00007f9a2c36a676: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.02%     0x00007f9a2c36a67c: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f9a2c36a680: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f9a2c36ad70
            0x00007f9a2c36a684: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.72%     0x00007f9a2c36a689: mov     (%rsp),%r10
  0.05%     0x00007f9a2c36a68d: vmulss  0x14(%r10),%xmm1,%xmm0
  0.05%     0x00007f9a2c36a693: vcvttss2si %xmm0,%r11d
  0.57%     0x00007f9a2c36a697: cmp     $0x80000000,%r11d
         ╭  0x00007f9a2c36a69e: jne     0x7f9a2c36a6b0
         │  0x00007f9a2c36a6a0: sub     $0x8,%rsp
         │  0x00007f9a2c36a6a4: vmovss  %xmm0,(%rsp)
         │  0x00007f9a2c36a6a9: callq   0x7f9a248b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f9a2c36a6ae: pop     %r11
  0.05%  ↘  0x00007f9a2c36a6b0: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f9a2c36a6b4: mov     0xc(%rsp),%r11d
  0.77%     0x00007f9a2c36a6b9: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f9a2c36ad7c
  0.10%     0x00007f9a2c36a6bd: mov     0x14(%rsp),%r8d
  0.05%     0x00007f9a2c36a6c2: cmp     %ecx,%r8d
            0x00007f9a2c36a6c5: jnb     0x7f9a2c36ab0c
            0x00007f9a2c36a6cb: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.67%     0x00007f9a2c36a6ce: lea     0x10(%r11,%r8,4),%rbx
  0.10%     0x00007f9a2c36a6d3: cmpb    $0x0,0x30(%r15)
            0x00007f9a2c36a6d8: jne     0x7f9a2c36a7fd
            0x00007f9a2c36a6de: mov     %r9,%r11
  1.03%     0x00007f9a2c36a6e1: mov     %r9,%r10
            0x00007f9a2c36a6e4: mov     %r10d,(%rbx)
            0x00007f9a2c36a6e7: mov     %rbx,%r10
            0x00007f9a2c36a6ea: xor     %r10,%r11
  0.98%     0x00007f9a2c36a6ed: shr     $0x14,%r11
            0x00007f9a2c36a6f1: test    %r11,%r11
            0x00007f9a2c36a6f4: je      0x7f9a2c36a09a
            0x00007f9a2c36a6fa: shr     $0x9,%r10
            0x00007f9a2c36a6fe: movabs  $0x7f9a24078000,%rdi
            0x00007f9a2c36a708: add     %r10,%rdi
            0x00007f9a2c36a70b: cmpb    $0x20,(%rdi)
            0x00007f9a2c36a70e: je      0x7f9a2c36a09a
            0x00007f9a2c36a714: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 31.18%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (262 bytes) 
 31.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (113 bytes) 
  8.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (231 bytes) 
  8.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (236 bytes) 
  2.12%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (35 bytes) 
  1.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (13 bytes) 
  1.45%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (116 bytes) 
  1.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (187 bytes) 
  0.62%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  0.57%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (54 bytes) 
  0.21%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 (46 bytes) 
  0.15%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  0.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (30 bytes) 
  0.15%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 571 (0 bytes) 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination (5 bytes) 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms (14 bytes) 
  0.10%   [kernel.kallsyms]  page_remove_rmap (21 bytes) 
  0.10%   [kernel.kallsyms]  mutex_lock (17 bytes) 
  8.31%  <...other 146 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 89.88%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 
  0.62%   [kernel.kallsyms]  native_write_msr 
  0.36%        libc-2.31.so  _int_malloc 
  0.36%        libc-2.31.so  _int_free 
  0.31%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 571 
  0.26%   [kernel.kallsyms]  free_pcppages_bulk 
  0.26%        libc-2.31.so  malloc_consolidate 
  0.21%        libc-2.31.so  malloc 
  0.21%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.21%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.21%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 544 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.15%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.10%   [kernel.kallsyms]  page_remove_rmap 
  0.10%   [kernel.kallsyms]  __mod_zone_page_state 
  0.10%   [kernel.kallsyms]  mutex_lock 
  0.10%           libjvm.so  QuickSort::inner_sort<true, unsigned int, int (*)(unsigned int, unsigned int)> 
  0.10%   [kernel.kallsyms]  psi_group_change 
  5.94%  <...other 105 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 90.35%         c2, level 4
  3.98%   [kernel.kallsyms]
  2.68%           libjvm.so
  1.81%        libc-2.31.so
  0.98%    libfcml.so.0.0.0
  0.10%         interpreter
  0.05%  libpthread-2.31.so
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       515.282          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
