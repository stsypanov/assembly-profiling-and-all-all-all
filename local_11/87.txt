# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 847.662 ns/op
# Warmup Iteration   2: 531.746 ns/op
# Warmup Iteration   3: 518.609 ns/op
# Warmup Iteration   4: 545.196 ns/op
# Warmup Iteration   5: 541.540 ns/op
Iteration   1: 511.283 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  511.283 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 123198 total address lines.
Perf output processed (skipped 11.238 seconds):
 Column 1: cycles (1964 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (113 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fb7d036aaee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fb7d036aaf2: mov     %r10,0x70(%r15)
            0x00007fb7d036aaf6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 28.62%     0x00007fb7d036aafc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.25%     0x00007fb7d036ab00: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007fb7d036b1f0
            0x00007fb7d036ab04: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.61%     0x00007fb7d036ab09: mov     (%rsp),%r10
            0x00007fb7d036ab0d: vmulss  0x14(%r10),%xmm1,%xmm0
  0.05%     0x00007fb7d036ab13: vcvttss2si %xmm0,%r11d
  0.56%     0x00007fb7d036ab17: cmp     $0x80000000,%r11d
         ╭  0x00007fb7d036ab1e: jne     0x7fb7d036ab30
         │  0x00007fb7d036ab20: sub     $0x8,%rsp
         │  0x00007fb7d036ab24: vmovss  %xmm0,(%rsp)
         │  0x00007fb7d036ab29: callq   0x7fb7c88b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007fb7d036ab2e: pop     %r11
  0.05%  ↘  0x00007fb7d036ab30: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007fb7d036ab34: mov     0xc(%rsp),%r11d
  0.76%     0x00007fb7d036ab39: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007fb7d036b1fc
  0.05%     0x00007fb7d036ab3d: mov     0x14(%rsp),%r8d
            0x00007fb7d036ab42: cmp     %ecx,%r8d
            0x00007fb7d036ab45: jnb     0x7fb7d036af8c
            0x00007fb7d036ab4b: mov     %r11,%r10         ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
  0.71%     0x00007fb7d036ab4e: lea     0x10(%r11,%r8,4),%rbx
  0.05%     0x00007fb7d036ab53: cmpb    $0x0,0x30(%r15)
            0x00007fb7d036ab58: jne     0x7fb7d036ac7d
            0x00007fb7d036ab5e: mov     %r9,%r11
  0.76%     0x00007fb7d036ab61: mov     %r9,%r10
            0x00007fb7d036ab64: mov     %r10d,(%rbx)
            0x00007fb7d036ab67: mov     %rbx,%r10
            0x00007fb7d036ab6a: xor     %r10,%r11
  0.71%     0x00007fb7d036ab6d: shr     $0x14,%r11
            0x00007fb7d036ab71: test    %r11,%r11
            0x00007fb7d036ab74: je      0x7fb7d036a51a
            0x00007fb7d036ab7a: shr     $0x9,%r10
            0x00007fb7d036ab7e: movabs  $0x7fb7e533e000,%rdi
            0x00007fb7d036ab88: add     %r10,%rdi
            0x00007fb7d036ab8b: cmpb    $0x20,(%rdi)
            0x00007fb7d036ab8e: je      0x7fb7d036a51a
            0x00007fb7d036ab94: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 33.20%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (262 bytes) 

            0x00007fb7d036a67a: mov     0x8(%rsp),%r8d
            0x00007fb7d036a67f: mov     0x10(%rsp),%rbx
         ╭  0x00007fb7d036a684: jmp     0x7fb7d036a693
         │  0x00007fb7d036a686: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007fb7d036a68b: add     $0xfffffffffffffff8,%r9
         │  0x00007fb7d036a68f: mov     %r9,0x70(%r15)
  0.41%  ↘  0x00007fb7d036a693: movl    $0x0,0x14(%rbx)
            0x00007fb7d036a69a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.56%     0x00007fb7d036a6a0: mov     0x118(%r15),%r13
  0.05%     0x00007fb7d036a6a7: mov     %r13,%r10
            0x00007fb7d036a6aa: add     $0x18,%r10
  0.71%     0x00007fb7d036a6ae: cmp     0x128(%r15),%r10
            0x00007fb7d036a6b5: jnb     0x7fb7d036ad6a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
  0.05%     0x00007fb7d036a6bb: mov     %r10,0x118(%r15)
            0x00007fb7d036a6c2: prefetchnta 0x100(%r10)
            0x00007fb7d036a6ca: mov     0x18(%rsp),%r10
  0.71%     0x00007fb7d036a6cf: mov     0xb8(%r10),%r10
            0x00007fb7d036a6d6: mov     %r10,0x0(%r13)
            0x00007fb7d036a6da: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007fb7d036a6e2: movl    $0x0,0xc(%r13)
  0.56%     0x00007fb7d036a6ea: movl    $0x0,0x14(%r13)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fb7d036a6f2: mov     %r14d,0x10(%r13)
            0x00007fb7d036a6f6: mov     0x118(%r15),%rcx
            0x00007fb7d036a6fd: mov     %rcx,%r10
  0.41%     0x00007fb7d036a700: add     $0x20,%r10
            0x00007fb7d036a704: cmp     0x128(%r15),%r10
            0x00007fb7d036a70b: jnb     0x7fb7d036add5
            0x00007fb7d036a711: mov     %r10,0x118(%r15)
            0x00007fb7d036a718: prefetchnta 0x100(%r10)
  0.61%     0x00007fb7d036a720: mov     0xb8(%rsi),%r10
  0.10%     0x00007fb7d036a727: mov     %r10,(%rcx)
            0x00007fb7d036a72a: movl    $0x6879d,0x8(%rcx)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.05%     0x00007fb7d036a731: movl    $0x0,0xc(%rcx)
  0.87%     0x00007fb7d036a738: movq    $0x0,0x10(%rcx)
            0x00007fb7d036a740: movq    $0x0,0x18(%rcx)
            0x00007fb7d036a748: mov     0x118(%r15),%rax
            0x00007fb7d036a74f: mov     %rax,%r10
  0.92%     0x00007fb7d036a752: add     $0x10,%r10
            0x00007fb7d036a756: cmp     0x128(%r15),%r10
            0x00007fb7d036a75d: jnb     0x7fb7d036ae4a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007fb7d036a763: mov     %r10,0x118(%r15)
            0x00007fb7d036a76a: prefetchnta 0x100(%r10)
  0.76%     0x00007fb7d036a772: mov     0x28(%rsp),%r10
            0x00007fb7d036a777: mov     0xb8(%r10),%r10
            0x00007fb7d036a77e: mov     %r10,(%rax)
            0x00007fb7d036a781: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.46%     0x00007fb7d036a788: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007fb7d036a78f: mov     %rcx,%r9
            0x00007fb7d036a792: mov     %rax,%r10
            0x00007fb7d036a795: mov     %r10d,0xc(%rcx)
  0.56%     0x00007fb7d036a799: mov     %rax,%r10
            0x00007fb7d036a79c: xor     %r9,%r10
            0x00007fb7d036a79f: shr     $0x14,%r10
            0x00007fb7d036a7a3: test    %r10,%r10
            0x00007fb7d036a7a6: je      0x7fb7d036a833
            0x00007fb7d036a7ac: shr     $0x9,%r9
            0x00007fb7d036a7b0: movabs  $0x7fb7e533e000,%rdi
            0x00007fb7d036a7ba: add     %r9,%rdi
            0x00007fb7d036a7bd: cmpb    $0x20,(%rdi)
            0x00007fb7d036a7c0: je      0x7fb7d036a833
            0x00007fb7d036a7c2: mov     0x80(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
....................................................................................................
 29.79%  <total for region 2>

....[Hottest Regions]...............................................................................
 33.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (113 bytes) 
 29.79%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (262 bytes) 
  9.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (239 bytes) 
  8.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (231 bytes) 
  2.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (35 bytes) 
  1.63%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (13 bytes) 
  1.37%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (43 bytes) 
  1.27%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 (141 bytes) 
  1.17%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.07%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (124 bytes) 
  0.56%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (41 bytes) 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk (34 bytes) 
  0.25%        libc-2.31.so  malloc (0 bytes) 
  0.20%        libc-2.31.so  malloc_consolidate (0 bytes) 
  0.20%        libc-2.31.so  _int_free (0 bytes) 
  0.15%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.15%   [kernel.kallsyms]  __mod_memcg_lruvec_state (23 bytes) 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 (20 bytes) 
  0.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 (6 bytes) 
  7.99%  <...other 126 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 540 
  1.27%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 573 
  1.17%   [kernel.kallsyms]  native_write_msr 
  0.51%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  _int_malloc 
  0.41%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.41%        libc-2.31.so  _int_free 
  0.41%        libc-2.31.so  malloc_consolidate 
  0.36%   [kernel.kallsyms]  free_pcppages_bulk 
  0.31%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 545 
  0.20%           libjvm.so  OptoRuntime::new_instance_C 
  0.20%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  0.15%        libc-2.31.so  __GI___libc_write 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  SpinPause 
  0.15%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.15%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.10%           libjvm.so  RSHashTableIter::has_next 
  5.04%  <...other 87 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 89.61%         c2, level 4
  4.23%   [kernel.kallsyms]
  2.75%        libc-2.31.so
  2.24%           libjvm.so
  0.87%    libfcml.so.0.0.0
  0.05%      perf-26272.map
  0.05%        runtime stub
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       511.283          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
