# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 817.218 ns/op
# Warmup Iteration   2: 527.246 ns/op
# Warmup Iteration   3: 517.401 ns/op
# Warmup Iteration   4: 538.263 ns/op
# Warmup Iteration   5: 522.818 ns/op
Iteration   1: 515.708 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  515.708 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119481 total address lines.
Perf output processed (skipped 11.156 seconds):
 Column 1: cycles (1968 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007effec36a1ee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007effec36a1f2: mov     %r10,0x70(%r15)
            0x00007effec36a1f6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.58%     0x00007effec36a1fc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.05%     0x00007effec36a200: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007effec36a8f0
            0x00007effec36a204: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.86%     0x00007effec36a209: mov     (%rsp),%r10
            0x00007effec36a20d: vmulss  0x14(%r10),%xmm1,%xmm0
  0.05%     0x00007effec36a213: vcvttss2si %xmm0,%r11d
  1.12%     0x00007effec36a217: cmp     $0x80000000,%r11d
         ╭  0x00007effec36a21e: jne     0x7effec36a230
         │  0x00007effec36a220: sub     $0x8,%rsp
         │  0x00007effec36a224: vmovss  %xmm0,(%rsp)
         │  0x00007effec36a229: callq   0x7effe48b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007effec36a22e: pop     %r11
         ↘  0x00007effec36a230: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007effec36a234: mov     0xc(%rsp),%r11d
  0.97%     0x00007effec36a239: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007effec36a8fc
  0.05%     0x00007effec36a23d: mov     0x14(%rsp),%r8d
....................................................................................................
 28.66%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 

            0x00007effec369d7a: mov     0x8(%rsp),%r8d
            0x00007effec369d7f: mov     0x10(%rsp),%rbx
         ╭  0x00007effec369d84: jmp     0x7effec369d93
         │  0x00007effec369d86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007effec369d8b: add     $0xfffffffffffffff8,%r9
         │  0x00007effec369d8f: mov     %r9,0x70(%r15)
  1.02%  ↘  0x00007effec369d93: movl    $0x0,0x14(%rbx)
  0.05%     0x00007effec369d9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 22.31%     0x00007effec369da0: mov     0x118(%r15),%r13
            0x00007effec369da7: mov     %r13,%r10
            0x00007effec369daa: add     $0x18,%r10
  0.46%     0x00007effec369dae: cmp     0x128(%r15),%r10
            0x00007effec369db5: jnb     0x7effec36a46a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007effec369dbb: mov     %r10,0x118(%r15)
            0x00007effec369dc2: prefetchnta 0x100(%r10)
            0x00007effec369dca: mov     0x18(%rsp),%r10
  0.36%     0x00007effec369dcf: mov     0xb8(%r10),%r10
            0x00007effec369dd6: mov     %r10,0x0(%r13)
            0x00007effec369dda: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007effec369de2: movl    $0x0,0xc(%r13)
....................................................................................................
 23.83%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (231 bytes) 

                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                              ;   {poll}
                0x00007effec36a09c: cmp     %ebp,%r10d
                0x00007effec36a09f: jl      0x7effec36a080    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@6 (line 435)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@27 (line 486)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                0x00007effec36a0a1: mov     $0x1,%edx
                0x00007effec36a0a6: shl     %cl,%edx
         ╭      0x00007effec36a0a8: jmp     0x7effec36a0af
  0.81%  │      0x00007effec36a0aa: mov     $0x1,%edx         ;*ishl {reexecute=0 rethrow=0 return_oop=0}
         │                                                    ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@30 (line 486)
         │                                                    ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ↘      0x00007effec36a0af: cmp     $0x40000,%edx
                0x00007effec36a0b5: jnbe    0x7effec36a684
                0x00007effec36a0bb: movsxd  %edx,%rcx         ;*anewarray {reexecute=0 rethrow=0 return_oop=0}
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                0x00007effec36a0be: mov     %edx,0x10(%rbx)   ;*putfield initialSize {reexecute=0 rethrow=0 return_oop=0}
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@31 (line 486)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  1.12%         0x00007effec36a0c1: cmp     $0x40000,%edx
                0x00007effec36a0c7: jnbe    0x7effec36a5c8
                0x00007effec36a0cd: mov     %rbx,0x40(%rsp)
                0x00007effec36a0d2: mov     %r8d,0x14(%rsp)
                0x00007effec36a0d7: mov     %rsi,0x38(%rsp)
  0.66%         0x00007effec36a0dc: mov     %r11,0x30(%rsp)
  0.05%         0x00007effec36a0e1: mov     %r14d,0x10(%rsp)
                0x00007effec36a0e6: mov     %ebp,0x8(%rsp)    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                0x00007effec36a0ea: mov     0x118(%r15),%r8
  0.56%         0x00007effec36a0f1: shl     $0x2,%rcx
                0x00007effec36a0f5: add     $0x17,%rcx        ;*anewarray {reexecute=0 rethrow=0 return_oop=0}
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::createReferenceArray@1 (line 656)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@40 (line 487)
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                0x00007effec36a0f9: mov     %rcx,%r10
                0x00007effec36a0fc: and     $0xfffffffffffffff8,%r10
  0.71%         0x00007effec36a100: mov     %r8,%r11
  0.05%         0x00007effec36a103: add     %r10,%r11
                0x00007effec36a106: cmp     0x128(%r15),%r11
                0x00007effec36a10d: jnb     0x7effec36a5e5
                0x00007effec36a113: mov     %r11,0x118(%r15)
  0.86%         0x00007effec36a11a: prefetchnta 0x100(%r11)
  0.05%         0x00007effec36a122: movq    $0x1,(%r8)
                0x00007effec36a129: prefetchnta 0x140(%r11)
                0x00007effec36a131: prefetchnta 0x180(%r11)
  1.17%         0x00007effec36a139: movl    $0x8012718,0x8(%r8)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Reference&apos;[])}
                0x00007effec36a141: mov     %edx,0xc(%r8)
                0x00007effec36a145: shr     $0x3,%rcx
                0x00007effec36a149: add     $0xfffffffffffffffe,%rcx
  0.66%         0x00007effec36a14d: mov     %r8,%rdi
                0x00007effec36a150: add     $0x10,%rdi
                0x00007effec36a154: xor     %rax,%rax
                0x00007effec36a157: cmp     $0x8,%rcx
          ╭     0x00007effec36a15b: jnle    0x7effec36a16d
  0.97%   │     0x00007effec36a15d: decq    %rcx
          │╭    0x00007effec36a160: js      0x7effec36a174
          ││↗   0x00007effec36a162: mov     %rax,(%rdi,%rcx,8)
          │││   0x00007effec36a166: decq    %rcx
          ││╰   0x00007effec36a169: jnl     0x7effec36a162
  0.61%   ││ ╭  0x00007effec36a16b: jmp     0x7effec36a174
          ↘│ │  0x00007effec36a16d: shl     $0x3,%rcx
           │ │  0x00007effec36a171: rep stosb (%rdi)
           ↘ ↘  0x00007effec36a174: cmpb    $0x0,0x30(%r15)
                0x00007effec36a179: jne     0x7effec36a345
                0x00007effec36a17f: mov     0x40(%rsp),%r9
  0.66%         0x00007effec36a184: mov     %r9,%r11
                0x00007effec36a187: mov     %r8,%r10
                0x00007effec36a18a: mov     %r10d,0x20(%r9)
                0x00007effec36a18e: mov     %r8,%r10
  1.12%         0x00007effec36a191: xor     %r11,%r10
                0x00007effec36a194: shr     $0x14,%r10
                0x00007effec36a198: test    %r10,%r10
                0x00007effec36a19b: je      0x7effec36a1f6
                0x00007effec36a19d: shr     $0x9,%r11
                0x00007effec36a1a1: movabs  $0x7f00010df000,%rdi
                0x00007effec36a1ab: add     %r11,%rdi
                0x00007effec36a1ae: cmpb    $0x20,(%rdi)
                0x00007effec36a1b1: je      0x7effec36a1f6
                0x00007effec36a1b3: mov     0x70(%r15),%r10   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                              ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 10.06%  <total for region 3>

....[Hottest Regions]...............................................................................
 28.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 
 23.83%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (27 bytes) 
 10.06%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (231 bytes) 
  8.59%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (239 bytes) 
  6.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (202 bytes) 
  3.66%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (52 bytes) 
  2.03%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (35 bytes) 
  1.52%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (71 bytes) 
  1.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (187 bytes) 
  1.27%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (13 bytes) 
  0.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (52 bytes) 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret (1 bytes) 
  0.20%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (23 bytes) 
  0.20%        libc-2.31.so  _int_free (5 bytes) 
  0.15%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.15%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 (0 bytes) 
  0.15%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 (0 bytes) 
  9.30%  <...other 157 warm regions...>
....................................................................................................
 99.90%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 543 
  1.27%   [kernel.kallsyms]  native_write_msr 
  0.51%        libc-2.31.so  malloc 
  0.46%        libc-2.31.so  _int_free 
  0.41%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 576 
  0.36%        libc-2.31.so  _int_malloc 
  0.36%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.30%   [kernel.kallsyms]  free_pcppages_bulk 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%        libc-2.31.so  malloc_consolidate 
  0.15%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.15%   [kernel.kallsyms]  psi_group_change 
  0.15%        libc-2.31.so  unlink_chunk.isra.0 
  0.15%           libjvm.so  fileStream::write 
  0.10%   [kernel.kallsyms]  copy_user_enhanced_fast_string 
  0.10%   [kernel.kallsyms]  free_unref_page_commit 
  0.10%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 547 
  0.10%   [kernel.kallsyms]  mutex_lock 
  0.10%   [kernel.kallsyms]  mutex_unlock 
  6.30%  <...other 111 warm methods...>
....................................................................................................
 99.90%  <totals>

....[Distribution by Source]........................................................................
 88.72%         c2, level 4
  4.83%   [kernel.kallsyms]
  3.10%           libjvm.so
  2.34%        libc-2.31.so
  0.66%    libfcml.so.0.0.0
  0.05%        runtime stub
  0.05%         c1, level 1
  0.05%         c1, level 3
  0.05%  libpthread-2.31.so
  0.05%         interpreter
....................................................................................................
 99.90%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       515.708          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
