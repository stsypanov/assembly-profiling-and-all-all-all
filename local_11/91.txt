# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 991.494 ns/op
# Warmup Iteration   2: 523.958 ns/op
# Warmup Iteration   3: 508.481 ns/op
# Warmup Iteration   4: 510.830 ns/op
# Warmup Iteration   5: 510.626 ns/op
Iteration   1: 512.573 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  512.573 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 119793 total address lines.
Perf output processed (skipped 11.227 seconds):
 Column 1: cycles (1973 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 

                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
            0x00007f09e8369eee: add     $0xfffffffffffffff8,%r10
                                                          ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f09e8369ef2: mov     %r10,0x70(%r15)
            0x00007f09e8369ef6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
 26.20%     0x00007f09e8369efc: mov     0x20(%r9),%r11d   ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
  0.10%     0x00007f09e8369f00: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
                                                          ; implicit exception: dispatches to 0x00007f09e836a5f0
  0.05%     0x00007f09e8369f04: vcvtsi2ssl %r10d,%xmm1,%xmm1
  1.06%     0x00007f09e8369f09: mov     (%rsp),%r10
            0x00007f09e8369f0d: vmulss  0x14(%r10),%xmm1,%xmm0
            0x00007f09e8369f13: vcvttss2si %xmm0,%r11d
  0.81%     0x00007f09e8369f17: cmp     $0x80000000,%r11d
         ╭  0x00007f09e8369f1e: jne     0x7f09e8369f30
         │  0x00007f09e8369f20: sub     $0x8,%rsp
         │  0x00007f09e8369f24: vmovss  %xmm0,(%rsp)
         │  0x00007f09e8369f29: callq   0x7f09e08b6080    ;   {runtime_call StubRoutines (2)}
         │  0x00007f09e8369f2e: pop     %r11
         ↘  0x00007f09e8369f30: mov     %r11d,0x18(%r9)   ;*synchronization entry
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@-1 (line 171)
            0x00007f09e8369f34: mov     0xc(%rsp),%r11d
  0.81%     0x00007f09e8369f39: mov     0xc(%r11),%ecx    ; implicit exception: dispatches to 0x00007f09e836a5fc
            0x00007f09e8369f3d: mov     0x14(%rsp),%r8d
....................................................................................................
 28.23%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 

            0x00007f09e8369a7a: mov     0x8(%rsp),%r8d
            0x00007f09e8369a7f: mov     0x10(%rsp),%rbx
         ╭  0x00007f09e8369a84: jmp     0x7f09e8369a93
         │  0x00007f09e8369a86: mov     %rdi,0xfffffffffffffff8(%r10,%r9)
         │                                                ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
         │                                                ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
         │                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         │  0x00007f09e8369a8b: add     $0xfffffffffffffff8,%r9
         │  0x00007f09e8369a8f: mov     %r9,0x70(%r15)
  0.56%  ↘  0x00007f09e8369a93: movl    $0x0,0x14(%rbx)
  0.10%     0x00007f09e8369a9a: lock addl $0x0,0xffffffffffffffc0(%rsp)
 21.79%     0x00007f09e8369aa0: mov     0x118(%r15),%r13
  0.05%     0x00007f09e8369aa7: mov     %r13,%r10
            0x00007f09e8369aaa: add     $0x18,%r10
  0.61%     0x00007f09e8369aae: cmp     0x128(%r15),%r10
            0x00007f09e8369ab5: jnb     0x7f09e836a16a    ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
            0x00007f09e8369abb: mov     %r10,0x118(%r15)
            0x00007f09e8369ac2: prefetchnta 0x100(%r10)
            0x00007f09e8369aca: mov     0x18(%rsp),%r10
  0.96%     0x00007f09e8369acf: mov     0xb8(%r10),%r10
            0x00007f09e8369ad6: mov     %r10,0x0(%r13)
            0x00007f09e8369ada: movl    $0x8012694,0x8(%r13)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
            0x00007f09e8369ae2: movl    $0x0,0xc(%r13)
....................................................................................................
 23.11%  <total for region 2>

....[Hottest Regions]...............................................................................
 28.23%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 
 23.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (27 bytes) 
  9.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (234 bytes) 
  8.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (246 bytes) 
  6.18%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (212 bytes) 
  4.05%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (52 bytes) 
  2.48%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.13%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (35 bytes) 
  1.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (56 bytes) 
  1.22%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (13 bytes) 
  1.01%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (92 bytes) 
  0.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (84 bytes) 
  0.51%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (75 bytes) 
  0.41%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 (68 bytes) 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 (44 bytes) 
  0.25%   [kernel.kallsyms]  free_pcppages_bulk (0 bytes) 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.25%        libc-2.31.so  malloc_consolidate (58 bytes) 
  0.20%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 578 (79 bytes) 
  0.20%        libc-2.31.so  malloc (0 bytes) 
  8.06%  <...other 133 warm regions...>
....................................................................................................
100.00%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 88.24%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;, version 547 
  2.48%   [kernel.kallsyms]  native_write_msr 
  0.86%                      <unknown> 
  0.41%   [kernel.kallsyms]  free_pcppages_bulk 
  0.35%        libc-2.31.so  malloc 
  0.35%        libc-2.31.so  malloc_consolidate 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 551 
  0.30%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.25%        libc-2.31.so  _int_malloc 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 578 
  0.20%   [kernel.kallsyms]  release_pages 
  0.20%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  0.15%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.15%   [kernel.kallsyms]  free_pages_and_swap_cache 
  0.15%   [kernel.kallsyms]  x86_pmu_enable 
  0.10%   [kernel.kallsyms]  __mod_node_page_state 
  0.10%           libjvm.so  SpinPause 
  0.10%           libjvm.so  HeapRegionRemSetIterator::HeapRegionRemSetIterator 
  4.61%  <...other 83 warm methods...>
....................................................................................................
100.00%  <totals>

....[Distribution by Source]........................................................................
 88.80%         c2, level 4
  6.13%   [kernel.kallsyms]
  2.33%           libjvm.so
  1.72%        libc-2.31.so
  0.86%                    
  0.10%         interpreter
  0.05%      libz.so.1.2.11
....................................................................................................
100.00%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       512.573          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
