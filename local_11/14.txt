# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 959.265 ns/op
# Warmup Iteration   2: 552.281 ns/op
# Warmup Iteration   3: 553.063 ns/op
# Warmup Iteration   4: 554.053 ns/op
# Warmup Iteration   5: 550.520 ns/op
Iteration   1: 551.381 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  551.381 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:Â·asm":
PrintAssembly processed: 124748 total address lines.
Perf output processed (skipped 11.343 seconds):
 Column 1: cycles (1987 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (327 bytes) 

           0x00007fa7a4369d8c: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                         ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
           0x00007fa7a4369d91: add     $0xfffffffffffffff8,%r10
                                                         ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007fa7a4369d95: mov     %r10,0x70(%r15)
           0x00007fa7a4369d99: mov     0x10(%rsp),%r10
           0x00007fa7a4369d9e: movl    $0x0,0x14(%r10)
  0.05%    0x00007fa7a4369da6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 22.65%    0x00007fa7a4369dac: mov     0x8(%rsp),%r10
           0x00007fa7a4369db1: test    %r10,%r10
           0x00007fa7a4369db4: je      0x7fa7a436a3c8
           0x00007fa7a4369dba: mov     0x118(%r15),%rbx
  1.06%    0x00007fa7a4369dc1: mov     %rbx,%r10
           0x00007fa7a4369dc4: add     $0x18,%r10
           0x00007fa7a4369dc8: cmp     0x128(%r15),%r10
           0x00007fa7a4369dcf: jnb     0x7fa7a436a348    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007fa7a4369dd5: mov     %r10,0x118(%r15)
  0.65%    0x00007fa7a4369ddc: prefetchnta 0x100(%r10)
  0.05%    0x00007fa7a4369de4: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007fa7a4369dea: movabs  $0x800000000,%r10
           0x00007fa7a4369df4: lea     (%r10,%r11,8),%r10
  0.70%    0x00007fa7a4369df8: mov     0xb8(%r10),%r10
  0.05%    0x00007fa7a4369dff: mov     %r10,(%rbx)
           0x00007fa7a4369e02: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007fa7a4369e09: movl    $0x0,0xc(%rbx)
  0.70%    0x00007fa7a4369e10: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
           0x00007fa7a4369e17: mov     0x8(%rsp),%r10
           0x00007fa7a4369e1c: mov     %r10,%r11
           0x00007fa7a4369e1f: mov     %r11d,0x10(%rbx)
  0.45%    0x00007fa7a4369e23: mov     0x118(%r15),%rbp
           0x00007fa7a4369e2a: mov     %rbp,%r10
           0x00007fa7a4369e2d: add     $0x20,%r10
           0x00007fa7a4369e31: cmp     0x128(%r15),%r10
           0x00007fa7a4369e38: jnb     0x7fa7a436a360
  1.06%    0x00007fa7a4369e3e: mov     %r10,0x118(%r15)
           0x00007fa7a4369e45: prefetchnta 0x100(%r10)
           0x00007fa7a4369e4d: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007fa7a4369e53: movabs  $0x800000000,%r10
  0.50%    0x00007fa7a4369e5d: lea     (%r10,%r11,8),%r10
           0x00007fa7a4369e61: mov     0xb8(%r10),%r10
           0x00007fa7a4369e68: mov     %r10,0x0(%rbp)
           0x00007fa7a4369e6c: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.60%    0x00007fa7a4369e73: movl    $0x0,0xc(%rbp)
           0x00007fa7a4369e7a: movq    $0x0,0x10(%rbp)
           0x00007fa7a4369e82: movq    $0x0,0x18(%rbp)
           0x00007fa7a4369e8a: mov     0x118(%r15),%rax
  0.75%    0x00007fa7a4369e91: mov     %rax,%r10
  0.05%    0x00007fa7a4369e94: add     $0x10,%r10
           0x00007fa7a4369e98: cmp     0x128(%r15),%r10
           0x00007fa7a4369e9f: jnb     0x7fa7a436a389    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007fa7a4369ea5: mov     %r10,0x118(%r15)
  0.91%    0x00007fa7a4369eac: prefetchnta 0x100(%r10)
           0x00007fa7a4369eb4: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007fa7a4369eba: movabs  $0x800000000,%r10
           0x00007fa7a4369ec4: lea     (%r10,%r11,8),%r10
  0.81%    0x00007fa7a4369ec8: mov     0xb8(%r10),%r10
           0x00007fa7a4369ecf: mov     %r10,(%rax)
           0x00007fa7a4369ed2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007fa7a4369ed9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.70%    0x00007fa7a4369ee0: mov     %rbp,%r10
           0x00007fa7a4369ee3: mov     %rax,%r8
           0x00007fa7a4369ee6: mov     %r8d,0xc(%rbp)
           0x00007fa7a4369eea: mov     %rax,%r11
  0.96%    0x00007fa7a4369eed: xor     %r10,%r11
           0x00007fa7a4369ef0: shr     $0x14,%r11
           0x00007fa7a4369ef4: test    %r11,%r11
           0x00007fa7a4369ef7: je      0x7fa7a4369f4c
           0x00007fa7a4369ef9: shr     $0x9,%r10
           0x00007fa7a4369efd: movabs  $0x7fa7b7e92000,%rdi
           0x00007fa7a4369f07: add     %r10,%rdi
           0x00007fa7a4369f0a: cmpb    $0x20,(%rdi)
           0x00007fa7a4369f0d: je      0x7fa7a4369f4c
           0x00007fa7a4369f0f: mov     0x70(%r15),%r10
           0x00007fa7a4369f13: mov     0x80(%r15),%r11
....................................................................................................
 32.71%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (29 bytes) 

            0x00007fa7a436a1b8: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
            0x00007fa7a436a1bd: add     $0xfffffffffffffff8,%r10
                                                          ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
            0x00007fa7a436a1c1: mov     %r10,0x70(%r15)
            0x00007fa7a436a1c5: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                          ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 17.92%     0x00007fa7a436a1cb: mov     0x10(%rsp),%r10
  0.10%     0x00007fa7a436a1d0: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
            0x00007fa7a436a1d4: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                          ; implicit exception: dispatches to 0x00007fa7a436a458
  0.55%     0x00007fa7a436a1d8: vcvtsi2ssl %r10d,%xmm1,%xmm1
            0x00007fa7a436a1dd: mov     0x8(%rsp),%r10
            0x00007fa7a436a1e2: vmulss  0x14(%r10),%xmm1,%xmm0
  0.96%     0x00007fa7a436a1e8: vcvttss2si %xmm0,%r11d
            0x00007fa7a436a1ec: cmp     $0x80000000,%r11d
         â­  0x00007fa7a436a1f3: jne     0x7fa7a436a205
         â  0x00007fa7a436a1f5: sub     $0x8,%rsp
         â  0x00007fa7a436a1f9: vmovss  %xmm0,(%rsp)
         â  0x00007fa7a436a1fe: callq   0x7fa79c8b6080    ;   {runtime_call StubRoutines (2)}
         â  0x00007fa7a436a203: pop     %r11
         â  0x00007fa7a436a205: mov     0x10(%rsp),%r10
  0.55%     0x00007fa7a436a20a: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                          ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                          ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
....................................................................................................
 19.53%  <total for region 2>

....[Hottest Regions]...............................................................................
 32.71%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (327 bytes) 
 19.53%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (29 bytes) 
  9.61%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 575 (256 bytes) 
  7.75%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (210 bytes) 
  6.34%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (140 bytes) 
  3.82%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (86 bytes) 
  1.81%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  1.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (31 bytes) 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (18 bytes) 
  1.26%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (16 bytes) 
  1.21%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 575 (27 bytes) 
  0.81%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 (0 bytes) 
  0.45%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.45%        libc-2.31.so  unlink_chunk.isra.0 (51 bytes) 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 (69 bytes) 
  0.35%        libc-2.31.so  malloc_consolidate (79 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 575 (2 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 575 (14 bytes) 
  0.25%           libjvm.so  ObjAllocator::initialize (0 bytes) 
  0.25%        libc-2.31.so  malloc (0 bytes) 
  9.16%  <...other 148 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 75.49%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 535 
 11.98%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 575 
  1.81%   [kernel.kallsyms]  native_write_msr 
  0.50%        libc-2.31.so  malloc 
  0.50%        libc-2.31.so  unlink_chunk.isra.0 
  0.45%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.40%        libc-2.31.so  malloc_consolidate 
  0.30%        libc-2.31.so  _int_free 
  0.25%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%           libjvm.so  ObjAllocator::initialize 
  0.25%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 540 
  0.20%   [kernel.kallsyms]  free_pcppages_bulk 
  0.20%        libc-2.31.so  _int_malloc 
  0.20%    libfcml.so.0.0.0  fcml_fn_dt_dts_tree_element_free 
  0.20%           libjvm.so  fileStream::write 
  0.15%           libjvm.so  ThreadLocalAllocBuffer::fill 
  0.15%   [kernel.kallsyms]  free_pages_and_swap_cache 
  0.10%   [kernel.kallsyms]  page_remove_rmap 
  0.10%   [kernel.kallsyms]  __mod_zone_page_state 
  6.04%  <...other 102 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.72%         c2, level 4
  5.89%   [kernel.kallsyms]
  3.37%           libjvm.so
  2.06%        libc-2.31.so
  0.81%    libfcml.so.0.0.0
  0.10%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       551.381          ns/op
CRHMBenchmark.instantiate:Â·asm  avgt           NaN            ---
