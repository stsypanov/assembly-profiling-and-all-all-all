# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 974.286 ns/op
# Warmup Iteration   2: 556.283 ns/op
# Warmup Iteration   3: 555.444 ns/op
# Warmup Iteration   4: 556.043 ns/op
# Warmup Iteration   5: 556.616 ns/op
Iteration   1: 557.647 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  557.647 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 124132 total address lines.
Perf output processed (skipped 11.295 seconds):
 Column 1: cycles (1982 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (327 bytes) 

           0x00007fd9c036908c: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                         ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
           0x00007fd9c0369091: add     $0xfffffffffffffff8,%r10
                                                         ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007fd9c0369095: mov     %r10,0x70(%r15)
           0x00007fd9c0369099: mov     0x10(%rsp),%r10
           0x00007fd9c036909e: movl    $0x0,0x14(%r10)
  0.05%    0x00007fd9c03690a6: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 23.11%    0x00007fd9c03690ac: mov     0x8(%rsp),%r10
  0.05%    0x00007fd9c03690b1: test    %r10,%r10
           0x00007fd9c03690b4: je      0x7fd9c03696d0
           0x00007fd9c03690ba: mov     0x118(%r15),%rbx
  0.45%    0x00007fd9c03690c1: mov     %rbx,%r10
  0.05%    0x00007fd9c03690c4: add     $0x18,%r10
           0x00007fd9c03690c8: cmp     0x128(%r15),%r10
           0x00007fd9c03690cf: jnb     0x7fd9c0369650    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007fd9c03690d5: mov     %r10,0x118(%r15)
  0.86%    0x00007fd9c03690dc: prefetchnta 0x100(%r10)
           0x00007fd9c03690e4: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007fd9c03690ea: movabs  $0x800000000,%r10
           0x00007fd9c03690f4: lea     (%r10,%r11,8),%r10
  0.45%    0x00007fd9c03690f8: mov     0xb8(%r10),%r10
  0.05%    0x00007fd9c03690ff: mov     %r10,(%rbx)
           0x00007fd9c0369102: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007fd9c0369109: movl    $0x0,0xc(%rbx)
  0.91%    0x00007fd9c0369110: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
           0x00007fd9c0369117: mov     0x8(%rsp),%r10
           0x00007fd9c036911c: mov     %r10,%r11
           0x00007fd9c036911f: mov     %r11d,0x10(%rbx)
  0.55%    0x00007fd9c0369123: mov     0x118(%r15),%rbp
           0x00007fd9c036912a: mov     %rbp,%r10
           0x00007fd9c036912d: add     $0x20,%r10
           0x00007fd9c0369131: cmp     0x128(%r15),%r10
           0x00007fd9c0369138: jnb     0x7fd9c0369668
  0.86%    0x00007fd9c036913e: mov     %r10,0x118(%r15)
           0x00007fd9c0369145: prefetchnta 0x100(%r10)
  0.05%    0x00007fd9c036914d: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007fd9c0369153: movabs  $0x800000000,%r10
  0.61%    0x00007fd9c036915d: lea     (%r10,%r11,8),%r10
           0x00007fd9c0369161: mov     0xb8(%r10),%r10
           0x00007fd9c0369168: mov     %r10,0x0(%rbp)
           0x00007fd9c036916c: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.61%    0x00007fd9c0369173: movl    $0x0,0xc(%rbp)
           0x00007fd9c036917a: movq    $0x0,0x10(%rbp)
           0x00007fd9c0369182: movq    $0x0,0x18(%rbp)
           0x00007fd9c036918a: mov     0x118(%r15),%rax
  0.50%    0x00007fd9c0369191: mov     %rax,%r10
           0x00007fd9c0369194: add     $0x10,%r10
           0x00007fd9c0369198: cmp     0x128(%r15),%r10
           0x00007fd9c036919f: jnb     0x7fd9c0369691    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007fd9c03691a5: mov     %r10,0x118(%r15)
  0.96%    0x00007fd9c03691ac: prefetchnta 0x100(%r10)
           0x00007fd9c03691b4: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007fd9c03691ba: movabs  $0x800000000,%r10
           0x00007fd9c03691c4: lea     (%r10,%r11,8),%r10
  0.96%    0x00007fd9c03691c8: mov     0xb8(%r10),%r10
           0x00007fd9c03691cf: mov     %r10,(%rax)
           0x00007fd9c03691d2: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
  0.05%    0x00007fd9c03691d9: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.86%    0x00007fd9c03691e0: mov     %rbp,%r10
           0x00007fd9c03691e3: mov     %rax,%r8
           0x00007fd9c03691e6: mov     %r8d,0xc(%rbp)
           0x00007fd9c03691ea: mov     %rax,%r11
  0.76%    0x00007fd9c03691ed: xor     %r10,%r11
           0x00007fd9c03691f0: shr     $0x14,%r11
           0x00007fd9c03691f4: test    %r11,%r11
           0x00007fd9c03691f7: je      0x7fd9c036924c
           0x00007fd9c03691f9: shr     $0x9,%r10
           0x00007fd9c03691fd: movabs  $0x7fd9d5cbc000,%rdi
           0x00007fd9c0369207: add     %r10,%rdi
           0x00007fd9c036920a: cmpb    $0x20,(%rdi)
           0x00007fd9c036920d: je      0x7fd9c036924c
           0x00007fd9c036920f: mov     0x70(%r15),%r10
           0x00007fd9c0369213: mov     0x80(%r15),%r11
....................................................................................................
 32.74%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (35 bytes) 

             0x00007fd9c0369474: movabs  $0x7fd9d7e53290,%r10
             0x00007fd9c036947e: callq   %r10
         ╭   0x00007fd9c0369481: jmp     0x7fd9c0369490
         │   0x00007fd9c0369483: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │   0x00007fd9c0369488: add     $0xfffffffffffffff8,%r10
         │                                                 ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │   0x00007fd9c036948c: mov     %r10,0x70(%r15)
  0.05%  ↘   0x00007fd9c0369490: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 17.10%      0x00007fd9c0369496: mov     0x10(%rsp),%r10
  0.05%      0x00007fd9c036949b: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
             0x00007fd9c036949f: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; implicit exception: dispatches to 0x00007fd9c0369760
  0.66%      0x00007fd9c03694a3: vcvtsi2ssl %r10d,%xmm1,%xmm1
             0x00007fd9c03694a8: mov     0x8(%rsp),%r10
             0x00007fd9c03694ad: vmulss  0x14(%r10),%xmm1,%xmm0
  0.55%      0x00007fd9c03694b3: vcvttss2si %xmm0,%r11d
             0x00007fd9c03694b7: cmp     $0x80000000,%r11d
          ╭  0x00007fd9c03694be: jne     0x7fd9c03694d0
          │  0x00007fd9c03694c0: sub     $0x8,%rsp
          │  0x00007fd9c03694c4: vmovss  %xmm0,(%rsp)
          │  0x00007fd9c03694c9: callq   0x7fd9b88b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007fd9c03694ce: pop     %r11
          ↘  0x00007fd9c03694d0: mov     0x10(%rsp),%r10
  0.45%      0x00007fd9c03694d5: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
....................................................................................................
 18.42%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 566 (256 bytes) 

             0x00007fd9c03710fc: movabs  $0x7fd9d7e53290,%r10
             0x00007fd9c0371106: callq   %r10
             0x00007fd9c0371109: mov     %ebx,%r10d
             0x00007fd9c037110c: nopl    0x0(%rax)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007fd9c0371110: mov     0x108(%r15),%r11
  0.76%  ││  0x00007fd9c0371117: mov     0x18(%rsp),%r9
         ││  0x00007fd9c037111c: mov     0x1c(%r9),%ecx    ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fd9c0371120: incl    %r10d             ; ImmutableOopMap{r9=Oop rcx=NarrowOop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fd9c0371123: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
  0.55%  ││  0x00007fd9c0371126: mov     0xc(%rcx),%r8d    ; implicit exception: dispatches to 0x00007fd9c03716a0
         ││  0x00007fd9c037112a: cmp     %r8d,%r10d
         ││  0x00007fd9c037112d: jnl     0x7fd9c0370ded    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fd9c0371133: mov     0x70(%rsp),%r8
         ││  0x00007fd9c0371138: mov     0x20(%rsp),%rbp
  0.66%  ││  0x00007fd9c037113d: mov     0x10(%rsp),%rbx
         ││  0x00007fd9c0371142: mov     0x28(%rsp),%r13d
         ││  0x00007fd9c0371147: mov     0x118(%r15),%rax
         ││  0x00007fd9c037114e: mov     %rax,%r11
  0.55%  ││  0x00007fd9c0371151: add     $0x28,%r11
         ││  0x00007fd9c0371155: cmp     0x128(%r15),%r11
         ││  0x00007fd9c037115c: jnb     0x7fd9c03712b5    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007fd9c0371162: mov     %r11,0x118(%r15)
         ││  0x00007fd9c0371169: prefetchnta 0x100(%r11)
  0.55%  ││  0x00007fd9c0371171: mov     (%rsp),%r11
  0.10%  ││  0x00007fd9c0371175: mov     0xb8(%r11),%rdi
         ││  0x00007fd9c037117c: mov     %rdi,(%rax)
  0.05%  ││  0x00007fd9c037117f: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.76%  ││  0x00007fd9c0371186: movl    $0x0,0xc(%rax)
         ││  0x00007fd9c037118d: movq    $0x0,0x10(%rax)
         ││  0x00007fd9c0371195: movq    $0x0,0x18(%rax)
  0.10%  ││  0x00007fd9c037119d: movq    $0x0,0x20(%rax)
  0.81%  ││  0x00007fd9c03711a5: mov     %r8,0x70(%rsp)
         ││  0x00007fd9c03711aa: mov     %rbp,0x20(%rsp)
  0.05%  ││  0x00007fd9c03711af: mov     %rbx,0x10(%rsp)
  0.05%  ││  0x00007fd9c03711b4: mov     %r9,0x18(%rsp)
  0.50%  ││  0x00007fd9c03711b9: mov     %r13d,0x28(%rsp)
         ││  0x00007fd9c03711be: mov     %ecx,0x2c(%rsp)
  0.05%  ││  0x00007fd9c03711c2: mov     %r10d,0x30(%rsp)
  0.05%  ││  0x00007fd9c03711c7: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.55%  ││  0x00007fd9c03711cc: mov     %rax,%rsi
         ││  0x00007fd9c03711cf: mov     0x18(%rsp),%rdx
  0.45%  ││  0x00007fd9c03711d4: mov     0x28(%rsp),%ecx
         ││  0x00007fd9c03711d8: nop
  0.86%  ││  0x00007fd9c03711db: callq   0x7fd9b889d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007fd9c03711e0: mov     0x2c(%rsp),%r11d
  1.16%  ││  0x00007fd9c03711e5: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007fd9c0371694
         ││  0x00007fd9c03711e9: mov     0x30(%rsp),%r10d
         ││  0x00007fd9c03711ee: cmp     %r8d,%r10d
         ││  0x00007fd9c03711f1: jnb     0x7fd9c0371393
         ││  0x00007fd9c03711f7: mov     %r11,%r8          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.71%  ││  0x00007fd9c03711fa: lea     0x10(%r11,%r10,4),%rbx
         ││  0x00007fd9c03711ff: cmpb    $0x0,0x30(%r15)
         ││  0x00007fd9c0371204: jne     0x7fd9c0371283
         ││  0x00007fd9c0371206: mov     0x38(%rsp),%r11
  0.45%  ││  0x00007fd9c037120b: mov     %r11,%r9
         ││  0x00007fd9c037120e: mov     %r11,%r8
         ││  0x00007fd9c0371211: mov     %r8d,(%rbx)
         ││  0x00007fd9c0371214: mov     %rbx,%r11
  0.50%  ││  0x00007fd9c0371217: xor     %r11,%r9
         ││  0x00007fd9c037121a: shr     $0x14,%r9
         ││  0x00007fd9c037121e: test    %r9,%r9
         ╰│  0x00007fd9c0371221: je      0x7fd9c0371110
          │  0x00007fd9c0371227: shr     $0x9,%r11
          │  0x00007fd9c037122b: movabs  $0x7fd9d5cbc000,%rdi
          │  0x00007fd9c0371235: add     %r11,%rdi
          │  0x00007fd9c0371238: cmpb    $0x20,(%rdi)
          ╰  0x00007fd9c037123b: je      0x7fd9c0371110
             0x00007fd9c0371241: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
....................................................................................................
 10.29%  <total for region 3>

....[Hottest Regions]...............................................................................
 32.74%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (327 bytes) 
 18.42%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (35 bytes) 
 10.29%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 566 (256 bytes) 
  4.79%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (140 bytes) 
  4.44%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (63 bytes) 
  4.39%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (111 bytes) 
  3.58%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (93 bytes) 
  2.47%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.47%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (31 bytes) 
  1.92%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 566 (18 bytes) 
  1.16%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (15 bytes) 
  1.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 (16 bytes) 
  0.71%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 566 (196 bytes) 
  0.71%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 566 (51 bytes) 
  0.55%   [kernel.kallsyms]  syscall_exit_to_user_mode (0 bytes) 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 (11 bytes) 
  0.35%        libc-2.31.so  malloc (0 bytes) 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 539 (68 bytes) 
  0.30%        libc-2.31.so  malloc (4 bytes) 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret (0 bytes) 
  8.63%  <...other 137 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 73.11%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 529 
 13.82%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 566 
  2.47%   [kernel.kallsyms]  native_write_msr 
  0.71%        libc-2.31.so  malloc 
  0.55%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.40%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.35%   [kernel.kallsyms]  free_pcppages_bulk 
  0.30%        libc-2.31.so  _int_malloc 
  0.30%         c2, level 4  org.openjdk.jmh.infra.Blackhole::consumeFull, version 539 
  0.30%        libc-2.31.so  _int_free 
  0.25%        libc-2.31.so  malloc_consolidate 
  0.20%   [kernel.kallsyms]  syscall_return_via_sysret 
  0.20%        libc-2.31.so  unlink_chunk.isra.0 
  0.20%        libc-2.31.so  __memset_avx2_unaligned_erms 
  0.20%   [kernel.kallsyms]  pipe_write 
  0.15%           libjvm.so  RSHashTableIter::has_next 
  0.15%           libjvm.so  SpinPause 
  0.15%   [kernel.kallsyms]  __mod_memcg_lruvec_state 
  0.15%   [kernel.kallsyms]  release_pages 
  0.15%   [kernel.kallsyms]  xas_load 
  5.80%  <...other 97 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 87.24%         c2, level 4
  7.01%   [kernel.kallsyms]
  2.67%           libjvm.so
  2.42%        libc-2.31.so
  0.40%    libfcml.so.0.0.0
  0.05%          ld-2.31.so
  0.05%  libpthread-2.31.so
  0.05%         interpreter
  0.05%           nvidia.ko
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       557.647          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
