# JMH version: 1.33
# VM version: JDK 11.0.11, OpenJDK 64-Bit Server VM, 11.0.11+9-Ubuntu-0ubuntu2.20.04
# VM invoker: /usr/lib/jvm/java-11-openjdk-amd64/bin/java
# VM options: -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 1 s each
# Measurement: 1 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.tsypanov.benchmark.CRHMBenchmark.instantiate

# Run progress: 0.00% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfAsmProfiler 
# Profilers consume stdout and stderr from target VM, use -v EXTRA to copy to console
# Warmup Iteration   1: 1016.864 ns/op
# Warmup Iteration   2: 558.646 ns/op
# Warmup Iteration   3: 553.054 ns/op
# Warmup Iteration   4: 553.209 ns/op
# Warmup Iteration   5: 559.212 ns/op
Iteration   1: 551.379 ns/op
# Processing profiler results: LinuxPerfAsmProfiler 


Result "com.tsypanov.benchmark.CRHMBenchmark.instantiate":
  551.379 ns/op

Secondary result "com.tsypanov.benchmark.CRHMBenchmark.instantiate:·asm":
PrintAssembly processed: 121025 total address lines.
Perf output processed (skipped 10.849 seconds):
 Column 1: cycles (1990 events)

Hottest code regions (>10.00% "cycles" events):

....[Hottest Region 1]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (325 bytes) 

           0x00007f423836a209: mov     %rdi,0xfffffffffffffff8(%r11,%r10)
                                                         ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
           0x00007f423836a20e: add     $0xfffffffffffffff8,%r10
                                                         ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007f423836a212: mov     %r10,0x70(%r15)
           0x00007f423836a216: mov     0x10(%rsp),%r10
           0x00007f423836a21b: movl    $0x0,0x14(%r10)
  0.05%    0x00007f423836a223: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                         ;*putfield count {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@11 (line 476)
 22.21%    0x00007f423836a229: mov     (%rsp),%r10
  0.05%    0x00007f423836a22d: test    %r10,%r10
           0x00007f423836a230: je      0x7f423836a840
           0x00007f423836a236: mov     0x118(%r15),%rbx
  0.65%    0x00007f423836a23d: mov     %rbx,%r10
  0.05%    0x00007f423836a240: add     $0x18,%r10
           0x00007f423836a244: cmp     0x128(%r15),%r10
           0x00007f423836a24b: jnb     0x7f423836a7c0    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007f423836a251: mov     %r10,0x118(%r15)
  0.55%    0x00007f423836a258: prefetchnta 0x100(%r10)
           0x00007f423836a260: mov     $0x8012694,%r11d  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007f423836a266: movabs  $0x800000000,%r10
           0x00007f423836a270: lea     (%r10,%r11,8),%r10
  0.75%    0x00007f423836a274: mov     0xb8(%r10),%r10
  0.05%    0x00007f423836a27b: mov     %r10,(%rbx)
           0x00007f423836a27e: movl    $0x8012694,0x8(%rbx)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$ReferenceManager&apos;)}
           0x00007f423836a285: movl    $0x0,0xc(%rbx)
  1.01%    0x00007f423836a28c: movl    $0x0,0x14(%rbx)   ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@0 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
           0x00007f423836a293: mov     (%rsp),%r10
  0.05%    0x00007f423836a297: mov     %r10,%r11
           0x00007f423836a29a: mov     %r11d,0x10(%rbx)
  0.75%    0x00007f423836a29e: mov     0x118(%r15),%rbp
  0.05%    0x00007f423836a2a5: mov     %rbp,%r10
           0x00007f423836a2a8: add     $0x20,%r10
           0x00007f423836a2ac: cmp     0x128(%r15),%r10
           0x00007f423836a2b3: jnb     0x7f423836a7d8
  0.85%    0x00007f423836a2b9: mov     %r10,0x118(%r15)
           0x00007f423836a2c0: prefetchnta 0x100(%r10)
  0.05%    0x00007f423836a2c8: mov     $0x6879d,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
           0x00007f423836a2ce: movabs  $0x800000000,%r10
  1.16%    0x00007f423836a2d8: lea     (%r10,%r11,8),%r10
           0x00007f423836a2dc: mov     0xb8(%r10),%r10
  0.05%    0x00007f423836a2e3: mov     %r10,0x0(%rbp)
           0x00007f423836a2e7: movl    $0x6879d,0x8(%rbp)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue&apos;)}
  0.85%    0x00007f423836a2ee: movl    $0x0,0xc(%rbp)
           0x00007f423836a2f5: movq    $0x0,0x10(%rbp)
           0x00007f423836a2fd: movq    $0x0,0x18(%rbp)
           0x00007f423836a305: mov     0x118(%r15),%rax
  0.45%    0x00007f423836a30c: mov     %rax,%r10
           0x00007f423836a30f: add     $0x10,%r10
           0x00007f423836a313: cmp     0x128(%r15),%r10
           0x00007f423836a31a: jnb     0x7f423836a801    ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
           0x00007f423836a320: mov     %r10,0x118(%r15)
  0.95%    0x00007f423836a327: prefetchnta 0x100(%r10)
  0.05%    0x00007f423836a32f: mov     $0x686f4,%r11d    ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007f423836a335: movabs  $0x800000000,%r10
           0x00007f423836a33f: lea     (%r10,%r11,8),%r10
  0.40%    0x00007f423836a343: mov     0xb8(%r10),%r10
  0.05%    0x00007f423836a34a: mov     %r10,(%rax)
           0x00007f423836a34d: movl    $0x686f4,0x8(%rax)  ;   {metadata(&apos;java/lang/ref/ReferenceQueue$Lock&apos;)}
           0x00007f423836a354: movl    $0x0,0xc(%rax)    ;*new {reexecute=0 rethrow=0 return_oop=0}
                                                         ; - java.lang.ref.ReferenceQueue::&lt;init&gt;@5 (line 56)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager::&lt;init&gt;@14 (line 984)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap::createReferenceManager@5 (line 207)
                                                         ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@16 (line 485)
  0.95%    0x00007f423836a35b: mov     %rbp,%r11
           0x00007f423836a35e: mov     %rax,%r10
  0.05%    0x00007f423836a361: mov     %r10d,0xc(%rbp)
  0.05%    0x00007f423836a365: mov     %rax,%r10
  0.45%    0x00007f423836a368: xor     %r11,%r10
           0x00007f423836a36b: shr     $0x14,%r10
           0x00007f423836a36f: test    %r10,%r10
           0x00007f423836a372: je      0x7f423836a3c7
           0x00007f423836a374: shr     $0x9,%r11
           0x00007f423836a378: movabs  $0x7f424d88e000,%rdi
           0x00007f423836a382: add     %r11,%rdi
           0x00007f423836a385: cmpb    $0x20,(%rdi)
           0x00007f423836a388: je      0x7f423836a3c7
           0x00007f423836a38a: mov     0x70(%r15),%r10
           0x00007f423836a38e: mov     0x80(%r15),%r11
....................................................................................................
 32.61%  <total for region 1>

....[Hottest Region 2]..............................................................................
c2, level 4, org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (34 bytes) 

             0x00007f423836a61f: movabs  $0x7f424fa25290,%r10
             0x00007f423836a629: callq   %r10
         ╭   0x00007f423836a62c: jmp     0x7f423836a63b
         │   0x00007f423836a62e: mov     %rbp,0xfffffffffffffff8(%r11,%r10)
         │                                                 ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
         │   0x00007f423836a633: add     $0xfffffffffffffff8,%r10
         │                                                 ;*putfield this$0 {reexecute=0 rethrow=0 return_oop=0}
         │                                                 ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@2 (line 484)
         │   0x00007f423836a637: mov     %r10,0x70(%r15)
  0.65%  ↘   0x00007f423836a63b: lock addl $0x0,0xffffffffffffffc0(%rsp)
                                                           ;*putfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@43 (line 487)
 16.43%      0x00007f423836a641: mov     0x10(%rsp),%r10
  0.05%      0x00007f423836a646: mov     0x20(%r10),%r11d  ;*getfield references {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@48 (line 488)
  0.05%      0x00007f423836a64a: mov     0xc(%r11),%r10d   ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@51 (line 488)
                                                           ; implicit exception: dispatches to 0x00007f423836a8e0
  0.80%      0x00007f423836a64e: vcvtsi2ssl %r10d,%xmm1,%xmm1
  0.10%      0x00007f423836a653: mov     (%rsp),%r10
             0x00007f423836a657: vmulss  0x14(%r10),%xmm1,%xmm0
  1.01%      0x00007f423836a65d: vcvttss2si %xmm0,%r11d
             0x00007f423836a661: cmp     $0x80000000,%r11d
          ╭  0x00007f423836a668: jne     0x7f423836a67a
          │  0x00007f423836a66a: sub     $0x8,%rsp
          │  0x00007f423836a66e: vmovss  %xmm0,(%rsp)
          │  0x00007f423836a673: callq   0x7f42308b6080    ;   {runtime_call StubRoutines (2)}
          │  0x00007f423836a678: pop     %r11
          ↘  0x00007f423836a67a: mov     0x10(%rsp),%r10
  1.21%      0x00007f423836a67f: mov     %r11d,0x18(%r10)  ;*putfield sync {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - java.util.concurrent.locks.ReentrantLock::&lt;init&gt;@12 (line 239)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;@6 (line 484)
....................................................................................................
 19.10%  <total for region 2>

....[Hottest Region 3]..............................................................................
c2, level 4, com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (259 bytes) 

             0x00007f423837297c: movabs  $0x7f424fa25290,%r10
             0x00007f4238372986: callq   %r10
             0x00007f4238372989: mov     %ebx,%r10d
             0x00007f423837298c: nopl    0x0(%rax)         ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
                                                           ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
                                                           ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ↗↗  0x00007f4238372990: mov     0x108(%r15),%r11
  0.85%  ││  0x00007f4238372997: mov     0x18(%rsp),%r9
         ││  0x00007f423837299c: mov     0x1c(%r9),%ecx    ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@121 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f42383729a0: incl    %r10d             ; ImmutableOopMap{r9=Oop rcx=NarrowOop [112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop }
         ││                                                ;*goto {reexecute=1 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f42383729a3: test    %eax,(%r11)       ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@148 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {poll}
  0.60%  ││  0x00007f42383729a6: mov     0xc(%rcx),%r8d    ; implicit exception: dispatches to 0x00007f4238372f20
         ││  0x00007f42383729aa: cmp     %r8d,%r10d
         ││  0x00007f42383729ad: jnl     0x7f423837266d    ;*if_icmpge {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@125 (line 183)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f42383729b3: mov     0x70(%rsp),%r8
         ││  0x00007f42383729b8: mov     0x20(%rsp),%rbp
  0.80%  ││  0x00007f42383729bd: mov     0x10(%rsp),%rbx
  0.05%  ││  0x00007f42383729c2: mov     0x28(%rsp),%r13d
         ││  0x00007f42383729c7: mov     0x118(%r15),%rax
  0.05%  ││  0x00007f42383729ce: mov     %rax,%r11
  0.70%  ││  0x00007f42383729d1: add     $0x28,%r11
  0.05%  ││  0x00007f42383729d5: cmp     0x128(%r15),%r11
         ││  0x00007f42383729dc: jnb     0x7f4238372b35    ;*goto {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││  0x00007f42383729e2: mov     %r11,0x118(%r15)
         ││  0x00007f42383729e9: prefetchnta 0x100(%r11)
  0.65%  ││  0x00007f42383729f1: mov     (%rsp),%r11
         ││  0x00007f42383729f5: mov     0xb8(%r11),%rdi
         ││  0x00007f42383729fc: mov     %rdi,(%rax)
         ││  0x00007f42383729ff: movl    $0x8012575,0x8(%rax)  ;   {metadata(&apos;org/springframework/util/ConcurrentReferenceHashMap$Segment&apos;)}
  0.70%  ││  0x00007f4238372a06: movl    $0x0,0xc(%rax)
  0.15%  ││  0x00007f4238372a0d: movq    $0x0,0x10(%rax)
         ││  0x00007f4238372a15: movq    $0x0,0x18(%rax)
         ││  0x00007f4238372a1d: movq    $0x0,0x20(%rax)
  0.60%  ││  0x00007f4238372a25: mov     %r8,0x70(%rsp)
         ││  0x00007f4238372a2a: mov     %rbp,0x20(%rsp)
  0.05%  ││  0x00007f4238372a2f: mov     %rbx,0x10(%rsp)
         ││  0x00007f4238372a34: mov     %r9,0x18(%rsp)
  0.65%  ││  0x00007f4238372a39: mov     %r13d,0x28(%rsp)
         ││  0x00007f4238372a3e: mov     %ecx,0x2c(%rsp)
         ││  0x00007f4238372a42: mov     %r10d,0x30(%rsp)
         ││  0x00007f4238372a47: mov     %rax,0x38(%rsp)   ;*new {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@134 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.75%  ││  0x00007f4238372a4c: mov     %rax,%rsi
  0.05%  ││  0x00007f4238372a4f: mov     0x18(%rsp),%rdx
  0.25%  ││  0x00007f4238372a54: mov     0x28(%rsp),%ecx
         ││  0x00007f4238372a58: nop
  0.60%  ││  0x00007f4238372a5b: callq   0x7f423089d100    ; ImmutableOopMap{[112]=Oop [120]=Oop [128]=Oop [8]=Oop [24]=Oop [44]=NarrowOop [56]=Oop }
         ││                                                ;*invokespecial &lt;init&gt; {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@141 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
         ││                                                ;   {optimized virtual_call}
         ││  0x00007f4238372a60: mov     0x2c(%rsp),%r11d
  0.70%  ││  0x00007f4238372a65: mov     0xc(%r11),%r8d    ; implicit exception: dispatches to 0x00007f4238372f14
  0.05%  ││  0x00007f4238372a69: mov     0x30(%rsp),%r10d
         ││  0x00007f4238372a6e: cmp     %r8d,%r10d
         ││  0x00007f4238372a71: jnb     0x7f4238372c13
         ││  0x00007f4238372a77: mov     %r11,%r8          ;*getfield segments {reexecute=0 rethrow=0 return_oop=0}
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@129 (line 184)
         ││                                                ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@10 (line 108)
         ││                                                ; - com.tsypanov.benchmark.CRHMBenchmark::instantiate@4 (line 15)
         ││                                                ; - com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub@17 (line 186)
  0.40%  ││  0x00007f4238372a7a: lea     0x10(%r11,%r10,4),%rbx
         ││  0x00007f4238372a7f: cmpb    $0x0,0x30(%r15)
         ││  0x00007f4238372a84: jne     0x7f4238372b03
  0.05%  ││  0x00007f4238372a86: mov     0x38(%rsp),%r11
  0.95%  ││  0x00007f4238372a8b: mov     %r11,%r9
         ││  0x00007f4238372a8e: mov     %r11,%r8
         ││  0x00007f4238372a91: mov     %r8d,(%rbx)
         ││  0x00007f4238372a94: mov     %rbx,%r11
  0.90%  ││  0x00007f4238372a97: xor     %r11,%r9
  0.05%  ││  0x00007f4238372a9a: shr     $0x14,%r9
         ││  0x00007f4238372a9e: test    %r9,%r9
         ╰│  0x00007f4238372aa1: je      0x7f4238372990
          │  0x00007f4238372aa7: shr     $0x9,%r11
          │  0x00007f4238372aab: movabs  $0x7f424d88e000,%rdi
          │  0x00007f4238372ab5: add     %r11,%rdi
          │  0x00007f4238372ab8: cmpb    $0x20,(%rdi)
          ╰  0x00007f4238372abb: je      0x7f4238372990
             0x00007f4238372ac1: mov     0x80(%r15),%r11   ;*goto {reexecute=0 rethrow=0 return_oop=0}
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::calculateShift@21 (line 437)
                                                           ; - org.springframework.util.ConcurrentReferenceHashMap::&lt;init&gt;@64 (line 178)
....................................................................................................
 10.70%  <total for region 3>

....[Hottest Regions]...............................................................................
 32.61%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (325 bytes) 
 19.10%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (34 bytes) 
 10.70%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (259 bytes) 
  6.78%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (210 bytes) 
  4.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (140 bytes) 
  3.97%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (58 bytes) 
  3.07%   [kernel.kallsyms]  native_write_msr (0 bytes) 
  2.21%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (31 bytes) 
  1.96%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (16 bytes) 
  1.71%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (27 bytes) 
  1.46%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (15 bytes) 
  0.70%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 (0 bytes) 
  0.60%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (89 bytes) 
  0.60%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (18 bytes) 
  0.35%   [kernel.kallsyms]  free_pcppages_bulk (24 bytes) 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 (0 bytes) 
  0.25%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 (21 bytes) 
  0.25%        libc-2.31.so  malloc (0 bytes) 
  0.20%   [kernel.kallsyms]  __mod_memcg_state (47 bytes) 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 (32 bytes) 
  7.94%  <...other 127 warm regions...>
....................................................................................................
 99.95%  <totals>

....[Hottest Methods (after inlining)]..............................................................
 73.77%         c2, level 4  org.springframework.util.ConcurrentReferenceHashMap$Segment::&lt;init&gt;, version 543 
 14.17%         c2, level 4  com.tsypanov.benchmark.jmh_generated.CRHMBenchmark_instantiate_jmhTest::instantiate_avgt_jmhStub, version 577 
  3.07%   [kernel.kallsyms]  native_write_msr 
  0.45%   [kernel.kallsyms]  free_pcppages_bulk 
  0.40%        libc-2.31.so  malloc 
  0.30%   [kernel.kallsyms]  zap_pte_range.isra.0 
  0.25%        libc-2.31.so  _int_malloc 
  0.20%           libjvm.so  RSHashTableIter::has_next 
  0.20%   [kernel.kallsyms]  finish_task_switch 
  0.20%   [kernel.kallsyms]  entry_SYSCALL_64 
  0.20%   [kernel.kallsyms]  release_pages 
  0.20%           libjvm.so  ObjAllocator::initialize 
  0.20%   [kernel.kallsyms]  __mod_memcg_state 
  0.15%   [kernel.kallsyms]  page_remove_rmap 
  0.15%   [kernel.kallsyms]  syscall_exit_to_user_mode 
  0.15%           libjvm.so  ParallelTaskTerminator::offer_termination 
  0.15%        libc-2.31.so  _int_free 
  0.15%        libc-2.31.so  __vfprintf_internal 
  0.15%        libc-2.31.so  malloc_consolidate 
  0.10%           libjvm.so  G1YoungRemSetSamplingClosure::do_heap_region 
  5.33%  <...other 94 warm methods...>
....................................................................................................
 99.95%  <totals>

....[Distribution by Source]........................................................................
 88.04%         c2, level 4
  6.98%   [kernel.kallsyms]
  2.36%           libjvm.so
  1.71%        libc-2.31.so
  0.75%    libfcml.so.0.0.0
  0.05%              [vdso]
  0.05%         interpreter
....................................................................................................
 99.95%  <totals>



# Run complete. Total time: 00:00:14

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                       Mode  Cnt    Score   Error  Units
CRHMBenchmark.instantiate       avgt       551.379          ns/op
CRHMBenchmark.instantiate:·asm  avgt           NaN            ---
